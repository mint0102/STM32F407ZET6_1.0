
Testfull.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c444  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034bc  0800c5d8  0800c5d8  0001c5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa94  0800fa94  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa94  0800fa94  0001fa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa9c  0800fa9c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa9c  0800fa9c  0001fa9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800faa0  0800faa0  0001faa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800faa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          0000047c  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000668  20000668  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000212aa  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a9e  00000000  00000000  000414c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  00045f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001680  00000000  00000000  000477e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278f0  00000000  00000000  00048e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021688  00000000  00000000  00070758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1432  00000000  00000000  00091de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00173212  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007504  00000000  00000000  00173268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5bc 	.word	0x0800c5bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800c5bc 	.word	0x0800c5bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f54:	4a3d      	ldr	r2, [pc, #244]	; (800104c <MX_ADC1_Init+0x10c>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f80:	4a33      	ldr	r2, [pc, #204]	; (8001050 <MX_ADC1_Init+0x110>)
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_ADC1_Init+0x108>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9e:	482a      	ldr	r0, [pc, #168]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fa0:	f003 f816 	bl	8003fd0 <HAL_ADC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f002 f81b 	bl	8002fe4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fc0:	f003 f978 	bl	80042b4 <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f002 f80b 	bl	8002fe4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fce:	2309      	movs	r3, #9
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_ADC1_Init+0x108>)
 8000fdc:	f003 f96a 	bl	80042b4 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000fe6:	f001 fffd 	bl	8002fe4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fea:	230a      	movs	r3, #10
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_ADC1_Init+0x108>)
 8000ff8:	f003 f95c 	bl	80042b4 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001002:	f001 ffef 	bl	8002fe4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001006:	230b      	movs	r3, #11
 8001008:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800100a:	2304      	movs	r3, #4
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_ADC1_Init+0x108>)
 8001014:	f003 f94e 	bl	80042b4 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800101e:	f001 ffe1 	bl	8002fe4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001022:	230c      	movs	r3, #12
 8001024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001026:	2305      	movs	r3, #5
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_ADC1_Init+0x108>)
 8001030:	f003 f940 	bl	80042b4 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800103a:	f001 ffd3 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000234 	.word	0x20000234
 800104c:	40012000 	.word	0x40012000
 8001050:	0f000001 	.word	0x0f000001

08001054 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a3c      	ldr	r2, [pc, #240]	; (8001164 <HAL_ADC_MspInit+0x110>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d171      	bne.n	800115a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <HAL_ADC_MspInit+0x114>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <HAL_ADC_MspInit+0x114>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_ADC_MspInit+0x114>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_ADC_MspInit+0x114>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010ca:	2307      	movs	r3, #7
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <HAL_ADC_MspInit+0x118>)
 80010de:	f004 f89d 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e2:	2303      	movs	r3, #3
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	481e      	ldr	r0, [pc, #120]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 80010f6:	f004 f891 	bl	800521c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_ADC_MspInit+0x120>)
 80010fc:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <HAL_ADC_MspInit+0x124>)
 80010fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800111c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800112c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001130:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_ADC_MspInit+0x120>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001140:	f003 fc6a 	bl	8004a18 <HAL_DMA_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800114a:	f001 ff4b 	bl	8002fe4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001152:	639a      	str	r2, [r3, #56]	; 0x38
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_ADC_MspInit+0x120>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40012000 	.word	0x40012000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020800 	.word	0x40020800
 8001170:	40020400 	.word	0x40020400
 8001174:	2000027c 	.word	0x2000027c
 8001178:	40026410 	.word	0x40026410

0800117c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2108      	movs	r1, #8
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <button_init+0x14>)
 8001186:	f004 f9fd 	bl	8005584 <HAL_GPIO_WritePin>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020c00 	.word	0x40020c00

08001194 <button_Scan>:

void button_Scan(){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	482f      	ldr	r0, [pc, #188]	; (800125c <button_Scan+0xc8>)
 80011a0:	f004 f9f0 	bl	8005584 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2108      	movs	r1, #8
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <button_Scan+0xc8>)
 80011aa:	f004 f9eb 	bl	8005584 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80011ae:	230a      	movs	r3, #10
 80011b0:	2202      	movs	r2, #2
 80011b2:	492b      	ldr	r1, [pc, #172]	; (8001260 <button_Scan+0xcc>)
 80011b4:	482b      	ldr	r0, [pc, #172]	; (8001264 <button_Scan+0xd0>)
 80011b6:	f005 fe40 	bl	8006e3a <HAL_SPI_Receive>
	  int button_index = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80011be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011c2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	e03f      	b.n	800124a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db06      	blt.n	80011de <button_Scan+0x4a>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	dc03      	bgt.n	80011de <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e018      	b.n	8001210 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	dd07      	ble.n	80011f4 <button_Scan+0x60>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b07      	cmp	r3, #7
 80011e8:	dc04      	bgt.n	80011f4 <button_Scan+0x60>
			  button_index = 7 - i;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f1c3 0307 	rsb	r3, r3, #7
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e00d      	b.n	8001210 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	dd06      	ble.n	8001208 <button_Scan+0x74>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0b      	cmp	r3, #11
 80011fe:	dc03      	bgt.n	8001208 <button_Scan+0x74>
			  button_index = i + 4;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3304      	adds	r3, #4
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e003      	b.n	8001210 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f1c3 0317 	rsb	r3, r3, #23
 800120e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <button_Scan+0xcc>)
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	897b      	ldrh	r3, [r7, #10]
 8001216:	4013      	ands	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <button_Scan+0x96>
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <button_Scan+0xd4>)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2100      	movs	r1, #0
 8001224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001228:	e009      	b.n	800123e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <button_Scan+0xd4>)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001232:	3301      	adds	r3, #1
 8001234:	b299      	uxth	r1, r3
 8001236:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <button_Scan+0xd4>)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800123e:	897b      	ldrh	r3, [r7, #10]
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	ddbc      	ble.n	80011ca <button_Scan+0x36>
	  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020c00 	.word	0x40020c00
 8001260:	20000208 	.word	0x20000208
 8001264:	200003f8 	.word	0x200003f8
 8001268:	200002dc 	.word	0x200002dc

0800126c <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001270:	2100      	movs	r1, #0
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <buzzer_init+0x10>)
 8001274:	f006 fb22 	bl	80078bc <HAL_TIM_PWM_Start>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000450 	.word	0x20000450

08001280 <buzzer_Ring>:

void buzzer_Ring(){
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <buzzer_Ring+0x18>)
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <buzzer_Ring+0x1c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	2000020a 	.word	0x2000020a
 800129c:	20000450 	.word	0x20000450

080012a0 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <buzzer_SetVolume+0x1c>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	7013      	strb	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	2000020a 	.word	0x2000020a

080012c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_DMA_Init+0x3c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2038      	movs	r0, #56	; 0x38
 80012e8:	f003 fb5f 	bl	80049aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012ec:	2038      	movs	r0, #56	; 0x38
 80012ee:	f003 fb78 	bl	80049e2 <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30);
 8001304:	201e      	movs	r0, #30
 8001306:	f002 fd7f 	bl	8003e08 <DEC2BCD>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <ds3231_init+0x6c>)
 8001310:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22);
 8001312:	2016      	movs	r0, #22
 8001314:	f002 fd78 	bl	8003e08 <DEC2BCD>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <ds3231_init+0x6c>)
 800131e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21);
 8001320:	2015      	movs	r0, #21
 8001322:	f002 fd71 	bl	8003e08 <DEC2BCD>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <ds3231_init+0x6c>)
 800132c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);
 800132e:	2006      	movs	r0, #6
 8001330:	f002 fd6a 	bl	8003e08 <DEC2BCD>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <ds3231_init+0x6c>)
 800133a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15);
 800133c:	200f      	movs	r0, #15
 800133e:	f002 fd63 	bl	8003e08 <DEC2BCD>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <ds3231_init+0x6c>)
 8001348:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);
 800134a:	2009      	movs	r0, #9
 800134c:	f002 fd5c 	bl	8003e08 <DEC2BCD>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <ds3231_init+0x6c>)
 8001356:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23);
 8001358:	2017      	movs	r0, #23
 800135a:	f002 fd55 	bl	8003e08 <DEC2BCD>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b02      	ldr	r3, [pc, #8]	; (800136c <ds3231_init+0x6c>)
 8001364:	719a      	strb	r2, [r3, #6]
//	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7,10);
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000304 	.word	0x20000304

08001370 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
}

void ds3231_ReadTime(){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8001376:	230a      	movs	r3, #10
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2307      	movs	r3, #7
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <ds3231_ReadTime+0xa4>)
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2200      	movs	r2, #0
 8001386:	21d0      	movs	r1, #208	; 0xd0
 8001388:	4823      	ldr	r0, [pc, #140]	; (8001418 <ds3231_ReadTime+0xa8>)
 800138a:	f004 fa73 	bl	8005874 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <ds3231_ReadTime+0xa4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fd1e 	bl	8003dd4 <BCD2DEC>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <ds3231_ReadTime+0xac>)
 800139e:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <ds3231_ReadTime+0xa4>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fd15 	bl	8003dd4 <BCD2DEC>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <ds3231_ReadTime+0xb0>)
 80013b0:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <ds3231_ReadTime+0xa4>)
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 fd0c 	bl	8003dd4 <BCD2DEC>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <ds3231_ReadTime+0xb4>)
 80013c2:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <ds3231_ReadTime+0xa4>)
 80013c6:	78db      	ldrb	r3, [r3, #3]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fd03 	bl	8003dd4 <BCD2DEC>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <ds3231_ReadTime+0xb8>)
 80013d4:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <ds3231_ReadTime+0xa4>)
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fcfa 	bl	8003dd4 <BCD2DEC>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <ds3231_ReadTime+0xbc>)
 80013e6:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <ds3231_ReadTime+0xa4>)
 80013ea:	795b      	ldrb	r3, [r3, #5]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 fcf1 	bl	8003dd4 <BCD2DEC>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <ds3231_ReadTime+0xc0>)
 80013f8:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <ds3231_ReadTime+0xa4>)
 80013fc:	799b      	ldrb	r3, [r3, #6]
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fce8 	bl	8003dd4 <BCD2DEC>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <ds3231_ReadTime+0xc4>)
 800140a:	701a      	strb	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000304 	.word	0x20000304
 8001418:	2000035c 	.word	0x2000035c
 800141c:	200002fc 	.word	0x200002fc
 8001420:	200002fe 	.word	0x200002fe
 8001424:	20000301 	.word	0x20000301
 8001428:	20000300 	.word	0x20000300
 800142c:	200002ff 	.word	0x200002ff
 8001430:	20000302 	.word	0x20000302
 8001434:	200002fd 	.word	0x200002fd

08001438 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <MX_FSMC_Init+0xec>)
 8001466:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800146a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_FSMC_Init+0xec>)
 800146e:	4a2e      	ldr	r2, [pc, #184]	; (8001528 <MX_FSMC_Init+0xf0>)
 8001470:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_FSMC_Init+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_FSMC_Init+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_FSMC_Init+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <MX_FSMC_Init+0xec>)
 8001486:	2210      	movs	r2, #16
 8001488:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_FSMC_Init+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <MX_FSMC_Init+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <MX_FSMC_Init+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <MX_FSMC_Init+0xec>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <MX_FSMC_Init+0xec>)
 80014a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <MX_FSMC_Init+0xec>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_FSMC_Init+0xec>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_FSMC_Init+0xec>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_FSMC_Init+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_FSMC_Init+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80014ca:	230f      	movs	r3, #15
 80014cc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014ce:	230f      	movs	r3, #15
 80014d0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80014d2:	233c      	movs	r3, #60	; 0x3c
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80014da:	2310      	movs	r3, #16
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80014de:	2311      	movs	r3, #17
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014e2:	2300      	movs	r3, #0
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 80014e6:	2309      	movs	r3, #9
 80014e8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014ea:	230f      	movs	r3, #15
 80014ec:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 80014ee:	2308      	movs	r3, #8
 80014f0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80014f6:	2310      	movs	r3, #16
 80014f8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80014fa:	2311      	movs	r3, #17
 80014fc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001502:	463a      	mov	r2, r7
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_FSMC_Init+0xec>)
 800150c:	f006 f878 	bl	8007600 <HAL_SRAM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001516:	f001 fd65 	bl	8002fe4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800151a:	bf00      	nop
 800151c:	3738      	adds	r7, #56	; 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000030c 	.word	0x2000030c
 8001528:	a0000104 	.word	0xa0000104

0800152c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_FSMC_MspInit+0x88>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d131      	bne.n	80015ac <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_FSMC_MspInit+0x88>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_FSMC_MspInit+0x8c>)
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <HAL_FSMC_MspInit+0x8c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6393      	str	r3, [r2, #56]	; 0x38
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_FSMC_MspInit+0x8c>)
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800156a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800156e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800157c:	230c      	movs	r3, #12
 800157e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <HAL_FSMC_MspInit+0x90>)
 8001586:	f003 fe49 	bl	800521c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800158a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800158e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800159c:	230c      	movs	r3, #12
 800159e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4806      	ldr	r0, [pc, #24]	; (80015c0 <HAL_FSMC_MspInit+0x94>)
 80015a6:	f003 fe39 	bl	800521c <HAL_GPIO_Init>
 80015aa:	e000      	b.n	80015ae <HAL_FSMC_MspInit+0x82>
    return;
 80015ac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000020c 	.word	0x2000020c
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40020c00 	.word	0x40020c00

080015c4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015cc:	f7ff ffae 	bl	800152c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	; 0x38
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <MX_GPIO_Init+0x21c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a7f      	ldr	r2, [pc, #508]	; (80017f4 <MX_GPIO_Init+0x21c>)
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	4b79      	ldr	r3, [pc, #484]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a78      	ldr	r2, [pc, #480]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <MX_GPIO_Init+0x21c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <MX_GPIO_Init+0x21c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a71      	ldr	r2, [pc, #452]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0320 	and.w	r3, r3, #32
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a6a      	ldr	r2, [pc, #424]	; (80017f4 <MX_GPIO_Init+0x21c>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a63      	ldr	r2, [pc, #396]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a5c      	ldr	r2, [pc, #368]	; (80017f4 <MX_GPIO_Init+0x21c>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <MX_GPIO_Init+0x21c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <MX_GPIO_Init+0x21c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a55      	ldr	r2, [pc, #340]	; (80017f4 <MX_GPIO_Init+0x21c>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <MX_GPIO_Init+0x21c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <MX_GPIO_Init+0x21c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a4e      	ldr	r2, [pc, #312]	; (80017f4 <MX_GPIO_Init+0x21c>)
 80016bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <MX_GPIO_Init+0x21c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2170      	movs	r1, #112	; 0x70
 80016d2:	4849      	ldr	r0, [pc, #292]	; (80017f8 <MX_GPIO_Init+0x220>)
 80016d4:	f003 ff56 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016de:	4847      	ldr	r0, [pc, #284]	; (80017fc <MX_GPIO_Init+0x224>)
 80016e0:	f003 ff50 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	4845      	ldr	r0, [pc, #276]	; (8001800 <MX_GPIO_Init+0x228>)
 80016ea:	f003 ff4b 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	4844      	ldr	r0, [pc, #272]	; (8001804 <MX_GPIO_Init+0x22c>)
 80016f4:	f003 ff46 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|RS485_EN_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80016fe:	4842      	ldr	r0, [pc, #264]	; (8001808 <MX_GPIO_Init+0x230>)
 8001700:	f003 ff40 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2108      	movs	r1, #8
 8001708:	4840      	ldr	r0, [pc, #256]	; (800180c <MX_GPIO_Init+0x234>)
 800170a:	f003 ff3b 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800170e:	2370      	movs	r3, #112	; 0x70
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	4834      	ldr	r0, [pc, #208]	; (80017f8 <MX_GPIO_Init+0x220>)
 8001726:	f003 fd79 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800172a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	482e      	ldr	r0, [pc, #184]	; (80017fc <MX_GPIO_Init+0x224>)
 8001744:	f003 fd6a 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4828      	ldr	r0, [pc, #160]	; (8001800 <MX_GPIO_Init+0x228>)
 8001760:	f003 fd5c 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001764:	23c0      	movs	r3, #192	; 0xc0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	4824      	ldr	r0, [pc, #144]	; (8001808 <MX_GPIO_Init+0x230>)
 8001778:	f003 fd50 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800177c:	2330      	movs	r3, #48	; 0x30
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	481b      	ldr	r0, [pc, #108]	; (80017fc <MX_GPIO_Init+0x224>)
 8001790:	f003 fd44 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001794:	2340      	movs	r3, #64	; 0x40
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4816      	ldr	r0, [pc, #88]	; (8001804 <MX_GPIO_Init+0x22c>)
 80017ac:	f003 fd36 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|RS485_EN_Pin;
 80017b0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	480f      	ldr	r0, [pc, #60]	; (8001808 <MX_GPIO_Init+0x230>)
 80017ca:	f003 fd27 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80017ce:	2308      	movs	r3, #8
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <MX_GPIO_Init+0x234>)
 80017e6:	f003 fd19 	bl	800521c <HAL_GPIO_Init>

}
 80017ea:	bf00      	nop
 80017ec:	3738      	adds	r7, #56	; 0x38
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40020800 	.word	0x40020800
 8001800:	40021400 	.word	0x40021400
 8001804:	40021800 	.word	0x40021800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020c00 	.word	0x40020c00

08001810 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_I2C1_Init+0x50>)
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <MX_I2C1_Init+0x54>)
 8001818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_I2C1_Init+0x50>)
 800181c:	4a12      	ldr	r2, [pc, #72]	; (8001868 <MX_I2C1_Init+0x58>)
 800181e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_I2C1_Init+0x50>)
 800182e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_I2C1_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_I2C1_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_I2C1_Init+0x50>)
 800184e:	f003 fecd 	bl	80055ec <HAL_I2C_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001858:	f001 fbc4 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000035c 	.word	0x2000035c
 8001864:	40005400 	.word	0x40005400
 8001868:	000186a0 	.word	0x000186a0

0800186c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <HAL_I2C_MspInit+0x84>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d12b      	bne.n	80018e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018aa:	23c0      	movs	r3, #192	; 0xc0
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ae:	2312      	movs	r3, #18
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ba:	2304      	movs	r3, #4
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <HAL_I2C_MspInit+0x8c>)
 80018c6:	f003 fca9 	bl	800521c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 80018d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	; 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40005400 	.word	0x40005400
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020400 	.word	0x40020400

080018fc <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <LCD_WR_REG+0x1c>)
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	8013      	strh	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	600ffffe 	.word	0x600ffffe

0800191c <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <LCD_WR_DATA+0x1c>)
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	8053      	strh	r3, [r2, #2]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	600ffffe 	.word	0x600ffffe

0800193c <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <LCD_RD_DATA+0x20>)
 8001944:	885b      	ldrh	r3, [r3, #2]
 8001946:	b29b      	uxth	r3, r3
 8001948:	80fb      	strh	r3, [r7, #6]
	return ram;
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	b29b      	uxth	r3, r3
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	600ffffe 	.word	0x600ffffe

08001960 <lcd_AddressSet>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	80fb      	strh	r3, [r7, #6]
 8001972:	4603      	mov	r3, r0
 8001974:	80bb      	strh	r3, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	807b      	strh	r3, [r7, #2]
 800197a:	4613      	mov	r3, r2
 800197c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 800197e:	202a      	movs	r0, #42	; 0x2a
 8001980:	f7ff ffbc 	bl	80018fc <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b29b      	uxth	r3, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ffc6 	bl	800191c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ffc0 	bl	800191c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ffba 	bl	800191c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ffb4 	bl	800191c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 80019b4:	202b      	movs	r0, #43	; 0x2b
 80019b6:	f7ff ffa1 	bl	80018fc <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80019ba:	88bb      	ldrh	r3, [r7, #4]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ffab 	bl	800191c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80019c6:	88bb      	ldrh	r3, [r7, #4]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ffa5 	bl	800191c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80019d2:	883b      	ldrh	r3, [r7, #0]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff9f 	bl	800191c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80019de:	883b      	ldrh	r3, [r7, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff99 	bl	800191c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 80019ea:	202c      	movs	r0, #44	; 0x2c
 80019ec:	f7ff ff86 	bl	80018fc <LCD_WR_REG>
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}

080019f8 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <lcd_Clear+0x70>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <lcd_Clear+0x70>)
 8001a1c:	885b      	ldrh	r3, [r3, #2]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff ff9b 	bl	8001960 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	81fb      	strh	r3, [r7, #14]
 8001a2e:	e011      	b.n	8001a54 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	81bb      	strh	r3, [r7, #12]
 8001a34:	e006      	b.n	8001a44 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff6f 	bl	800191c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001a3e:	89bb      	ldrh	r3, [r7, #12]
 8001a40:	3301      	adds	r3, #1
 8001a42:	81bb      	strh	r3, [r7, #12]
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <lcd_Clear+0x70>)
 8001a46:	885b      	ldrh	r3, [r3, #2]
 8001a48:	89ba      	ldrh	r2, [r7, #12]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d3f3      	bcc.n	8001a36 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	3301      	adds	r3, #1
 8001a52:	81fb      	strh	r3, [r7, #14]
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <lcd_Clear+0x70>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	89fa      	ldrh	r2, [r7, #14]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3e8      	bcc.n	8001a30 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200003b0 	.word	0x200003b0

08001a6c <lcd_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
 8001a76:	460b      	mov	r3, r1
 8001a78:	80bb      	strh	r3, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	88fa      	ldrh	r2, [r7, #6]
 8001a82:	88b9      	ldrh	r1, [r7, #4]
 8001a84:	88f8      	ldrh	r0, [r7, #6]
 8001a86:	f7ff ff6b 	bl	8001960 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff45 	bl	800191c <LCD_WR_DATA>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	80fb      	strh	r3, [r7, #6]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80bb      	strh	r3, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70fb      	strb	r3, [r7, #3]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001ac2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	fb12 f303 	smulbb	r3, r2, r3
 8001af2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	3b20      	subs	r3, #32
 8001af8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29c      	uxth	r4, r3
 8001b08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	88bb      	ldrh	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	88b9      	ldrh	r1, [r7, #4]
 8001b1a:	88f8      	ldrh	r0, [r7, #6]
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	f7ff ff1f 	bl	8001960 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	827b      	strh	r3, [r7, #18]
 8001b26:	e07a      	b.n	8001c1e <lcd_ShowChar+0x182>
	{
		if(sizey==12);		       //µ÷ÓÃ6x12×ÖÌå
 8001b28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b2c:	2b0c      	cmp	r3, #12
 8001b2e:	d028      	beq.n	8001b82 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 8001b30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d108      	bne.n	8001b4a <lcd_ShowChar+0xae>
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	8a7b      	ldrh	r3, [r7, #18]
 8001b3c:	493c      	ldr	r1, [pc, #240]	; (8001c30 <lcd_ShowChar+0x194>)
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	440a      	add	r2, r1
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	75fb      	strb	r3, [r7, #23]
 8001b48:	e01b      	b.n	8001b82 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 8001b4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b4e:	2b18      	cmp	r3, #24
 8001b50:	d10b      	bne.n	8001b6a <lcd_ShowChar+0xce>
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	8a79      	ldrh	r1, [r7, #18]
 8001b56:	4837      	ldr	r0, [pc, #220]	; (8001c34 <lcd_ShowChar+0x198>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	4403      	add	r3, r0
 8001b62:	440b      	add	r3, r1
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	75fb      	strb	r3, [r7, #23]
 8001b68:	e00b      	b.n	8001b82 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 8001b6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d15a      	bne.n	8001c28 <lcd_ShowChar+0x18c>
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	8a7b      	ldrh	r3, [r7, #18]
 8001b76:	4930      	ldr	r1, [pc, #192]	; (8001c38 <lcd_ShowChar+0x19c>)
 8001b78:	0192      	lsls	r2, r2, #6
 8001b7a:	440a      	add	r2, r1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	75bb      	strb	r3, [r7, #22]
 8001b86:	e044      	b.n	8001c12 <lcd_ShowChar+0x176>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8001b88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d120      	bne.n	8001bd2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001b90:	7dfa      	ldrb	r2, [r7, #23]
 8001b92:	7dbb      	ldrb	r3, [r7, #22]
 8001b94:	fa42 f303 	asr.w	r3, r2, r3
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <lcd_ShowChar+0x10e>
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff feba 	bl	800191c <LCD_WR_DATA>
 8001ba8:	e003      	b.n	8001bb2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001baa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff feb5 	bl	800191c <LCD_WR_DATA>
				m++;
 8001bb2:	7d7b      	ldrb	r3, [r7, #21]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001bb8:	7d7b      	ldrb	r3, [r7, #21]
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bc0:	fb02 f201 	mul.w	r2, r2, r1
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d11f      	bne.n	8001c0c <lcd_ShowChar+0x170>
				{
					m=0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	757b      	strb	r3, [r7, #21]
					break;
 8001bd0:	e022      	b.n	8001c18 <lcd_ShowChar+0x17c>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8001bd2:	7dfa      	ldrb	r2, [r7, #23]
 8001bd4:	7dbb      	ldrb	r3, [r7, #22]
 8001bd6:	fa42 f303 	asr.w	r3, r2, r3
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <lcd_ShowChar+0x152>
 8001be2:	883a      	ldrh	r2, [r7, #0]
 8001be4:	88b9      	ldrh	r1, [r7, #4]
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff3f 	bl	8001a6c <lcd_DrawPoint>
				x++;
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001bf4:	88fa      	ldrh	r2, [r7, #6]
 8001bf6:	8a3b      	ldrh	r3, [r7, #16]
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d105      	bne.n	8001c0c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001c00:	8a3b      	ldrh	r3, [r7, #16]
 8001c02:	80fb      	strh	r3, [r7, #6]
					y++;
 8001c04:	88bb      	ldrh	r3, [r7, #4]
 8001c06:	3301      	adds	r3, #1
 8001c08:	80bb      	strh	r3, [r7, #4]
					break;
 8001c0a:	e005      	b.n	8001c18 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001c0c:	7dbb      	ldrb	r3, [r7, #22]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	75bb      	strb	r3, [r7, #22]
 8001c12:	7dbb      	ldrb	r3, [r7, #22]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d9b7      	bls.n	8001b88 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001c18:	8a7b      	ldrh	r3, [r7, #18]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	827b      	strh	r3, [r7, #18]
 8001c1e:	8a7a      	ldrh	r2, [r7, #18]
 8001c20:	89bb      	ldrh	r3, [r7, #12]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d380      	bcc.n	8001b28 <lcd_ShowChar+0x8c>
 8001c26:	e000      	b.n	8001c2a <lcd_ShowChar+0x18e>
		else return;
 8001c28:	bf00      	nop
				}
			}
		}
	}
}
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	0800c710 	.word	0x0800c710
 8001c34:	0800cd00 	.word	0x0800cd00
 8001c38:	0800ded0 	.word	0x0800ded0

08001c3c <mypow>:
      º¯ÊýËµÃ÷£ºÏÔÊ¾Êý×Ö
      Èë¿ÚÊý¾Ý£ºmµ×Êý£¬nÖ¸Êý
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	460a      	mov	r2, r1
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001c50:	e004      	b.n	8001c5c <mypow+0x20>
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	1e5a      	subs	r2, r3, #1
 8001c60:	71ba      	strb	r2, [r7, #6]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f5      	bne.n	8001c52 <mypow+0x16>
	return result;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <lcd_ShowIntNum>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af04      	add	r7, sp, #16
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4623      	mov	r3, r4
 8001c84:	80fb      	strh	r3, [r7, #6]
 8001c86:	4603      	mov	r3, r0
 8001c88:	80bb      	strh	r3, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	807b      	strh	r3, [r7, #2]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001c96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	e059      	b.n	8001d58 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001ca4:	887c      	ldrh	r4, [r7, #2]
 8001ca6:	787a      	ldrb	r2, [r7, #1]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	200a      	movs	r0, #10
 8001cb6:	f7ff ffc1 	bl	8001c3c <mypow>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	fbb4 f1f3 	udiv	r1, r4, r3
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <lcd_ShowIntNum+0xf8>)
 8001cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	1aca      	subs	r2, r1, r3
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001cd6:	7bbb      	ldrb	r3, [r7, #14]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d121      	bne.n	8001d20 <lcd_ShowIntNum+0xac>
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	787b      	ldrb	r3, [r7, #1]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	da1c      	bge.n	8001d20 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001ce6:	7b3b      	ldrb	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d117      	bne.n	8001d1c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	7b7b      	ldrb	r3, [r7, #13]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	fb12 f303 	smulbb	r3, r2, r3
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b298      	uxth	r0, r3
 8001d00:	8c3a      	ldrh	r2, [r7, #32]
 8001d02:	88b9      	ldrh	r1, [r7, #4]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	4613      	mov	r3, r2
 8001d14:	2220      	movs	r2, #32
 8001d16:	f7ff fec1 	bl	8001a9c <lcd_ShowChar>
				continue;
 8001d1a:	e01a      	b.n	8001d52 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	7b7b      	ldrb	r3, [r7, #13]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	fb12 f303 	smulbb	r3, r2, r3
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	4413      	add	r3, r2
 8001d32:	b298      	uxth	r0, r3
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	3330      	adds	r3, #48	; 0x30
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	8c3c      	ldrh	r4, [r7, #32]
 8001d3c:	88b9      	ldrh	r1, [r7, #4]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	4623      	mov	r3, r4
 8001d4e:	f7ff fea5 	bl	8001a9c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	787b      	ldrb	r3, [r7, #1]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3a1      	bcc.n	8001ca4 <lcd_ShowIntNum+0x30>
	}
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	cccccccd 	.word	0xcccccccd

08001d70 <lcd_ShowFloatNum1>:
                bc ×ÖµÄ±³¾°É«
                sizey ×ÖºÅ
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowFloatNum1(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b08b      	sub	sp, #44	; 0x2c
 8001d74:	af04      	add	r7, sp, #16
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4623      	mov	r3, r4
 8001d84:	81fb      	strh	r3, [r7, #14]
 8001d86:	4603      	mov	r3, r0
 8001d88:	81bb      	strh	r3, [r7, #12]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001d92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001d9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e78 <lcd_ShowFloatNum1+0x108>
 8001da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001daa:	ee17 3a90 	vmov	r3, s15
 8001dae:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]
 8001db4:	e057      	b.n	8001e66 <lcd_ShowFloatNum1+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001db6:	8abc      	ldrh	r4, [r7, #20]
 8001db8:	79fa      	ldrb	r2, [r7, #7]
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f7ff ff38 	bl	8001c3c <mypow>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	fbb4 f1f3 	udiv	r1, r4, r3
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <lcd_ShowFloatNum1+0x10c>)
 8001dd4:	fba3 2301 	umull	r2, r3, r3, r1
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	1aca      	subs	r2, r1, r3
 8001de4:	4613      	mov	r3, r2
 8001de6:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001de8:	7dfa      	ldrb	r2, [r7, #23]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	3b02      	subs	r3, #2
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d11d      	bne.n	8001e2e <lcd_ShowFloatNum1+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	3b02      	subs	r3, #2
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	7dbb      	ldrb	r3, [r7, #22]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	fb12 f303 	smulbb	r3, r2, r3
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	89fb      	ldrh	r3, [r7, #14]
 8001e04:	4413      	add	r3, r2
 8001e06:	b298      	uxth	r0, r3
 8001e08:	88ba      	ldrh	r2, [r7, #4]
 8001e0a:	89b9      	ldrh	r1, [r7, #12]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	222e      	movs	r2, #46	; 0x2e
 8001e1e:	f7ff fe3d 	bl	8001a9c <lcd_ShowChar>
			t++;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	3301      	adds	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	7dbb      	ldrb	r3, [r7, #22]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	fb12 f303 	smulbb	r3, r2, r3
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b298      	uxth	r0, r3
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	3330      	adds	r3, #48	; 0x30
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	88bc      	ldrh	r4, [r7, #4]
 8001e4a:	89b9      	ldrh	r1, [r7, #12]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	f7ff fe1e 	bl	8001a9c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	3301      	adds	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
 8001e66:	7dfa      	ldrb	r2, [r7, #23]
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d3a3      	bcc.n	8001db6 <lcd_ShowFloatNum1+0x46>
	}
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	42c80000 	.word	0x42c80000
 8001e7c:	cccccccd 	.word	0xcccccccd

08001e80 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <lcd_SetDir+0x44>)
 8001e9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ea0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <lcd_SetDir+0x44>)
 8001ea4:	22f0      	movs	r2, #240	; 0xf0
 8001ea6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001ea8:	e006      	b.n	8001eb8 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <lcd_SetDir+0x44>)
 8001eac:	22f0      	movs	r2, #240	; 0xf0
 8001eae:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <lcd_SetDir+0x44>)
 8001eb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eb6:	805a      	strh	r2, [r3, #2]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	200003b0 	.word	0x200003b0

08001ec8 <lcd_init>:



//³õÊ¼»¯lcd
void lcd_init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed2:	48aa      	ldr	r0, [pc, #680]	; (800217c <lcd_init+0x2b4>)
 8001ed4:	f003 fb56 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001edc:	f002 f854 	bl	8003f88 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee6:	48a5      	ldr	r0, [pc, #660]	; (800217c <lcd_init+0x2b4>)
 8001ee8:	f003 fb4c 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001eec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ef0:	f002 f84a 	bl	8003f88 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff ffc3 	bl	8001e80 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001efa:	20d3      	movs	r0, #211	; 0xd3
 8001efc:	f7ff fcfe 	bl	80018fc <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001f00:	f7ff fd1c 	bl	800193c <LCD_RD_DATA>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b9d      	ldr	r3, [pc, #628]	; (8002180 <lcd_init+0x2b8>)
 8001f0a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 8001f0c:	f7ff fd16 	bl	800193c <LCD_RD_DATA>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b9a      	ldr	r3, [pc, #616]	; (8002180 <lcd_init+0x2b8>)
 8001f16:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 8001f18:	f7ff fd10 	bl	800193c <LCD_RD_DATA>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b97      	ldr	r3, [pc, #604]	; (8002180 <lcd_init+0x2b8>)
 8001f22:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001f24:	4b96      	ldr	r3, [pc, #600]	; (8002180 <lcd_init+0x2b8>)
 8001f26:	889b      	ldrh	r3, [r3, #4]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b94      	ldr	r3, [pc, #592]	; (8002180 <lcd_init+0x2b8>)
 8001f2e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8001f30:	f7ff fd04 	bl	800193c <LCD_RD_DATA>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b91      	ldr	r3, [pc, #580]	; (8002180 <lcd_init+0x2b8>)
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b8f      	ldr	r3, [pc, #572]	; (8002180 <lcd_init+0x2b8>)
 8001f42:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f44:	20cf      	movs	r0, #207	; 0xcf
 8001f46:	f7ff fcd9 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff fce6 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f50:	20c1      	movs	r0, #193	; 0xc1
 8001f52:	f7ff fce3 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f56:	2030      	movs	r0, #48	; 0x30
 8001f58:	f7ff fce0 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f5c:	20ed      	movs	r0, #237	; 0xed
 8001f5e:	f7ff fccd 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f62:	2064      	movs	r0, #100	; 0x64
 8001f64:	f7ff fcda 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f7ff fcd7 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f6e:	2012      	movs	r0, #18
 8001f70:	f7ff fcd4 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f74:	2081      	movs	r0, #129	; 0x81
 8001f76:	f7ff fcd1 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f7a:	20e8      	movs	r0, #232	; 0xe8
 8001f7c:	f7ff fcbe 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f80:	2085      	movs	r0, #133	; 0x85
 8001f82:	f7ff fccb 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f86:	2010      	movs	r0, #16
 8001f88:	f7ff fcc8 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f8c:	207a      	movs	r0, #122	; 0x7a
 8001f8e:	f7ff fcc5 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f92:	20cb      	movs	r0, #203	; 0xcb
 8001f94:	f7ff fcb2 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f98:	2039      	movs	r0, #57	; 0x39
 8001f9a:	f7ff fcbf 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f9e:	202c      	movs	r0, #44	; 0x2c
 8001fa0:	f7ff fcbc 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fcb9 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001faa:	2034      	movs	r0, #52	; 0x34
 8001fac:	f7ff fcb6 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7ff fcb3 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001fb6:	20f7      	movs	r0, #247	; 0xf7
 8001fb8:	f7ff fca0 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001fbc:	2020      	movs	r0, #32
 8001fbe:	f7ff fcad 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001fc2:	20ea      	movs	r0, #234	; 0xea
 8001fc4:	f7ff fc9a 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fca7 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fca4 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001fd4:	20c0      	movs	r0, #192	; 0xc0
 8001fd6:	f7ff fc91 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001fda:	201b      	movs	r0, #27
 8001fdc:	f7ff fc9e 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001fe0:	20c1      	movs	r0, #193	; 0xc1
 8001fe2:	f7ff fc8b 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff fc98 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001fec:	20c5      	movs	r0, #197	; 0xc5
 8001fee:	f7ff fc85 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001ff2:	2030      	movs	r0, #48	; 0x30
 8001ff4:	f7ff fc92 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001ff8:	2030      	movs	r0, #48	; 0x30
 8001ffa:	f7ff fc8f 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001ffe:	20c7      	movs	r0, #199	; 0xc7
 8002000:	f7ff fc7c 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002004:	20b7      	movs	r0, #183	; 0xb7
 8002006:	f7ff fc89 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800200a:	2036      	movs	r0, #54	; 0x36
 800200c:	f7ff fc76 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002010:	2008      	movs	r0, #8
 8002012:	f7ff fc83 	bl	800191c <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8002016:	203a      	movs	r0, #58	; 0x3a
 8002018:	f7ff fc70 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800201c:	2055      	movs	r0, #85	; 0x55
 800201e:	f7ff fc7d 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002022:	20b1      	movs	r0, #177	; 0xb1
 8002024:	f7ff fc6a 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fc77 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800202e:	201a      	movs	r0, #26
 8002030:	f7ff fc74 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002034:	20b6      	movs	r0, #182	; 0xb6
 8002036:	f7ff fc61 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800203a:	200a      	movs	r0, #10
 800203c:	f7ff fc6e 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002040:	20a2      	movs	r0, #162	; 0xa2
 8002042:	f7ff fc6b 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002046:	20f2      	movs	r0, #242	; 0xf2
 8002048:	f7ff fc58 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff fc65 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002052:	2026      	movs	r0, #38	; 0x26
 8002054:	f7ff fc52 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002058:	2001      	movs	r0, #1
 800205a:	f7ff fc5f 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800205e:	20e0      	movs	r0, #224	; 0xe0
 8002060:	f7ff fc4c 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002064:	200f      	movs	r0, #15
 8002066:	f7ff fc59 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800206a:	202a      	movs	r0, #42	; 0x2a
 800206c:	f7ff fc56 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002070:	2028      	movs	r0, #40	; 0x28
 8002072:	f7ff fc53 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002076:	2008      	movs	r0, #8
 8002078:	f7ff fc50 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800207c:	200e      	movs	r0, #14
 800207e:	f7ff fc4d 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002082:	2008      	movs	r0, #8
 8002084:	f7ff fc4a 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002088:	2054      	movs	r0, #84	; 0x54
 800208a:	f7ff fc47 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800208e:	20a9      	movs	r0, #169	; 0xa9
 8002090:	f7ff fc44 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002094:	2043      	movs	r0, #67	; 0x43
 8002096:	f7ff fc41 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800209a:	200a      	movs	r0, #10
 800209c:	f7ff fc3e 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020a0:	200f      	movs	r0, #15
 80020a2:	f7ff fc3b 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff fc38 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fc35 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff fc32 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff fc2f 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80020be:	20e1      	movs	r0, #225	; 0xe1
 80020c0:	f7ff fc1c 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fc29 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80020ca:	2015      	movs	r0, #21
 80020cc:	f7ff fc26 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80020d0:	2017      	movs	r0, #23
 80020d2:	f7ff fc23 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80020d6:	2007      	movs	r0, #7
 80020d8:	f7ff fc20 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80020dc:	2011      	movs	r0, #17
 80020de:	f7ff fc1d 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80020e2:	2006      	movs	r0, #6
 80020e4:	f7ff fc1a 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80020e8:	202b      	movs	r0, #43	; 0x2b
 80020ea:	f7ff fc17 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80020ee:	2056      	movs	r0, #86	; 0x56
 80020f0:	f7ff fc14 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80020f4:	203c      	movs	r0, #60	; 0x3c
 80020f6:	f7ff fc11 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80020fa:	2005      	movs	r0, #5
 80020fc:	f7ff fc0e 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002100:	2010      	movs	r0, #16
 8002102:	f7ff fc0b 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002106:	200f      	movs	r0, #15
 8002108:	f7ff fc08 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800210c:	203f      	movs	r0, #63	; 0x3f
 800210e:	f7ff fc05 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002112:	203f      	movs	r0, #63	; 0x3f
 8002114:	f7ff fc02 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002118:	200f      	movs	r0, #15
 800211a:	f7ff fbff 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800211e:	202b      	movs	r0, #43	; 0x2b
 8002120:	f7ff fbec 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f7ff fbf9 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800212a:	2000      	movs	r0, #0
 800212c:	f7ff fbf6 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff fbf3 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002136:	203f      	movs	r0, #63	; 0x3f
 8002138:	f7ff fbf0 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800213c:	202a      	movs	r0, #42	; 0x2a
 800213e:	f7ff fbdd 	bl	80018fc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fbea 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff fbe7 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff fbe4 	bl	800191c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002154:	20ef      	movs	r0, #239	; 0xef
 8002156:	f7ff fbe1 	bl	800191c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800215a:	2011      	movs	r0, #17
 800215c:	f7ff fbce 	bl	80018fc <LCD_WR_REG>
	HAL_Delay(120);
 8002160:	2078      	movs	r0, #120	; 0x78
 8002162:	f001 ff11 	bl	8003f88 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002166:	2029      	movs	r0, #41	; 0x29
 8002168:	f7ff fbc8 	bl	80018fc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800216c:	2201      	movs	r2, #1
 800216e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002172:	4804      	ldr	r0, [pc, #16]	; (8002184 <lcd_init+0x2bc>)
 8002174:	f003 fa06 	bl	8005584 <HAL_GPIO_WritePin>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40020800 	.word	0x40020800
 8002180:	200003b0 	.word	0x200003b0
 8002184:	40020000 	.word	0x40020000

08002188 <lcd_ShowStr>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b08b      	sub	sp, #44	; 0x2c
 800218c:	af04      	add	r7, sp, #16
 800218e:	60ba      	str	r2, [r7, #8]
 8002190:	461a      	mov	r2, r3
 8002192:	4603      	mov	r3, r0
 8002194:	81fb      	strh	r3, [r7, #14]
 8002196:	460b      	mov	r3, r1
 8002198:	81bb      	strh	r3, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 80021a2:	2300      	movs	r3, #0
 80021a4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 80021a6:	e048      	b.n	800223a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d145      	bne.n	800223a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80021ae:	89fa      	ldrh	r2, [r7, #14]
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <lcd_ShowStr+0xc4>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	1acb      	subs	r3, r1, r3
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dc3f      	bgt.n	8002244 <lcd_ShowStr+0xbc>
 80021c4:	89ba      	ldrh	r2, [r7, #12]
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <lcd_ShowStr+0xc4>)
 80021c8:	885b      	ldrh	r3, [r3, #2]
 80021ca:	4619      	mov	r1, r3
 80021cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021d0:	1acb      	subs	r3, r1, r3
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dc36      	bgt.n	8002244 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d902      	bls.n	80021e4 <lcd_ShowStr+0x5c>
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
 80021e2:	e02a      	b.n	800223a <lcd_ShowStr+0xb2>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b0d      	cmp	r3, #13
 80021ea:	d10b      	bne.n	8002204 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80021ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	89bb      	ldrh	r3, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80021f8:	8abb      	ldrh	r3, [r7, #20]
 80021fa:	81fb      	strh	r3, [r7, #14]
					str++;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3301      	adds	r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	e017      	b.n	8002234 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	88fc      	ldrh	r4, [r7, #6]
 800220a:	89b9      	ldrh	r1, [r7, #12]
 800220c:	89f8      	ldrh	r0, [r7, #14]
 800220e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002212:	9302      	str	r3, [sp, #8]
 8002214:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	4623      	mov	r3, r4
 8002220:	f7ff fc3c 	bl	8001a9c <lcd_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 8002224:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	b29a      	uxth	r2, r3
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	4413      	add	r3, r2
 8002232:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	3301      	adds	r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1b2      	bne.n	80021a8 <lcd_ShowStr+0x20>
 8002242:	e000      	b.n	8002246 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002244:	bf00      	nop
			}
		}
	}
}
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	200003b0 	.word	0x200003b0

08002250 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af04      	add	r7, sp, #16
 8002256:	60ba      	str	r2, [r7, #8]
 8002258:	461a      	mov	r2, r3
 800225a:	4603      	mov	r3, r0
 800225c:	81fb      	strh	r3, [r7, #14]
 800225e:	460b      	mov	r3, r1
 8002260:	81bb      	strh	r3, [r7, #12]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002266:	68b8      	ldr	r0, [r7, #8]
 8002268:	f7fd ffb2 	bl	80001d0 <strlen>
 800226c:	4603      	mov	r3, r0
 800226e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <lcd_StrCenter+0x60>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	8afb      	ldrh	r3, [r7, #22]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	0fda      	lsrs	r2, r3, #31
 800227e:	4413      	add	r3, r2
 8002280:	105b      	asrs	r3, r3, #1
 8002282:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002284:	89fa      	ldrh	r2, [r7, #14]
 8002286:	8abb      	ldrh	r3, [r7, #20]
 8002288:	4413      	add	r3, r2
 800228a:	b298      	uxth	r0, r3
 800228c:	88fa      	ldrh	r2, [r7, #6]
 800228e:	89b9      	ldrh	r1, [r7, #12]
 8002290:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	8c3b      	ldrh	r3, [r7, #32]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f7ff ff70 	bl	8002188 <lcd_ShowStr>
}
 80022a8:	bf00      	nop
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200003b0 	.word	0x200003b0

080022b4 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};
uint16_t spi_buffer = 0x9900;

int led7_index = 0;

void led7_init(){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80022b8:	2201      	movs	r2, #1
 80022ba:	2140      	movs	r1, #64	; 0x40
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <led7_init+0x14>)
 80022be:	f003 f961 	bl	8005584 <HAL_GPIO_WritePin>
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021800 	.word	0x40021800

080022cc <led7_Scan>:

void led7_Scan(){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	spi_buffer |= led7seg[led7_index] << 8;
 80022d0:	4b46      	ldr	r3, [pc, #280]	; (80023ec <led7_Scan+0x120>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <led7_Scan+0x124>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <led7_Scan+0x128>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <led7_Scan+0x128>)
 80022ea:	801a      	strh	r2, [r3, #0]
	spi_buffer &= ~(~led7seg[led7_index] << 8);
 80022ec:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <led7_Scan+0x120>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a3f      	ldr	r2, [pc, #252]	; (80023f0 <led7_Scan+0x124>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	b29b      	uxth	r3, r3
 8002302:	b21a      	sxth	r2, r3
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <led7_Scan+0x128>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b21b      	sxth	r3, r3
 800230a:	4013      	ands	r3, r2
 800230c:	b21b      	sxth	r3, r3
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <led7_Scan+0x128>)
 8002312:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <led7_Scan+0x120>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d847      	bhi.n	80023ac <led7_Scan+0xe0>
 800231c:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <led7_Scan+0x58>)
 800231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002322:	bf00      	nop
 8002324:	08002335 	.word	0x08002335
 8002328:	08002353 	.word	0x08002353
 800232c:	08002371 	.word	0x08002371
 8002330:	0800238f 	.word	0x0800238f
	case 0:
		spi_buffer |= 0x00b0;
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <led7_Scan+0x128>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800233c:	b29a      	uxth	r2, r3
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <led7_Scan+0x128>)
 8002340:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <led7_Scan+0x128>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800234a:	b29a      	uxth	r2, r3
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <led7_Scan+0x128>)
 800234e:	801a      	strh	r2, [r3, #0]
		break;
 8002350:	e02d      	b.n	80023ae <led7_Scan+0xe2>
	case 1:
		spi_buffer |= 0x00d0;
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <led7_Scan+0x128>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800235a:	b29a      	uxth	r2, r3
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <led7_Scan+0x128>)
 800235e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <led7_Scan+0x128>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	f023 0320 	bic.w	r3, r3, #32
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <led7_Scan+0x128>)
 800236c:	801a      	strh	r2, [r3, #0]
		break;
 800236e:	e01e      	b.n	80023ae <led7_Scan+0xe2>
	case 2:
		spi_buffer |= 0x00e0;
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <led7_Scan+0x128>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <led7_Scan+0x128>)
 800237c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <led7_Scan+0x128>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	f023 0310 	bic.w	r3, r3, #16
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <led7_Scan+0x128>)
 800238a:	801a      	strh	r2, [r3, #0]
		break;
 800238c:	e00f      	b.n	80023ae <led7_Scan+0xe2>
	case 3:
		spi_buffer |= 0x0070;
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <led7_Scan+0x128>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <led7_Scan+0x128>)
 800239a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <led7_Scan+0x128>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <led7_Scan+0x128>)
 80023a8:	801a      	strh	r2, [r3, #0]
		break;
 80023aa:	e000      	b.n	80023ae <led7_Scan+0xe2>
	default:
		break;
 80023ac:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <led7_Scan+0x120>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	425a      	negs	r2, r3
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	bf58      	it	pl
 80023c0:	4253      	negpl	r3, r2
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <led7_Scan+0x120>)
 80023c4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2140      	movs	r1, #64	; 0x40
 80023ca:	480b      	ldr	r0, [pc, #44]	; (80023f8 <led7_Scan+0x12c>)
 80023cc:	f003 f8da 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80023d0:	2301      	movs	r3, #1
 80023d2:	2202      	movs	r2, #2
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <led7_Scan+0x128>)
 80023d6:	4809      	ldr	r0, [pc, #36]	; (80023fc <led7_Scan+0x130>)
 80023d8:	f004 fbf3 	bl	8006bc2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80023dc:	2201      	movs	r2, #1
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <led7_Scan+0x12c>)
 80023e2:	f003 f8cf 	bl	8005584 <HAL_GPIO_WritePin>
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000210 	.word	0x20000210
 80023f0:	20000000 	.word	0x20000000
 80023f4:	2000000e 	.word	0x2000000e
 80023f8:	40021800 	.word	0x40021800
 80023fc:	200003f8 	.word	0x200003f8

08002400 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0e      	blt.n	8002432 <led7_SetDigit+0x32>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b09      	cmp	r3, #9
 8002418:	dc0b      	bgt.n	8002432 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <led7_SetDigit+0x40>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	b2d9      	uxtb	r1, r3
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <led7_SetDigit+0x44>)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	460a      	mov	r2, r1
 8002430:	701a      	strb	r2, [r3, #0]
	}
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000004 	.word	0x20000004
 8002444:	20000000 	.word	0x20000000

08002448 <led_On>:
void led7_SetColon(uint8_t status){
	if(status == 1) spi_buffer &= ~(1 << 3);
	else spi_buffer |= (1 << 3);
}

void led_On(uint8_t index){
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d910      	bls.n	800247a <led_On+0x32>
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d80d      	bhi.n	800247a <led_On+0x32>
		spi_buffer |= 1 << (index-6);
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	3b06      	subs	r3, #6
 8002462:	2201      	movs	r2, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	b21a      	sxth	r2, r3
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <led_On+0x40>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b21b      	sxth	r3, r3
 8002470:	4313      	orrs	r3, r2
 8002472:	b21b      	sxth	r3, r3
 8002474:	b29a      	uxth	r2, r3
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <led_On+0x40>)
 8002478:	801a      	strh	r2, [r3, #0]
	}
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	2000000e 	.word	0x2000000e

0800248c <led_Off>:

void led_Off(uint8_t index){
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d912      	bls.n	80024c2 <led_Off+0x36>
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d80f      	bhi.n	80024c2 <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	3b06      	subs	r3, #6
 80024a6:	2201      	movs	r2, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <led_Off+0x44>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	4013      	ands	r3, r2
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <led_Off+0x44>)
 80024c0:	801a      	strh	r2, [r3, #0]
	}
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	2000000e 	.word	0x2000000e

080024d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024da:	f001 fce3 	bl	8003ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024de:	f000 f853 	bl	8002588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e2:	f7ff f879 	bl	80015d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80024e6:	f001 f8c5 	bl	8003674 <MX_TIM2_Init>
  MX_SPI1_Init();
 80024ea:	f000 fedf 	bl	80032ac <MX_SPI1_Init>
  MX_FSMC_Init();
 80024ee:	f7fe ffa3 	bl	8001438 <MX_FSMC_Init>
  MX_DMA_Init();
 80024f2:	f7fe fee5 	bl	80012c0 <MX_DMA_Init>
  MX_ADC1_Init();
 80024f6:	f7fe fd23 	bl	8000f40 <MX_ADC1_Init>
  MX_TIM13_Init();
 80024fa:	f001 f907 	bl	800370c <MX_TIM13_Init>
  MX_I2C1_Init();
 80024fe:	f7ff f987 	bl	8001810 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002502:	f001 fae1 	bl	8003ac8 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8002506:	f001 fab5 	bl	8003a74 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800250a:	f001 fb07 	bl	8003b1c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800250e:	f001 fb2f 	bl	8003b70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002512:	f000 f8a3 	bl	800265c <system_init>
  lcd_Clear(BLACK);
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff fa6e 	bl	80019f8 <lcd_Clear>
  uart_Rs232SendString("Xin chao lop vdk");
 800251c:	4817      	ldr	r0, [pc, #92]	; (800257c <main+0xa8>)
 800251e:	f001 f9e3 	bl	80038e8 <uart_Rs232SendString>
  lcd_StrCenter(0, 10, "HARDWARE TESTING", GBLUE, BLACK, 16, 0);
 8002522:	2300      	movs	r3, #0
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	2310      	movs	r3, #16
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	2300      	movs	r3, #0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <main+0xac>)
 8002534:	210a      	movs	r1, #10
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff fe8a 	bl	8002250 <lcd_StrCenter>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 800253c:	bf00      	nop
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <main+0xb0>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0fb      	beq.n	800253e <main+0x6a>
	  flag_timer2 = 0;
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <main+0xb0>)
 8002548:	2200      	movs	r2, #0
 800254a:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800254c:	f7fe fe22 	bl	8001194 <button_Scan>
	  test_LedDebug();
 8002550:	f000 f8b6 	bl	80026c0 <test_LedDebug>
	  test_Sim();
 8002554:	f000 f9a4 	bl	80028a0 <test_Sim>
	  test_Button();
 8002558:	f000 f8d6 	bl	8002708 <test_Button>
	  test_ADC();
 800255c:	f000 f9ac 	bl	80028b8 <test_ADC>
	  displayTime();
 8002560:	f000 fa68 	bl	8002a34 <displayTime>
	  test_Buzzer();
 8002564:	f000 f984 	bl	8002870 <test_Buzzer>
	  test_Input();
 8002568:	f000 fc0e 	bl	8002d88 <test_Input>
	  test_Output();
 800256c:	f000 f94a 	bl	8002804 <test_Output>
	  test_Uart1();
 8002570:	f000 fbdc 	bl	8002d2c <test_Uart1>
	  test_Esp();
 8002574:	f000 fc9e 	bl	8002eb4 <test_Esp>
  {
 8002578:	e7e0      	b.n	800253c <main+0x68>
 800257a:	bf00      	nop
 800257c:	0800c5d8 	.word	0x0800c5d8
 8002580:	0800c5ec 	.word	0x0800c5ec
 8002584:	2000021c 	.word	0x2000021c

08002588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b094      	sub	sp, #80	; 0x50
 800258c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258e:	f107 0320 	add.w	r3, r7, #32
 8002592:	2230      	movs	r2, #48	; 0x30
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f007 f974 	bl	8009884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	4b28      	ldr	r3, [pc, #160]	; (8002654 <SystemClock_Config+0xcc>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	4a27      	ldr	r2, [pc, #156]	; (8002654 <SystemClock_Config+0xcc>)
 80025b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ba:	6413      	str	r3, [r2, #64]	; 0x40
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <SystemClock_Config+0xcc>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c8:	2300      	movs	r3, #0
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <SystemClock_Config+0xd0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a21      	ldr	r2, [pc, #132]	; (8002658 <SystemClock_Config+0xd0>)
 80025d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <SystemClock_Config+0xd0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ee:	2302      	movs	r3, #2
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025f8:	2304      	movs	r3, #4
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025fc:	23a8      	movs	r3, #168	; 0xa8
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002600:	2302      	movs	r3, #2
 8002602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002604:	2304      	movs	r3, #4
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002608:	f107 0320 	add.w	r3, r7, #32
 800260c:	4618      	mov	r0, r3
 800260e:	f003 fddb 	bl	80061c8 <HAL_RCC_OscConfig>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002618:	f000 fce4 	bl	8002fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800261c:	230f      	movs	r3, #15
 800261e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002620:	2302      	movs	r3, #2
 8002622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800262c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800262e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	2105      	movs	r1, #5
 800263a:	4618      	mov	r0, r3
 800263c:	f004 f83c 	bl	80066b8 <HAL_RCC_ClockConfig>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002646:	f000 fccd 	bl	8002fe4 <Error_Handler>
  }
}
 800264a:	bf00      	nop
 800264c:	3750      	adds	r7, #80	; 0x50
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000

0800265c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2120      	movs	r1, #32
 8002664:	4815      	ldr	r0, [pc, #84]	; (80026bc <system_init+0x60>)
 8002666:	f002 ff8d 	bl	8005584 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2140      	movs	r1, #64	; 0x40
 800266e:	4813      	ldr	r0, [pc, #76]	; (80026bc <system_init+0x60>)
 8002670:	f002 ff88 	bl	8005584 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2110      	movs	r1, #16
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <system_init+0x60>)
 800267a:	f002 ff83 	bl	8005584 <HAL_GPIO_WritePin>
	  timer_init();
 800267e:	f000 fdc5 	bl	800320c <timer_init>
	  led7_init();
 8002682:	f7ff fe17 	bl	80022b4 <led7_init>
	  button_init();
 8002686:	f7fe fd79 	bl	800117c <button_init>
	  lcd_init();
 800268a:	f7ff fc1d 	bl	8001ec8 <lcd_init>
	  ds3231_init();
 800268e:	f7fe fe37 	bl	8001300 <ds3231_init>
	  sensor_init();
 8002692:	f000 fcac 	bl	8002fee <sensor_init>
	  buzzer_init();
 8002696:	f7fe fde9 	bl	800126c <buzzer_init>
	  uart_init_rs232();
 800269a:	f001 f8fb 	bl	8003894 <uart_init_rs232>
	  uart_init_rs485();
 800269e:	f001 f915 	bl	80038cc <uart_init_rs485>
	  uart_init_Esp();
 80026a2:	f001 f905 	bl	80038b0 <uart_init_Esp>
	  sim_init();
 80026a6:	f000 fd79 	bl	800319c <sim_init>
	  setTimer2(50);
 80026aa:	2032      	movs	r0, #50	; 0x32
 80026ac:	f000 fdb8 	bl	8003220 <setTimer2>
	  HAL_Delay(1000);
 80026b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b4:	f001 fc68 	bl	8003f88 <HAL_Delay>
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <test_LedDebug>:

void test_LedDebug(){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <test_LedDebug+0x3c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <test_LedDebug+0x40>)
 80026cc:	fb83 1302 	smull	r1, r3, r3, r2
 80026d0:	10d9      	asrs	r1, r3, #3
 80026d2:	17d3      	asrs	r3, r2, #31
 80026d4:	1ac9      	subs	r1, r1, r3
 80026d6:	460b      	mov	r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	1ad1      	subs	r1, r2, r3
 80026e0:	b2ca      	uxtb	r2, r1
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <test_LedDebug+0x3c>)
 80026e4:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <test_LedDebug+0x3c>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80026ee:	2110      	movs	r1, #16
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <test_LedDebug+0x44>)
 80026f2:	f002 ff60 	bl	80055b6 <HAL_GPIO_TogglePin>
	}
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000214 	.word	0x20000214
 8002700:	66666667 	.word	0x66666667
 8002704:	40021000 	.word	0x40021000

08002708 <test_Button>:
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y1_Pin, 1);
	}
}

void test_Button(){
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++){
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	e024      	b.n	800275e <test_Button+0x56>
		if(button_count[i] == 1){
 8002714:	4a36      	ldr	r2, [pc, #216]	; (80027f0 <test_Button+0xe8>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d11b      	bne.n	8002758 <test_Button+0x50>
			led7_SetDigit(i/10, 2, 0);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <test_Button+0xec>)
 8002724:	fb82 1203 	smull	r1, r2, r2, r3
 8002728:	1092      	asrs	r2, r2, #2
 800272a:	17db      	asrs	r3, r3, #31
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2200      	movs	r2, #0
 8002730:	2102      	movs	r1, #2
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fe64 	bl	8002400 <led7_SetDigit>
			led7_SetDigit(i%10, 3, 0);
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <test_Button+0xec>)
 800273c:	fb83 1302 	smull	r1, r3, r3, r2
 8002740:	1099      	asrs	r1, r3, #2
 8002742:	17d3      	asrs	r3, r2, #31
 8002744:	1ac8      	subs	r0, r1, r3
 8002746:	4603      	mov	r3, r0
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4403      	add	r3, r0
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	1ad0      	subs	r0, r2, r3
 8002750:	2200      	movs	r2, #0
 8002752:	2103      	movs	r1, #3
 8002754:	f7ff fe54 	bl	8002400 <led7_SetDigit>
	for(int i = 0; i < 16; i++){
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b0f      	cmp	r3, #15
 8002762:	ddd7      	ble.n	8002714 <test_Button+0xc>
		}
	}
	if(isButtonUp()) {
 8002764:	f000 fb96 	bl	8002e94 <isButtonUp>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00f      	beq.n	800278e <test_Button+0x86>
		count_led7 = (count_led7 + 1)%100;
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <test_Button+0xf0>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	3301      	adds	r3, #1
 8002774:	4a21      	ldr	r2, [pc, #132]	; (80027fc <test_Button+0xf4>)
 8002776:	fb82 1203 	smull	r1, r2, r2, r3
 800277a:	1151      	asrs	r1, r2, #5
 800277c:	17da      	asrs	r2, r3, #31
 800277e:	1a8a      	subs	r2, r1, r2
 8002780:	2164      	movs	r1, #100	; 0x64
 8002782:	fb01 f202 	mul.w	r2, r1, r2
 8002786:	1a9a      	subs	r2, r3, r2
 8002788:	b292      	uxth	r2, r2
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <test_Button+0xf0>)
 800278c:	801a      	strh	r2, [r3, #0]
	}
	if(isButtonDown()) {
 800278e:	f000 fbd9 	bl	8002f44 <isButtonDown>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <test_Button+0xa4>
		if(count_led7 > 0) count_led7--;
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <test_Button+0xf0>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <test_Button+0xa4>
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <test_Button+0xf0>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <test_Button+0xf0>)
 80027aa:	801a      	strh	r2, [r3, #0]
	}
	led7_SetDigit(count_led7/10, 0, 0);
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <test_Button+0xf0>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	4a13      	ldr	r2, [pc, #76]	; (8002800 <test_Button+0xf8>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	08db      	lsrs	r3, r3, #3
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fe1e 	bl	8002400 <led7_SetDigit>
	led7_SetDigit(count_led7%10, 1, 0);
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <test_Button+0xf0>)
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <test_Button+0xf8>)
 80027ca:	fba3 1302 	umull	r1, r3, r3, r2
 80027ce:	08d9      	lsrs	r1, r3, #3
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fe0d 	bl	8002400 <led7_SetDigit>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200002dc 	.word	0x200002dc
 80027f4:	66666667 	.word	0x66666667
 80027f8:	20000216 	.word	0x20000216
 80027fc:	51eb851f 	.word	0x51eb851f
 8002800:	cccccccd 	.word	0xcccccccd

08002804 <test_Output>:

void test_Output(){
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
	if(isButtonEnter()){
 8002808:	f000 fbcc 	bl	8002fa4 <isButtonEnter>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <test_Output+0x34>
		led_On(6);
 8002812:	2006      	movs	r0, #6
 8002814:	f7ff fe18 	bl	8002448 <led_On>
		led_On(7);
 8002818:	2007      	movs	r0, #7
 800281a:	f7ff fe15 	bl	8002448 <led_On>
		led_On(8);
 800281e:	2008      	movs	r0, #8
 8002820:	f7ff fe12 	bl	8002448 <led_On>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2140      	movs	r1, #64	; 0x40
 8002828:	4810      	ldr	r0, [pc, #64]	; (800286c <test_Output+0x68>)
 800282a:	f002 feab 	bl	8005584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2120      	movs	r1, #32
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <test_Output+0x68>)
 8002834:	f002 fea6 	bl	8005584 <HAL_GPIO_WritePin>
	}
	if(isButtonBack()){
 8002838:	f000 fbc4 	bl	8002fc4 <isButtonBack>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <test_Output+0x64>
		led_Off(6);
 8002842:	2006      	movs	r0, #6
 8002844:	f7ff fe22 	bl	800248c <led_Off>
		led_Off(7);
 8002848:	2007      	movs	r0, #7
 800284a:	f7ff fe1f 	bl	800248c <led_Off>
		led_Off(8);
 800284e:	2008      	movs	r0, #8
 8002850:	f7ff fe1c 	bl	800248c <led_Off>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 1);
 8002854:	2201      	movs	r2, #1
 8002856:	2140      	movs	r1, #64	; 0x40
 8002858:	4804      	ldr	r0, [pc, #16]	; (800286c <test_Output+0x68>)
 800285a:	f002 fe93 	bl	8005584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 800285e:	2201      	movs	r2, #1
 8002860:	2120      	movs	r1, #32
 8002862:	4802      	ldr	r0, [pc, #8]	; (800286c <test_Output+0x68>)
 8002864:	f002 fe8e 	bl	8005584 <HAL_GPIO_WritePin>
	}
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000

08002870 <test_Buzzer>:
void test_Buzzer(){
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	if(isButtonLeft()){
 8002874:	f000 fb86 	bl	8002f84 <isButtonLeft>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <test_Buzzer+0x18>
		buzzer_SetVolume(50);
 800287e:	2032      	movs	r0, #50	; 0x32
 8002880:	f7fe fd0e 	bl	80012a0 <buzzer_SetVolume>
		buzzer_Ring();
 8002884:	f7fe fcfc 	bl	8001280 <buzzer_Ring>
	}
	if(isButtonRight()){
 8002888:	f000 fb6c 	bl	8002f64 <isButtonRight>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <test_Buzzer+0x2c>
		buzzer_SetVolume(0);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe fd04 	bl	80012a0 <buzzer_SetVolume>
		buzzer_Ring();
 8002898:	f7fe fcf2 	bl	8001280 <buzzer_Ring>
	}
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}

080028a0 <test_Sim>:
void test_Sim(){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	if(isButtonEnter()) {
 80028a4:	f000 fb7e 	bl	8002fa4 <isButtonEnter>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <test_Sim+0x12>
		sim_SendSMS();
 80028ae:	f000 fc8b 	bl	80031c8 <sim_SendSMS>
	}
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <test_ADC>:

void test_ADC(){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 80028be:	4b55      	ldr	r3, [pc, #340]	; (8002a14 <test_ADC+0x15c>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <test_ADC+0x160>)
 80028c6:	fb83 1302 	smull	r1, r3, r3, r2
 80028ca:	10d9      	asrs	r1, r3, #3
 80028cc:	17d3      	asrs	r3, r2, #31
 80028ce:	1ac9      	subs	r1, r1, r3
 80028d0:	460b      	mov	r3, r1
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	1ad1      	subs	r1, r2, r3
 80028da:	b2ca      	uxtb	r2, r1
 80028dc:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <test_ADC+0x15c>)
 80028de:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80028e0:	4b4c      	ldr	r3, [pc, #304]	; (8002a14 <test_ADC+0x15c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 8092 	bne.w	8002a0e <test_ADC+0x156>
		sensor_Read();
 80028ea:	f000 fb87 	bl	8002ffc <sensor_Read>
		lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80028ee:	2300      	movs	r3, #0
 80028f0:	9302      	str	r3, [sp, #8]
 80028f2:	2310      	movs	r3, #16
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028fe:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <test_ADC+0x164>)
 8002900:	2164      	movs	r1, #100	; 0x64
 8002902:	200a      	movs	r0, #10
 8002904:	f7ff fc40 	bl	8002188 <lcd_ShowStr>
//		lcd_ShowIntNum(130, 100, adc_receive[0], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 100,sensor_GetVoltage(), 4, RED, BLACK, 16);
 8002908:	f000 fb92 	bl	8003030 <sensor_GetVoltage>
 800290c:	eef0 7a40 	vmov.f32	s15, s0
 8002910:	2310      	movs	r3, #16
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800291c:	2204      	movs	r2, #4
 800291e:	eeb0 0a67 	vmov.f32	s0, s15
 8002922:	2164      	movs	r1, #100	; 0x64
 8002924:	2082      	movs	r0, #130	; 0x82
 8002926:	f7ff fa23 	bl	8001d70 <lcd_ShowFloatNum1>
		lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 800292a:	2300      	movs	r3, #0
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	2310      	movs	r3, #16
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2300      	movs	r3, #0
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800293a:	4a39      	ldr	r2, [pc, #228]	; (8002a20 <test_ADC+0x168>)
 800293c:	2178      	movs	r1, #120	; 0x78
 800293e:	200a      	movs	r0, #10
 8002940:	f7ff fc22 	bl	8002188 <lcd_ShowStr>
//		lcd_ShowIntNum(130, 120, adc_receive[1], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 120,sensor_GetCurrent(), 4, RED, BLACK, 16);
 8002944:	f000 fbb0 	bl	80030a8 <sensor_GetCurrent>
 8002948:	eef0 7a40 	vmov.f32	s15, s0
 800294c:	2310      	movs	r3, #16
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	2300      	movs	r3, #0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002958:	2204      	movs	r2, #4
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	2178      	movs	r1, #120	; 0x78
 8002960:	2082      	movs	r0, #130	; 0x82
 8002962:	f7ff fa05 	bl	8001d70 <lcd_ShowFloatNum1>
		lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
 8002966:	2300      	movs	r3, #0
 8002968:	9302      	str	r3, [sp, #8]
 800296a:	2310      	movs	r3, #16
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	2300      	movs	r3, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002976:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <test_ADC+0x16c>)
 8002978:	218c      	movs	r1, #140	; 0x8c
 800297a:	200a      	movs	r0, #10
 800297c:	f7ff fc04 	bl	8002188 <lcd_ShowStr>
		lcd_ShowIntNum(130, 140, adc_receive[2], 4, RED, BLACK, 16);
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <test_ADC+0x170>)
 8002982:	889a      	ldrh	r2, [r3, #4]
 8002984:	2310      	movs	r3, #16
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	2300      	movs	r3, #0
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2304      	movs	r3, #4
 8002994:	218c      	movs	r1, #140	; 0x8c
 8002996:	2082      	movs	r0, #130	; 0x82
 8002998:	f7ff f96c 	bl	8001c74 <lcd_ShowIntNum>
		lcd_ShowStr(10, 160, "Resistor:", RED, BLACK, 16, 0);
 800299c:	2300      	movs	r3, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	2310      	movs	r3, #16
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <test_ADC+0x174>)
 80029ae:	21a0      	movs	r1, #160	; 0xa0
 80029b0:	200a      	movs	r0, #10
 80029b2:	f7ff fbe9 	bl	8002188 <lcd_ShowStr>
		lcd_ShowIntNum(130, 160, adc_receive[3], 4, RED, BLACK, 16);
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <test_ADC+0x170>)
 80029b8:	88da      	ldrh	r2, [r3, #6]
 80029ba:	2310      	movs	r3, #16
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	2300      	movs	r3, #0
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2304      	movs	r3, #4
 80029ca:	21a0      	movs	r1, #160	; 0xa0
 80029cc:	2082      	movs	r0, #130	; 0x82
 80029ce:	f7ff f951 	bl	8001c74 <lcd_ShowIntNum>
		lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 80029d2:	2300      	movs	r3, #0
 80029d4:	9302      	str	r3, [sp, #8]
 80029d6:	2310      	movs	r3, #16
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2300      	movs	r3, #0
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <test_ADC+0x178>)
 80029e4:	21b4      	movs	r1, #180	; 0xb4
 80029e6:	200a      	movs	r0, #10
 80029e8:	f7ff fbce 	bl	8002188 <lcd_ShowStr>
//		lcd_ShowIntNum(130, 180, adc_receive[4], 4, RED, BLACK, 16);
		lcd_ShowFloatNum1(130, 180,sensor_GetTemperature(), 4, RED, BLACK, 16);
 80029ec:	f000 fbb8 	bl	8003160 <sensor_GetTemperature>
 80029f0:	eef0 7a40 	vmov.f32	s15, s0
 80029f4:	2310      	movs	r3, #16
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a00:	2204      	movs	r2, #4
 8002a02:	eeb0 0a67 	vmov.f32	s0, s15
 8002a06:	21b4      	movs	r1, #180	; 0xb4
 8002a08:	2082      	movs	r0, #130	; 0x82
 8002a0a:	f7ff f9b1 	bl	8001d70 <lcd_ShowFloatNum1>
	}
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000218 	.word	0x20000218
 8002a18:	66666667 	.word	0x66666667
 8002a1c:	0800c600 	.word	0x0800c600
 8002a20:	0800c60c 	.word	0x0800c60c
 8002a24:	0800c618 	.word	0x0800c618
 8002a28:	200003ec 	.word	0x200003ec
 8002a2c:	0800c620 	.word	0x0800c620
 8002a30:	0800c62c 	.word	0x0800c62c

08002a34 <displayTime>:

void displayTime(){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af04      	add	r7, sp, #16
	ds3231_ReadTime();
 8002a3a:	f7fe fc99 	bl	8001370 <ds3231_ReadTime>
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8002a3e:	4bad      	ldr	r3, [pc, #692]	; (8002cf4 <displayTime+0x2c0>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	2318      	movs	r3, #24
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2302      	movs	r3, #2
 8002a54:	2164      	movs	r1, #100	; 0x64
 8002a56:	2046      	movs	r0, #70	; 0x46
 8002a58:	f7ff f90c 	bl	8001c74 <lcd_ShowIntNum>
	if(ds3231_hours < 10) lcd_ShowIntNum(70, 100, 0, 1, GREEN, BLACK, 24);
 8002a5c:	4ba5      	ldr	r3, [pc, #660]	; (8002cf4 <displayTime+0x2c0>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b09      	cmp	r3, #9
 8002a62:	d80c      	bhi.n	8002a7e <displayTime+0x4a>
 8002a64:	2318      	movs	r3, #24
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	2200      	movs	r2, #0
 8002a76:	2164      	movs	r1, #100	; 0x64
 8002a78:	2046      	movs	r0, #70	; 0x46
 8002a7a:	f7ff f8fb 	bl	8001c74 <lcd_ShowIntNum>
	lcd_ShowChar(95, 100, ':', WHITE, BLACK, 24, 0);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	2318      	movs	r3, #24
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	2300      	movs	r3, #0
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8e:	223a      	movs	r2, #58	; 0x3a
 8002a90:	2164      	movs	r1, #100	; 0x64
 8002a92:	205f      	movs	r0, #95	; 0x5f
 8002a94:	f7ff f802 	bl	8001a9c <lcd_ShowChar>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002a98:	4b97      	ldr	r3, [pc, #604]	; (8002cf8 <displayTime+0x2c4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	2318      	movs	r3, #24
 8002aa0:	9302      	str	r3, [sp, #8]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2302      	movs	r3, #2
 8002aae:	2164      	movs	r1, #100	; 0x64
 8002ab0:	206e      	movs	r0, #110	; 0x6e
 8002ab2:	f7ff f8df 	bl	8001c74 <lcd_ShowIntNum>
	if(ds3231_min < 10) lcd_ShowIntNum(110, 100, 0, 1, GREEN, BLACK, 24);
 8002ab6:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <displayTime+0x2c4>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	d80c      	bhi.n	8002ad8 <displayTime+0xa4>
 8002abe:	2318      	movs	r3, #24
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2301      	movs	r3, #1
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2164      	movs	r1, #100	; 0x64
 8002ad2:	206e      	movs	r0, #110	; 0x6e
 8002ad4:	f7ff f8ce 	bl	8001c74 <lcd_ShowIntNum>
	lcd_ShowChar(135, 100, ':', WHITE, BLACK, 24, 0);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	2318      	movs	r3, #24
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae8:	223a      	movs	r2, #58	; 0x3a
 8002aea:	2164      	movs	r1, #100	; 0x64
 8002aec:	2087      	movs	r0, #135	; 0x87
 8002aee:	f7fe ffd5 	bl	8001a9c <lcd_ShowChar>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002af2:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <displayTime+0x2c8>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	2318      	movs	r3, #24
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2302      	movs	r3, #2
 8002b08:	2164      	movs	r1, #100	; 0x64
 8002b0a:	2096      	movs	r0, #150	; 0x96
 8002b0c:	f7ff f8b2 	bl	8001c74 <lcd_ShowIntNum>
	if(ds3231_sec < 10) lcd_ShowIntNum(150, 100, 0, 1, GREEN, BLACK, 24);
 8002b10:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <displayTime+0x2c8>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d80c      	bhi.n	8002b32 <displayTime+0xfe>
 8002b18:	2318      	movs	r3, #24
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2301      	movs	r3, #1
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2164      	movs	r1, #100	; 0x64
 8002b2c:	2096      	movs	r0, #150	; 0x96
 8002b2e:	f7ff f8a1 	bl	8001c74 <lcd_ShowIntNum>
	switch(ds3231_day){
 8002b32:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <displayTime+0x2cc>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	2b06      	cmp	r3, #6
 8002b3a:	d86c      	bhi.n	8002c16 <displayTime+0x1e2>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <displayTime+0x110>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b61 	.word	0x08002b61
 8002b48:	08002b7b 	.word	0x08002b7b
 8002b4c:	08002b95 	.word	0x08002b95
 8002b50:	08002baf 	.word	0x08002baf
 8002b54:	08002bc9 	.word	0x08002bc9
 8002b58:	08002be3 	.word	0x08002be3
 8002b5c:	08002bfd 	.word	0x08002bfd
	case 1:
		lcd_ShowStr(20, 130, "MON", YELLOW, BLACK, 24, 1);
 8002b60:	2301      	movs	r3, #1
 8002b62:	9302      	str	r3, [sp, #8]
 8002b64:	2318      	movs	r3, #24
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b70:	4a64      	ldr	r2, [pc, #400]	; (8002d04 <displayTime+0x2d0>)
 8002b72:	2182      	movs	r1, #130	; 0x82
 8002b74:	2014      	movs	r0, #20
 8002b76:	f7ff fb07 	bl	8002188 <lcd_ShowStr>
	case 2:
		lcd_ShowStr(20, 130, "TUE", YELLOW, BLACK, 24, 1);
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	9302      	str	r3, [sp, #8]
 8002b7e:	2318      	movs	r3, #24
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b8a:	4a5f      	ldr	r2, [pc, #380]	; (8002d08 <displayTime+0x2d4>)
 8002b8c:	2182      	movs	r1, #130	; 0x82
 8002b8e:	2014      	movs	r0, #20
 8002b90:	f7ff fafa 	bl	8002188 <lcd_ShowStr>
	case 3:
		lcd_ShowStr(20, 130, "WED", YELLOW, BLACK, 24, 1);
 8002b94:	2301      	movs	r3, #1
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	2318      	movs	r3, #24
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ba4:	4a59      	ldr	r2, [pc, #356]	; (8002d0c <displayTime+0x2d8>)
 8002ba6:	2182      	movs	r1, #130	; 0x82
 8002ba8:	2014      	movs	r0, #20
 8002baa:	f7ff faed 	bl	8002188 <lcd_ShowStr>
	case 4:
		lcd_ShowStr(20, 130, "THU", YELLOW, BLACK, 24, 1);
 8002bae:	2301      	movs	r3, #1
 8002bb0:	9302      	str	r3, [sp, #8]
 8002bb2:	2318      	movs	r3, #24
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bbe:	4a54      	ldr	r2, [pc, #336]	; (8002d10 <displayTime+0x2dc>)
 8002bc0:	2182      	movs	r1, #130	; 0x82
 8002bc2:	2014      	movs	r0, #20
 8002bc4:	f7ff fae0 	bl	8002188 <lcd_ShowStr>
	case 5:
		lcd_ShowStr(20, 130, "FRI", YELLOW, BLACK, 24, 1);
 8002bc8:	2301      	movs	r3, #1
 8002bca:	9302      	str	r3, [sp, #8]
 8002bcc:	2318      	movs	r3, #24
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <displayTime+0x2e0>)
 8002bda:	2182      	movs	r1, #130	; 0x82
 8002bdc:	2014      	movs	r0, #20
 8002bde:	f7ff fad3 	bl	8002188 <lcd_ShowStr>
	case 6:
		lcd_ShowStr(20, 130, "SAT", YELLOW, BLACK, 24, 1);
 8002be2:	2301      	movs	r3, #1
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	2318      	movs	r3, #24
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bf2:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <displayTime+0x2e4>)
 8002bf4:	2182      	movs	r1, #130	; 0x82
 8002bf6:	2014      	movs	r0, #20
 8002bf8:	f7ff fac6 	bl	8002188 <lcd_ShowStr>
	case 7:
		lcd_ShowStr(20, 130, "SUN", YELLOW, BLACK, 24, 1);
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	2318      	movs	r3, #24
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c0c:	4a43      	ldr	r2, [pc, #268]	; (8002d1c <displayTime+0x2e8>)
 8002c0e:	2182      	movs	r1, #130	; 0x82
 8002c10:	2014      	movs	r0, #20
 8002c12:	f7ff fab9 	bl	8002188 <lcd_ShowStr>
	}
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002c16:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <displayTime+0x2ec>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	2318      	movs	r3, #24
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2300      	movs	r3, #0
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	2182      	movs	r1, #130	; 0x82
 8002c2e:	2046      	movs	r0, #70	; 0x46
 8002c30:	f7ff f820 	bl	8001c74 <lcd_ShowIntNum>
	if(ds3231_date < 10) lcd_ShowIntNum(70, 130, 0, 1, YELLOW, BLACK, 24);
 8002c34:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <displayTime+0x2ec>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	d80c      	bhi.n	8002c56 <displayTime+0x222>
 8002c3c:	2318      	movs	r3, #24
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2182      	movs	r1, #130	; 0x82
 8002c50:	2046      	movs	r0, #70	; 0x46
 8002c52:	f7ff f80f 	bl	8001c74 <lcd_ShowIntNum>
	lcd_ShowChar(95, 130, '/', WHITE, BLACK, 24, 0);
 8002c56:	2300      	movs	r3, #0
 8002c58:	9302      	str	r3, [sp, #8]
 8002c5a:	2318      	movs	r3, #24
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c66:	222f      	movs	r2, #47	; 0x2f
 8002c68:	2182      	movs	r1, #130	; 0x82
 8002c6a:	205f      	movs	r0, #95	; 0x5f
 8002c6c:	f7fe ff16 	bl	8001a9c <lcd_ShowChar>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002c70:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <displayTime+0x2f0>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	2318      	movs	r3, #24
 8002c78:	9302      	str	r3, [sp, #8]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2302      	movs	r3, #2
 8002c86:	2182      	movs	r1, #130	; 0x82
 8002c88:	206e      	movs	r0, #110	; 0x6e
 8002c8a:	f7fe fff3 	bl	8001c74 <lcd_ShowIntNum>
	if(ds3231_month < 10) lcd_ShowIntNum(110, 130, 0, 1, YELLOW, BLACK, 24);
 8002c8e:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <displayTime+0x2f0>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b09      	cmp	r3, #9
 8002c94:	d80c      	bhi.n	8002cb0 <displayTime+0x27c>
 8002c96:	2318      	movs	r3, #24
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2182      	movs	r1, #130	; 0x82
 8002caa:	206e      	movs	r0, #110	; 0x6e
 8002cac:	f7fe ffe2 	bl	8001c74 <lcd_ShowIntNum>
	lcd_ShowChar(135, 130, '/', WHITE, BLACK, 24, 0);
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9302      	str	r3, [sp, #8]
 8002cb4:	2318      	movs	r3, #24
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc0:	222f      	movs	r2, #47	; 0x2f
 8002cc2:	2182      	movs	r1, #130	; 0x82
 8002cc4:	2087      	movs	r0, #135	; 0x87
 8002cc6:	f7fe fee9 	bl	8001a9c <lcd_ShowChar>
	lcd_ShowIntNum(150, 130, 2000+ds3231_year, 4, YELLOW, BLACK, 24);
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <displayTime+0x2f4>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	2318      	movs	r3, #24
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	2182      	movs	r1, #130	; 0x82
 8002ce8:	2096      	movs	r0, #150	; 0x96
 8002cea:	f7fe ffc3 	bl	8001c74 <lcd_ShowIntNum>
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000301 	.word	0x20000301
 8002cf8:	200002fe 	.word	0x200002fe
 8002cfc:	200002fc 	.word	0x200002fc
 8002d00:	20000300 	.word	0x20000300
 8002d04:	0800c63c 	.word	0x0800c63c
 8002d08:	0800c640 	.word	0x0800c640
 8002d0c:	0800c644 	.word	0x0800c644
 8002d10:	0800c648 	.word	0x0800c648
 8002d14:	0800c64c 	.word	0x0800c64c
 8002d18:	0800c650 	.word	0x0800c650
 8002d1c:	0800c654 	.word	0x0800c654
 8002d20:	200002ff 	.word	0x200002ff
 8002d24:	20000302 	.word	0x20000302
 8002d28:	200002fd 	.word	0x200002fd

08002d2c <test_Uart1>:

void test_Uart1(){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	count_uart = (count_uart + 1)%20;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <test_Uart1+0x4c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <test_Uart1+0x50>)
 8002d38:	fb83 1302 	smull	r1, r3, r3, r2
 8002d3c:	10d9      	asrs	r1, r3, #3
 8002d3e:	17d3      	asrs	r3, r2, #31
 8002d40:	1ac9      	subs	r1, r1, r3
 8002d42:	460b      	mov	r3, r1
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	1ad1      	subs	r1, r2, r3
 8002d4c:	b2ca      	uxtb	r2, r1
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <test_Uart1+0x4c>)
 8002d50:	701a      	strb	r2, [r3, #0]
		if(count_uart == 0){
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <test_Uart1+0x4c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10b      	bne.n	8002d72 <test_Uart1+0x46>
			uart_Rs232SendString("Resistor: ");
 8002d5a:	4809      	ldr	r0, [pc, #36]	; (8002d80 <test_Uart1+0x54>)
 8002d5c:	f000 fdc4 	bl	80038e8 <uart_Rs232SendString>
			uart_Rs232SendNum(sensor_GetVarResistor());
 8002d60:	f000 f95a 	bl	8003018 <sensor_GetVarResistor>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fdd8 	bl	800391c <uart_Rs232SendNum>
			uart_Rs232SendString("\r\n");
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <test_Uart1+0x58>)
 8002d6e:	f000 fdbb 	bl	80038e8 <uart_Rs232SendString>
		}
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000219 	.word	0x20000219
 8002d7c:	66666667 	.word	0x66666667
 8002d80:	0800c658 	.word	0x0800c658
 8002d84:	0800c664 	.word	0x0800c664

08002d88 <test_Input>:
//void test_Uart2(){
////	uart_Rs232ReceiveString();
//	lcd_ShowStr(10, 120, uart_Rs232ReceiveString(), RED, BLACK, 16, 0);
//}

void test_Input(){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af04      	add	r7, sp, #16
	lcd_ShowStr(10, 210, "INPUT_X0:", BLUE, BLACK, 16, 0);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9302      	str	r3, [sp, #8]
 8002d92:	2310      	movs	r3, #16
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	2300      	movs	r3, #0
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	231f      	movs	r3, #31
 8002d9c:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <test_Input+0xf4>)
 8002d9e:	21d2      	movs	r1, #210	; 0xd2
 8002da0:	200a      	movs	r0, #10
 8002da2:	f7ff f9f1 	bl	8002188 <lcd_ShowStr>
	lcd_ShowIntNum(80, 210, HAL_GPIO_ReadPin(INPUT_X0_GPIO_Port, INPUT_X0_Pin), 4, BLUE, BLACK, 16);
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	4835      	ldr	r0, [pc, #212]	; (8002e80 <test_Input+0xf8>)
 8002daa:	f002 fbd3 	bl	8005554 <HAL_GPIO_ReadPin>
 8002dae:	4603      	mov	r3, r0
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	2310      	movs	r3, #16
 8002db4:	9302      	str	r3, [sp, #8]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	231f      	movs	r3, #31
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	21d2      	movs	r1, #210	; 0xd2
 8002dc2:	2050      	movs	r0, #80	; 0x50
 8002dc4:	f7fe ff56 	bl	8001c74 <lcd_ShowIntNum>
	lcd_ShowStr(130, 210, "INPUT_X1:", BLUE, BLACK, 16, 0);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	2310      	movs	r3, #16
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	231f      	movs	r3, #31
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <test_Input+0xfc>)
 8002dd8:	21d2      	movs	r1, #210	; 0xd2
 8002dda:	2082      	movs	r0, #130	; 0x82
 8002ddc:	f7ff f9d4 	bl	8002188 <lcd_ShowStr>
	lcd_ShowIntNum(200, 210, HAL_GPIO_ReadPin(INPUT_X1_GPIO_Port, INPUT_X1_Pin), 4, BLUE, BLACK, 16);
 8002de0:	2180      	movs	r1, #128	; 0x80
 8002de2:	4827      	ldr	r0, [pc, #156]	; (8002e80 <test_Input+0xf8>)
 8002de4:	f002 fbb6 	bl	8005554 <HAL_GPIO_ReadPin>
 8002de8:	4603      	mov	r3, r0
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	2310      	movs	r3, #16
 8002dee:	9302      	str	r3, [sp, #8]
 8002df0:	2300      	movs	r3, #0
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	231f      	movs	r3, #31
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2304      	movs	r3, #4
 8002dfa:	21d2      	movs	r1, #210	; 0xd2
 8002dfc:	20c8      	movs	r0, #200	; 0xc8
 8002dfe:	f7fe ff39 	bl	8001c74 <lcd_ShowIntNum>
	lcd_ShowStr(10, 230, "INPUT_X2:", BLUE, BLACK, 16, 0);
 8002e02:	2300      	movs	r3, #0
 8002e04:	9302      	str	r3, [sp, #8]
 8002e06:	2310      	movs	r3, #16
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	231f      	movs	r3, #31
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <test_Input+0x100>)
 8002e12:	21e6      	movs	r1, #230	; 0xe6
 8002e14:	200a      	movs	r0, #10
 8002e16:	f7ff f9b7 	bl	8002188 <lcd_ShowStr>
	lcd_ShowIntNum(80, 230, HAL_GPIO_ReadPin(INPUT_X2_GPIO_Port, INPUT_X2_Pin), 4, BLUE, BLACK, 16);
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	481b      	ldr	r0, [pc, #108]	; (8002e8c <test_Input+0x104>)
 8002e1e:	f002 fb99 	bl	8005554 <HAL_GPIO_ReadPin>
 8002e22:	4603      	mov	r3, r0
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	2310      	movs	r3, #16
 8002e28:	9302      	str	r3, [sp, #8]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	231f      	movs	r3, #31
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2304      	movs	r3, #4
 8002e34:	21e6      	movs	r1, #230	; 0xe6
 8002e36:	2050      	movs	r0, #80	; 0x50
 8002e38:	f7fe ff1c 	bl	8001c74 <lcd_ShowIntNum>
	lcd_ShowStr(130, 230, "INPUT_X3:", BLUE, BLACK, 16, 0);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9302      	str	r3, [sp, #8]
 8002e40:	2310      	movs	r3, #16
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	2300      	movs	r3, #0
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	231f      	movs	r3, #31
 8002e4a:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <test_Input+0x108>)
 8002e4c:	21e6      	movs	r1, #230	; 0xe6
 8002e4e:	2082      	movs	r0, #130	; 0x82
 8002e50:	f7ff f99a 	bl	8002188 <lcd_ShowStr>
	lcd_ShowIntNum(200, 230, HAL_GPIO_ReadPin(INPUT_X3_GPIO_Port, INPUT_X3_Pin), 4, BLUE, BLACK, 16);
 8002e54:	2120      	movs	r1, #32
 8002e56:	480d      	ldr	r0, [pc, #52]	; (8002e8c <test_Input+0x104>)
 8002e58:	f002 fb7c 	bl	8005554 <HAL_GPIO_ReadPin>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	2310      	movs	r3, #16
 8002e62:	9302      	str	r3, [sp, #8]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	231f      	movs	r3, #31
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	21e6      	movs	r1, #230	; 0xe6
 8002e70:	20c8      	movs	r0, #200	; 0xc8
 8002e72:	f7fe feff 	bl	8001c74 <lcd_ShowIntNum>
}
 8002e76:	bf00      	nop
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0800c668 	.word	0x0800c668
 8002e80:	40020000 	.word	0x40020000
 8002e84:	0800c674 	.word	0x0800c674
 8002e88:	0800c680 	.word	0x0800c680
 8002e8c:	40020800 	.word	0x40020800
 8002e90:	0800c68c 	.word	0x0800c68c

08002e94 <isButtonUp>:
uint8_t isButtonUp(){
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <isButtonUp+0x1c>)
 8002e9a:	88db      	ldrh	r3, [r3, #6]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <isButtonUp+0x10>
		return 1;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <isButtonUp+0x12>
	else
		return 0;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	200002dc 	.word	0x200002dc

08002eb4 <test_Esp>:

void test_Esp(){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af04      	add	r7, sp, #16
	uint8_t send = 'A';
 8002eba:	2341      	movs	r3, #65	; 0x41
 8002ebc:	71fb      	strb	r3, [r7, #7]
	if(isButtonEnter()){
 8002ebe:	f000 f871 	bl	8002fa4 <isButtonEnter>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <test_Esp+0x20>
		HAL_UART_Transmit(&huart2, &send, 1,100);
 8002ec8:	1df9      	adds	r1, r7, #7
 8002eca:	2364      	movs	r3, #100	; 0x64
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4818      	ldr	r0, [pc, #96]	; (8002f30 <test_Esp+0x7c>)
 8002ed0:	f005 fc63 	bl	800879a <HAL_UART_Transmit>
	}
	if(checked == 0)
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <test_Esp+0x80>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10d      	bne.n	8002ef8 <test_Esp+0x44>
		lcd_ShowStr(10, 260, "Check Esp: ......      ", BRED, BLACK, 16, 0);
 8002edc:	2300      	movs	r3, #0
 8002ede:	9302      	str	r3, [sp, #8]
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <test_Esp+0x84>)
 8002eee:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ef2:	200a      	movs	r0, #10
 8002ef4:	f7ff f948 	bl	8002188 <lcd_ShowStr>
	if(flag_esp){
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <test_Esp+0x88>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <test_Esp+0x74>
		flag_esp = 0;
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <test_Esp+0x88>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
		checked = 1;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <test_Esp+0x80>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
		lcd_ShowStr(10, 260, "Check Esp: Successfully", BRED, BLACK, 16, 0);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9302      	str	r3, [sp, #8]
 8002f10:	2310      	movs	r3, #16
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002f1c:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <test_Esp+0x8c>)
 8002f1e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002f22:	200a      	movs	r0, #10
 8002f24:	f7ff f930 	bl	8002188 <lcd_ShowStr>
	}
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000610 	.word	0x20000610
 8002f34:	2000021a 	.word	0x2000021a
 8002f38:	0800c698 	.word	0x0800c698
 8002f3c:	2000022b 	.word	0x2000022b
 8002f40:	0800c6b0 	.word	0x0800c6b0

08002f44 <isButtonDown>:

uint8_t isButtonDown(){
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
	if(button_count[7] == 1)
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <isButtonDown+0x1c>)
 8002f4a:	89db      	ldrh	r3, [r3, #14]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <isButtonDown+0x10>
		return 1;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <isButtonDown+0x12>
	else
		return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	200002dc 	.word	0x200002dc

08002f64 <isButtonRight>:

uint8_t isButtonRight(){
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
	if(button_count[11] == 1)
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <isButtonRight+0x1c>)
 8002f6a:	8adb      	ldrh	r3, [r3, #22]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <isButtonRight+0x10>
		return 1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <isButtonRight+0x12>
	else
		return 0;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	200002dc 	.word	0x200002dc

08002f84 <isButtonLeft>:

uint8_t isButtonLeft(){
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
	if(button_count[15] == 1)
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <isButtonLeft+0x1c>)
 8002f8a:	8bdb      	ldrh	r3, [r3, #30]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <isButtonLeft+0x10>
		return 1;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <isButtonLeft+0x12>
	else
		return 0;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	200002dc 	.word	0x200002dc

08002fa4 <isButtonEnter>:

uint8_t isButtonEnter(){
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
	if(button_count[12] == 1)
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <isButtonEnter+0x1c>)
 8002faa:	8b1b      	ldrh	r3, [r3, #24]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <isButtonEnter+0x10>
		return 1;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <isButtonEnter+0x12>
	else
		return 0;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	200002dc 	.word	0x200002dc

08002fc4 <isButtonBack>:

uint8_t isButtonBack(){
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
	if(button_count[14] == 1)
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <isButtonBack+0x1c>)
 8002fca:	8b9b      	ldrh	r3, [r3, #28]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <isButtonBack+0x10>
		return 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <isButtonBack+0x12>
	else
		return 0;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	200002dc 	.word	0x200002dc

08002fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe8:	b672      	cpsid	i
}
 8002fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fec:	e7fe      	b.n	8002fec <Error_Handler+0x8>

08002fee <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <sensor_Read>:

void sensor_Read(){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8003000:	2205      	movs	r2, #5
 8003002:	4903      	ldr	r1, [pc, #12]	; (8003010 <sensor_Read+0x14>)
 8003004:	4803      	ldr	r0, [pc, #12]	; (8003014 <sensor_Read+0x18>)
 8003006:	f001 f827 	bl	8004058 <HAL_ADC_Start_DMA>
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200003ec 	.word	0x200003ec
 8003014:	20000234 	.word	0x20000234

08003018 <sensor_GetVarResistor>:

uint16_t sensor_GetLight(){
	return adc_receive[2];
}

uint16_t sensor_GetVarResistor(){
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
	return adc_receive[3];
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <sensor_GetVarResistor+0x14>)
 800301e:	88db      	ldrh	r3, [r3, #6]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	200003ec 	.word	0x200003ec

08003030 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <sensor_GetVoltage+0x70>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003040:	ee17 0a90 	vmov	r0, s15
 8003044:	f7fd fa80 	bl	8000548 <__aeabi_f2d>
 8003048:	a311      	add	r3, pc, #68	; (adr r3, 8003090 <sensor_GetVoltage+0x60>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fad3 	bl	80005f8 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <sensor_GetVoltage+0x74>)
 8003060:	f7fd faca 	bl	80005f8 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	a30a      	add	r3, pc, #40	; (adr r3, 8003098 <sensor_GetVoltage+0x68>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	f7fd fbeb 	bl	800084c <__aeabi_ddiv>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fd93 	bl	8000ba8 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	ee07 3a90 	vmov	s15, r3
}
 8003088:	eeb0 0a67 	vmov.f32	s0, s15
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	66666666 	.word	0x66666666
 8003094:	400a6666 	.word	0x400a6666
 8003098:	cccccccd 	.word	0xcccccccd
 800309c:	40b908ac 	.word	0x40b908ac
 80030a0:	200003ec 	.word	0x200003ec
 80030a4:	40280000 	.word	0x40280000

080030a8 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <sensor_GetCurrent+0xa8>)
 80030ae:	885b      	ldrh	r3, [r3, #2]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b8:	ee17 0a90 	vmov	r0, s15
 80030bc:	f7fd fa44 	bl	8000548 <__aeabi_f2d>
 80030c0:	a31f      	add	r3, pc, #124	; (adr r3, 8003140 <sensor_GetCurrent+0x98>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	f7fd fa97 	bl	80005f8 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <sensor_GetCurrent+0xac>)
 80030d8:	f7fd fa8e 	bl	80005f8 <__aeabi_dmul>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	a318      	add	r3, pc, #96	; (adr r3, 8003148 <sensor_GetCurrent+0xa0>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f7fd fbaf 	bl	800084c <__aeabi_ddiv>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <sensor_GetCurrent+0xb0>)
 80030fc:	f7fd f8c4 	bl	8000288 <__aeabi_dsub>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <sensor_GetCurrent+0xb4>)
 800310e:	f7fd fa73 	bl	80005f8 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <sensor_GetCurrent+0xb0>)
 8003120:	f7fd fb94 	bl	800084c <__aeabi_ddiv>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f7fd fd3c 	bl	8000ba8 <__aeabi_d2f>
 8003130:	4603      	mov	r3, r0
 8003132:	ee07 3a90 	vmov	s15, r3
}
 8003136:	eeb0 0a67 	vmov.f32	s0, s15
 800313a:	bd80      	pop	{r7, pc}
 800313c:	f3af 8000 	nop.w
 8003140:	66666666 	.word	0x66666666
 8003144:	400a6666 	.word	0x400a6666
 8003148:	147ae148 	.word	0x147ae148
 800314c:	40a4b2ee 	.word	0x40a4b2ee
 8003150:	200003ec 	.word	0x200003ec
 8003154:	408f4000 	.word	0x408f4000
 8003158:	40040000 	.word	0x40040000
 800315c:	40140000 	.word	0x40140000

08003160 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <sensor_GetTemperature+0x30>)
 8003166:	891b      	ldrh	r3, [r3, #8]
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003170:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003194 <sensor_GetTemperature+0x34>
 8003174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003178:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003198 <sensor_GetTemperature+0x38>
 800317c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003180:	eef0 7a66 	vmov.f32	s15, s13
}
 8003184:	eeb0 0a67 	vmov.f32	s0, s15
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	200003ec 	.word	0x200003ec
 8003194:	43a50000 	.word	0x43a50000
 8003198:	457ff000 	.word	0x457ff000

0800319c <sim_init>:
 *      Author: phamv
 */

#include "sim.h"

void sim_init(){
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, 1);
 80031a0:	2201      	movs	r2, #1
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <sim_init+0x20>)
 80031a6:	f002 f9ed 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart4, "AT+CMGF=1\r\n", 11, 10);
 80031aa:	230a      	movs	r3, #10
 80031ac:	220b      	movs	r2, #11
 80031ae:	4904      	ldr	r1, [pc, #16]	; (80031c0 <sim_init+0x24>)
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <sim_init+0x28>)
 80031b2:	f005 faf2 	bl	800879a <HAL_UART_Transmit>
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021400 	.word	0x40021400
 80031c0:	0800c6c8 	.word	0x0800c6c8
 80031c4:	200005cc 	.word	0x200005cc

080031c8 <sim_SendSMS>:

void sim_SendSMS() {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
	uint8_t bytes = 0x1A;
 80031ce:	231a      	movs	r3, #26
 80031d0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart4, "AT+CMGS=\"0902xxxxxx\"\r\n", 22, 10);
 80031d2:	230a      	movs	r3, #10
 80031d4:	2216      	movs	r2, #22
 80031d6:	490a      	ldr	r1, [pc, #40]	; (8003200 <sim_SendSMS+0x38>)
 80031d8:	480a      	ldr	r0, [pc, #40]	; (8003204 <sim_SendSMS+0x3c>)
 80031da:	f005 fade 	bl	800879a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, "Hello from sim.", 15, 10);
 80031de:	230a      	movs	r3, #10
 80031e0:	220f      	movs	r2, #15
 80031e2:	4909      	ldr	r1, [pc, #36]	; (8003208 <sim_SendSMS+0x40>)
 80031e4:	4807      	ldr	r0, [pc, #28]	; (8003204 <sim_SendSMS+0x3c>)
 80031e6:	f005 fad8 	bl	800879a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, &bytes, 1, 10);
 80031ea:	1df9      	adds	r1, r7, #7
 80031ec:	230a      	movs	r3, #10
 80031ee:	2201      	movs	r2, #1
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <sim_SendSMS+0x3c>)
 80031f2:	f005 fad2 	bl	800879a <HAL_UART_Transmit>
//	uart_SendString(&huart4, "AT+CMGS=\"+0902711272\"\r\n");
//	uart_SendString(&huart4, "Xinchao");
//	uart_SendBytes(&huart4, &bytes, 1);

}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	0800c6d4 	.word	0x0800c6d4
 8003204:	200005cc 	.word	0x200005cc
 8003208:	0800c6ec 	.word	0x0800c6ec

0800320c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <timer_init+0x10>)
 8003212:	f004 fa89 	bl	8007728 <HAL_TIM_Base_Start_IT>
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000498 	.word	0x20000498

08003220 <setTimer2>:

void setTimer2(uint16_t duration){
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <setTimer2+0x2c>)
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <setTimer2+0x2c>)
 8003232:	881a      	ldrh	r2, [r3, #0]
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <setTimer2+0x30>)
 8003236:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <setTimer2+0x34>)
 800323a:	2200      	movs	r2, #0
 800323c:	801a      	strh	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000220 	.word	0x20000220
 8003250:	2000021e 	.word	0x2000021e
 8003254:	2000021c 	.word	0x2000021c

08003258 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d116      	bne.n	8003298 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d010      	beq.n	8003294 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800327c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003288:	2201      	movs	r2, #1
 800328a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003292:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003294:	f7ff f81a 	bl	80022cc <led7_Scan>
	}

}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000021e 	.word	0x2000021e
 80032a4:	2000021c 	.word	0x2000021c
 80032a8:	20000220 	.word	0x20000220

080032ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <MX_SPI1_Init+0x64>)
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <MX_SPI1_Init+0x68>)
 80032b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <MX_SPI1_Init+0x64>)
 80032b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_SPI1_Init+0x64>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <MX_SPI1_Init+0x64>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <MX_SPI1_Init+0x64>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <MX_SPI1_Init+0x64>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <MX_SPI1_Init+0x64>)
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <MX_SPI1_Init+0x64>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <MX_SPI1_Init+0x64>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <MX_SPI1_Init+0x64>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <MX_SPI1_Init+0x64>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <MX_SPI1_Init+0x64>)
 80032f8:	220a      	movs	r2, #10
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032fc:	4804      	ldr	r0, [pc, #16]	; (8003310 <MX_SPI1_Init+0x64>)
 80032fe:	f003 fbd7 	bl	8006ab0 <HAL_SPI_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003308:	f7ff fe6c 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200003f8 	.word	0x200003f8
 8003314:	40013000 	.word	0x40013000

08003318 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_SPI_MspInit+0x84>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d12b      	bne.n	8003392 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 8003344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003372:	2338      	movs	r3, #56	; 0x38
 8003374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003382:	2305      	movs	r3, #5
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	4805      	ldr	r0, [pc, #20]	; (80033a4 <HAL_SPI_MspInit+0x8c>)
 800338e:	f001 ff45 	bl	800521c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003392:	bf00      	nop
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40013000 	.word	0x40013000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020400 	.word	0x40020400

080033a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_MspInit+0x4c>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_MspInit+0x4c>)
 80033b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033bc:	6453      	str	r3, [r2, #68]	; 0x44
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_MspInit+0x4c>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_MspInit+0x4c>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <HAL_MspInit+0x4c>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_MspInit+0x4c>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800

080033f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033fc:	e7fe      	b.n	80033fc <NMI_Handler+0x4>

080033fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003402:	e7fe      	b.n	8003402 <HardFault_Handler+0x4>

08003404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <MemManage_Handler+0x4>

0800340a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <BusFault_Handler+0x4>

08003410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <UsageFault_Handler+0x4>

08003416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003444:	f000 fd80 	bl	8003f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}

0800344c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <TIM2_IRQHandler+0x10>)
 8003452:	f004 fafb 	bl	8007a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000498 	.word	0x20000498

08003460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <USART1_IRQHandler+0x10>)
 8003466:	f005 fa5b 	bl	8008920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000588 	.word	0x20000588

08003474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <USART2_IRQHandler+0x10>)
 800347a:	f005 fa51 	bl	8008920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000610 	.word	0x20000610

08003488 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <USART3_IRQHandler+0x10>)
 800348e:	f005 fa47 	bl	8008920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000544 	.word	0x20000544

0800349c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <UART4_IRQHandler+0x10>)
 80034a2:	f005 fa3d 	bl	8008920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200005cc 	.word	0x200005cc

080034b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <DMA2_Stream0_IRQHandler+0x10>)
 80034b6:	f001 fc47 	bl	8004d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	2000027c 	.word	0x2000027c

080034c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
	return 1;
 80034c8:	2301      	movs	r3, #1
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <_kill>:

int _kill(int pid, int sig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034de:	f006 f9a7 	bl	8009830 <__errno>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2216      	movs	r2, #22
 80034e6:	601a      	str	r2, [r3, #0]
	return -1;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_exit>:

void _exit (int status)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffe7 	bl	80034d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003506:	e7fe      	b.n	8003506 <_exit+0x12>

08003508 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e00a      	b.n	8003530 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800351a:	f3af 8000 	nop.w
 800351e:	4601      	mov	r1, r0
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	60ba      	str	r2, [r7, #8]
 8003526:	b2ca      	uxtb	r2, r1
 8003528:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	3301      	adds	r3, #1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	dbf0      	blt.n	800351a <_read+0x12>
	}

return len;
 8003538:	687b      	ldr	r3, [r7, #4]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e009      	b.n	8003568 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	60ba      	str	r2, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3301      	adds	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	dbf1      	blt.n	8003554 <_write+0x12>
	}
	return len;
 8003570:	687b      	ldr	r3, [r7, #4]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <_close>:

int _close(int file)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
	return -1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035a2:	605a      	str	r2, [r3, #4]
	return 0;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_isatty>:

int _isatty(int file)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
	return 1;
 80035ba:	2301      	movs	r3, #1
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
	return 0;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <_sbrk+0x5c>)
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <_sbrk+0x60>)
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f8:	4b13      	ldr	r3, [pc, #76]	; (8003648 <_sbrk+0x64>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <_sbrk+0x64>)
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <_sbrk+0x68>)
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <_sbrk+0x64>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	429a      	cmp	r2, r3
 8003612:	d207      	bcs.n	8003624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003614:	f006 f90c 	bl	8009830 <__errno>
 8003618:	4603      	mov	r3, r0
 800361a:	220c      	movs	r2, #12
 800361c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
 8003622:	e009      	b.n	8003638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <_sbrk+0x64>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <_sbrk+0x64>)
 8003634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20020000 	.word	0x20020000
 8003644:	00000400 	.word	0x00000400
 8003648:	20000224 	.word	0x20000224
 800364c:	20000668 	.word	0x20000668

08003650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <SystemInit+0x20>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	4a05      	ldr	r2, [pc, #20]	; (8003670 <SystemInit+0x20>)
 800365c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800367a:	f107 0308 	add.w	r3, r7, #8
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003688:	463b      	mov	r3, r7
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <MX_TIM2_Init+0x94>)
 8003692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <MX_TIM2_Init+0x94>)
 800369a:	f240 3247 	movw	r2, #839	; 0x347
 800369e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <MX_TIM2_Init+0x94>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <MX_TIM2_Init+0x94>)
 80036a8:	2263      	movs	r2, #99	; 0x63
 80036aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <MX_TIM2_Init+0x94>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <MX_TIM2_Init+0x94>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036b8:	4813      	ldr	r0, [pc, #76]	; (8003708 <MX_TIM2_Init+0x94>)
 80036ba:	f003 ffe5 	bl	8007688 <HAL_TIM_Base_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80036c4:	f7ff fc8e 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036ce:	f107 0308 	add.w	r3, r7, #8
 80036d2:	4619      	mov	r1, r3
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <MX_TIM2_Init+0x94>)
 80036d6:	f004 fb83 	bl	8007de0 <HAL_TIM_ConfigClockSource>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80036e0:	f7ff fc80 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036ec:	463b      	mov	r3, r7
 80036ee:	4619      	mov	r1, r3
 80036f0:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_TIM2_Init+0x94>)
 80036f2:	f004 ff75 	bl	80085e0 <HAL_TIMEx_MasterConfigSynchronization>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80036fc:	f7ff fc72 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000498 	.word	0x20000498

0800370c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
 8003720:	615a      	str	r2, [r3, #20]
 8003722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <MX_TIM13_Init+0x94>)
 8003726:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <MX_TIM13_Init+0x98>)
 8003728:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <MX_TIM13_Init+0x94>)
 800372c:	f240 3247 	movw	r2, #839	; 0x347
 8003730:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <MX_TIM13_Init+0x94>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <MX_TIM13_Init+0x94>)
 800373a:	2263      	movs	r2, #99	; 0x63
 800373c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <MX_TIM13_Init+0x94>)
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <MX_TIM13_Init+0x94>)
 8003746:	2200      	movs	r2, #0
 8003748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800374a:	4815      	ldr	r0, [pc, #84]	; (80037a0 <MX_TIM13_Init+0x94>)
 800374c:	f003 ff9c 	bl	8007688 <HAL_TIM_Base_Init>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003756:	f7ff fc45 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800375a:	4811      	ldr	r0, [pc, #68]	; (80037a0 <MX_TIM13_Init+0x94>)
 800375c:	f004 f854 	bl	8007808 <HAL_TIM_PWM_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003766:	f7ff fc3d 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800376a:	2360      	movs	r3, #96	; 0x60
 800376c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	2200      	movs	r2, #0
 800377e:	4619      	mov	r1, r3
 8003780:	4807      	ldr	r0, [pc, #28]	; (80037a0 <MX_TIM13_Init+0x94>)
 8003782:	f004 fa6b 	bl	8007c5c <HAL_TIM_PWM_ConfigChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800378c:	f7ff fc2a 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003790:	4803      	ldr	r0, [pc, #12]	; (80037a0 <MX_TIM13_Init+0x94>)
 8003792:	f000 f845 	bl	8003820 <HAL_TIM_MspPostInit>

}
 8003796:	bf00      	nop
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000450 	.word	0x20000450
 80037a4:	40001c00 	.word	0x40001c00

080037a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d116      	bne.n	80037e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <HAL_TIM_Base_MspInit+0x70>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a15      	ldr	r2, [pc, #84]	; (8003818 <HAL_TIM_Base_MspInit+0x70>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_TIM_Base_MspInit+0x70>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	201c      	movs	r0, #28
 80037dc:	f001 f8e5 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037e0:	201c      	movs	r0, #28
 80037e2:	f001 f8fe 	bl	80049e2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80037e6:	e012      	b.n	800380e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0b      	ldr	r2, [pc, #44]	; (800381c <HAL_TIM_Base_MspInit+0x74>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10d      	bne.n	800380e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_TIM_Base_MspInit+0x70>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4a07      	ldr	r2, [pc, #28]	; (8003818 <HAL_TIM_Base_MspInit+0x70>)
 80037fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_TIM_Base_MspInit+0x70>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	40001c00 	.word	0x40001c00

08003820 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a12      	ldr	r2, [pc, #72]	; (8003888 <HAL_TIM_MspPostInit+0x68>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d11e      	bne.n	8003880 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_TIM_MspPostInit+0x6c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4a10      	ldr	r2, [pc, #64]	; (800388c <HAL_TIM_MspPostInit+0x6c>)
 800384c:	f043 0320 	orr.w	r3, r3, #32
 8003850:	6313      	str	r3, [r2, #48]	; 0x30
 8003852:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_TIM_MspPostInit+0x6c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800385e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003862:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003870:	2309      	movs	r3, #9
 8003872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	4619      	mov	r1, r3
 800387a:	4805      	ldr	r0, [pc, #20]	; (8003890 <HAL_TIM_MspPostInit+0x70>)
 800387c:	f001 fcce 	bl	800521c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003880:	bf00      	nop
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40001c00 	.word	0x40001c00
 800388c:	40023800 	.word	0x40023800
 8003890:	40021400 	.word	0x40021400

08003894 <uart_init_rs232>:

uint8_t receive_buffer1 = 0,receive_buffer2 = 0, receive_buffer3 = 0;
uint8_t msg[100];
uint8_t flag_esp = 0;

void uart_init_rs232(){
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003898:	2201      	movs	r2, #1
 800389a:	4903      	ldr	r1, [pc, #12]	; (80038a8 <uart_init_rs232+0x14>)
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <uart_init_rs232+0x18>)
 800389e:	f005 f80e 	bl	80088be <HAL_UART_Receive_IT>
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000228 	.word	0x20000228
 80038ac:	20000588 	.word	0x20000588

080038b0 <uart_init_Esp>:

void uart_init_Esp(){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80038b4:	2201      	movs	r2, #1
 80038b6:	4903      	ldr	r1, [pc, #12]	; (80038c4 <uart_init_Esp+0x14>)
 80038b8:	4803      	ldr	r0, [pc, #12]	; (80038c8 <uart_init_Esp+0x18>)
 80038ba:	f005 f800 	bl	80088be <HAL_UART_Receive_IT>
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000229 	.word	0x20000229
 80038c8:	20000610 	.word	0x20000610

080038cc <uart_init_rs485>:

void uart_init_rs485(){
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &receive_buffer3, 1);
 80038d0:	2201      	movs	r2, #1
 80038d2:	4903      	ldr	r1, [pc, #12]	; (80038e0 <uart_init_rs485+0x14>)
 80038d4:	4803      	ldr	r0, [pc, #12]	; (80038e4 <uart_init_rs485+0x18>)
 80038d6:	f004 fff2 	bl	80088be <HAL_UART_Receive_IT>
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000022a 	.word	0x2000022a
 80038e4:	20000544 	.word	0x20000544

080038e8 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4907      	ldr	r1, [pc, #28]	; (8003910 <uart_Rs232SendString+0x28>)
 80038f4:	4807      	ldr	r0, [pc, #28]	; (8003914 <uart_Rs232SendString+0x2c>)
 80038f6:	f006 fc37 	bl	800a168 <siprintf>
 80038fa:	4603      	mov	r3, r0
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	230a      	movs	r3, #10
 8003900:	4904      	ldr	r1, [pc, #16]	; (8003914 <uart_Rs232SendString+0x2c>)
 8003902:	4805      	ldr	r0, [pc, #20]	; (8003918 <uart_Rs232SendString+0x30>)
 8003904:	f004 ff49 	bl	800879a <HAL_UART_Transmit>
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	0800c6fc 	.word	0x0800c6fc
 8003914:	200004e0 	.word	0x200004e0
 8003918:	20000588 	.word	0x20000588

0800391c <uart_Rs232SendNum>:

void uart_EspSendByte(uint8_t* bytes){
	HAL_UART_Transmit(&huart2, bytes, 1,10);
}

void uart_Rs232SendNum(uint32_t num){
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    uint8_t num_flag = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8003928:	230a      	movs	r3, #10
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	e038      	b.n	80039a0 <uart_Rs232SendNum+0x84>
    {
        if((num / mypow(10, i-1)) != 0)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3b01      	subs	r3, #1
 8003932:	4619      	mov	r1, r3
 8003934:	200a      	movs	r0, #10
 8003936:	f7fe f981 	bl	8001c3c <mypow>
 800393a:	4603      	mov	r3, r0
 800393c:	461a      	mov	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4293      	cmp	r3, r2
 8003942:	d315      	bcc.n	8003970 <uart_Rs232SendNum+0x54>
        {
            num_flag = 1;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	3b01      	subs	r3, #1
 800394c:	4619      	mov	r1, r3
 800394e:	200a      	movs	r0, #10
 8003950:	f7fe f974 	bl	8001c3c <mypow>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	fbb3 f3f2 	udiv	r3, r3, r2
 800395e:	461a      	mov	r2, r3
 8003960:	4913      	ldr	r1, [pc, #76]	; (80039b0 <uart_Rs232SendNum+0x94>)
 8003962:	4814      	ldr	r0, [pc, #80]	; (80039b4 <uart_Rs232SendNum+0x98>)
 8003964:	f006 fc00 	bl	800a168 <siprintf>
            uart_Rs232SendString(msg);
 8003968:	4812      	ldr	r0, [pc, #72]	; (80039b4 <uart_Rs232SendNum+0x98>)
 800396a:	f7ff ffbd 	bl	80038e8 <uart_Rs232SendString>
 800396e:	e005      	b.n	800397c <uart_Rs232SendNum+0x60>
        }
        else
        {
            if(num_flag != 0)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <uart_Rs232SendNum+0x60>
            	uart_Rs232SendString("0");
 8003976:	4810      	ldr	r0, [pc, #64]	; (80039b8 <uart_Rs232SendNum+0x9c>)
 8003978:	f7ff ffb6 	bl	80038e8 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	3b01      	subs	r3, #1
 8003980:	4619      	mov	r1, r3
 8003982:	200a      	movs	r0, #10
 8003984:	f7fe f95a 	bl	8001c3c <mypow>
 8003988:	4603      	mov	r3, r0
 800398a:	461a      	mov	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003992:	fb02 f201 	mul.w	r2, r2, r1
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3b01      	subs	r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	dcc3      	bgt.n	800392e <uart_Rs232SendNum+0x12>
    }
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	0800c700 	.word	0x0800c700
 80039b4:	200004e0 	.word	0x200004e0
 80039b8:	0800c704 	.word	0x0800c704

080039bc <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_UART_RxCpltCallback+0x8c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10a      	bne.n	80039e4 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80039ce:	230a      	movs	r3, #10
 80039d0:	2201      	movs	r2, #1
 80039d2:	491e      	ldr	r1, [pc, #120]	; (8003a4c <HAL_UART_RxCpltCallback+0x90>)
 80039d4:	481e      	ldr	r0, [pc, #120]	; (8003a50 <HAL_UART_RxCpltCallback+0x94>)
 80039d6:	f004 fee0 	bl	800879a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80039da:	2201      	movs	r2, #1
 80039dc:	491b      	ldr	r1, [pc, #108]	; (8003a4c <HAL_UART_RxCpltCallback+0x90>)
 80039de:	481c      	ldr	r0, [pc, #112]	; (8003a50 <HAL_UART_RxCpltCallback+0x94>)
 80039e0:	f004 ff6d 	bl	80088be <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART2){
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_UART_RxCpltCallback+0x98>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10b      	bne.n	8003a06 <HAL_UART_RxCpltCallback+0x4a>

		if(receive_buffer2 == 'B') flag_esp = 1;
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_UART_RxCpltCallback+0x9c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b42      	cmp	r3, #66	; 0x42
 80039f4:	d102      	bne.n	80039fc <HAL_UART_RxCpltCallback+0x40>
 80039f6:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_UART_RxCpltCallback+0xa0>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80039fc:	2201      	movs	r2, #1
 80039fe:	4916      	ldr	r1, [pc, #88]	; (8003a58 <HAL_UART_RxCpltCallback+0x9c>)
 8003a00:	4817      	ldr	r0, [pc, #92]	; (8003a60 <HAL_UART_RxCpltCallback+0xa4>)
 8003a02:	f004 ff5c 	bl	80088be <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_UART_RxCpltCallback+0xa8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d116      	bne.n	8003a3e <HAL_UART_RxCpltCallback+0x82>
		HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, 1);
 8003a10:	2201      	movs	r2, #1
 8003a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a16:	4814      	ldr	r0, [pc, #80]	; (8003a68 <HAL_UART_RxCpltCallback+0xac>)
 8003a18:	f001 fdb4 	bl	8005584 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart3, &receive_buffer3, 1, 10);
 8003a1c:	230a      	movs	r3, #10
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4912      	ldr	r1, [pc, #72]	; (8003a6c <HAL_UART_RxCpltCallback+0xb0>)
 8003a22:	4813      	ldr	r0, [pc, #76]	; (8003a70 <HAL_UART_RxCpltCallback+0xb4>)
 8003a24:	f004 feb9 	bl	800879a <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, 0);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a2e:	480e      	ldr	r0, [pc, #56]	; (8003a68 <HAL_UART_RxCpltCallback+0xac>)
 8003a30:	f001 fda8 	bl	8005584 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart3, &receive_buffer3, 1);
 8003a34:	2201      	movs	r2, #1
 8003a36:	490d      	ldr	r1, [pc, #52]	; (8003a6c <HAL_UART_RxCpltCallback+0xb0>)
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <HAL_UART_RxCpltCallback+0xb4>)
 8003a3a:	f004 ff40 	bl	80088be <HAL_UART_Receive_IT>
	}
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40011000 	.word	0x40011000
 8003a4c:	20000228 	.word	0x20000228
 8003a50:	20000588 	.word	0x20000588
 8003a54:	40004400 	.word	0x40004400
 8003a58:	20000229 	.word	0x20000229
 8003a5c:	2000022b 	.word	0x2000022b
 8003a60:	20000610 	.word	0x20000610
 8003a64:	40004800 	.word	0x40004800
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	2000022a 	.word	0x2000022a
 8003a70:	20000544 	.word	0x20000544

08003a74 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <MX_UART4_Init+0x50>)
 8003a7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a86:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003aaa:	4805      	ldr	r0, [pc, #20]	; (8003ac0 <MX_UART4_Init+0x4c>)
 8003aac:	f004 fe28 	bl	8008700 <HAL_UART_Init>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003ab6:	f7ff fa95 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200005cc 	.word	0x200005cc
 8003ac4:	40004c00 	.word	0x40004c00

08003ac8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <MX_USART1_UART_Init+0x50>)
 8003ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003aee:	220c      	movs	r2, #12
 8003af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003afe:	4805      	ldr	r0, [pc, #20]	; (8003b14 <MX_USART1_UART_Init+0x4c>)
 8003b00:	f004 fdfe 	bl	8008700 <HAL_UART_Init>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b0a:	f7ff fa6b 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000588 	.word	0x20000588
 8003b18:	40011000 	.word	0x40011000

08003b1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b20:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b22:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <MX_USART2_UART_Init+0x50>)
 8003b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b42:	220c      	movs	r2, #12
 8003b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b52:	4805      	ldr	r0, [pc, #20]	; (8003b68 <MX_USART2_UART_Init+0x4c>)
 8003b54:	f004 fdd4 	bl	8008700 <HAL_UART_Init>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b5e:	f7ff fa41 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000610 	.word	0x20000610
 8003b6c:	40004400 	.word	0x40004400

08003b70 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <MX_USART3_UART_Init+0x50>)
 8003b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b82:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003b96:	220c      	movs	r2, #12
 8003b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ba6:	4805      	ldr	r0, [pc, #20]	; (8003bbc <MX_USART3_UART_Init+0x4c>)
 8003ba8:	f004 fdaa 	bl	8008700 <HAL_UART_Init>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003bb2:	f7ff fa17 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000544 	.word	0x20000544
 8003bc0:	40004800 	.word	0x40004800

08003bc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b090      	sub	sp, #64	; 0x40
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_UART_MspInit+0x1f4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d134      	bne.n	8003c50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bea:	4b74      	ldr	r3, [pc, #464]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a73      	ldr	r2, [pc, #460]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b71      	ldr	r3, [pc, #452]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a6c      	ldr	r2, [pc, #432]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b6a      	ldr	r3, [pc, #424]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003c2e:	2308      	movs	r3, #8
 8003c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c36:	4619      	mov	r1, r3
 8003c38:	4861      	ldr	r0, [pc, #388]	; (8003dc0 <HAL_UART_MspInit+0x1fc>)
 8003c3a:	f001 faef 	bl	800521c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2100      	movs	r1, #0
 8003c42:	2034      	movs	r0, #52	; 0x34
 8003c44:	f000 feb1 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003c48:	2034      	movs	r0, #52	; 0x34
 8003c4a:	f000 feca 	bl	80049e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003c4e:	e0ae      	b.n	8003dae <HAL_UART_MspInit+0x1ea>
  else if(uartHandle->Instance==USART1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_UART_MspInit+0x200>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d135      	bne.n	8003cc6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	4b57      	ldr	r3, [pc, #348]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	4a56      	ldr	r2, [pc, #344]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c64:	f043 0310 	orr.w	r3, r3, #16
 8003c68:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6a:	4b54      	ldr	r3, [pc, #336]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	4a4f      	ldr	r2, [pc, #316]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6313      	str	r3, [r2, #48]	; 0x30
 8003c86:	4b4d      	ldr	r3, [pc, #308]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ca4:	2307      	movs	r3, #7
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cac:	4619      	mov	r1, r3
 8003cae:	4844      	ldr	r0, [pc, #272]	; (8003dc0 <HAL_UART_MspInit+0x1fc>)
 8003cb0:	f001 fab4 	bl	800521c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2025      	movs	r0, #37	; 0x25
 8003cba:	f000 fe76 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cbe:	2025      	movs	r0, #37	; 0x25
 8003cc0:	f000 fe8f 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 8003cc4:	e073      	b.n	8003dae <HAL_UART_MspInit+0x1ea>
  else if(uartHandle->Instance==USART2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3f      	ldr	r2, [pc, #252]	; (8003dc8 <HAL_UART_MspInit+0x204>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d134      	bne.n	8003d3a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4a38      	ldr	r2, [pc, #224]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cde:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce0:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	4b32      	ldr	r3, [pc, #200]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4a31      	ldr	r2, [pc, #196]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfc:	4b2f      	ldr	r3, [pc, #188]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d08:	230c      	movs	r3, #12
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d14:	2303      	movs	r3, #3
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d18:	2307      	movs	r3, #7
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d20:	4619      	mov	r1, r3
 8003d22:	4827      	ldr	r0, [pc, #156]	; (8003dc0 <HAL_UART_MspInit+0x1fc>)
 8003d24:	f001 fa7a 	bl	800521c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	2026      	movs	r0, #38	; 0x26
 8003d2e:	f000 fe3c 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d32:	2026      	movs	r0, #38	; 0x26
 8003d34:	f000 fe55 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 8003d38:	e039      	b.n	8003dae <HAL_UART_MspInit+0x1ea>
  else if(uartHandle->Instance==USART3)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a23      	ldr	r2, [pc, #140]	; (8003dcc <HAL_UART_MspInit+0x208>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d134      	bne.n	8003dae <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d52:	6413      	str	r3, [r2, #64]	; 0x40
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003d6a:	f043 0304 	orr.w	r3, r3, #4
 8003d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d70:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_UART_MspInit+0x1f8>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d8e:	2307      	movs	r3, #7
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d96:	4619      	mov	r1, r3
 8003d98:	480d      	ldr	r0, [pc, #52]	; (8003dd0 <HAL_UART_MspInit+0x20c>)
 8003d9a:	f001 fa3f 	bl	800521c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2100      	movs	r1, #0
 8003da2:	2027      	movs	r0, #39	; 0x27
 8003da4:	f000 fe01 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003da8:	2027      	movs	r0, #39	; 0x27
 8003daa:	f000 fe1a 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 8003dae:	bf00      	nop
 8003db0:	3740      	adds	r7, #64	; 0x40
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40004c00 	.word	0x40004c00
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40004400 	.word	0x40004400
 8003dcc:	40004800 	.word	0x40004800
 8003dd0:	40020800 	.word	0x40020800

08003dd4 <BCD2DEC>:
 *      Author: phamv
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	0092      	lsls	r2, r2, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	b2db      	uxtb	r3, r3
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <DEC2BCD+0x44>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	b258      	sxtb	r0, r3
 8003e22:	79fa      	ldrb	r2, [r7, #7]
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <DEC2BCD+0x44>)
 8003e26:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2a:	08d9      	lsrs	r1, r3, #3
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	4303      	orrs	r3, r0
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	cccccccd 	.word	0xcccccccd

08003e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e54:	480d      	ldr	r0, [pc, #52]	; (8003e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e56:	490e      	ldr	r1, [pc, #56]	; (8003e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e58:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e5c:	e002      	b.n	8003e64 <LoopCopyDataInit>

08003e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e62:	3304      	adds	r3, #4

08003e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e68:	d3f9      	bcc.n	8003e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e6a:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e6c:	4c0b      	ldr	r4, [pc, #44]	; (8003e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e70:	e001      	b.n	8003e76 <LoopFillZerobss>

08003e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e74:	3204      	adds	r2, #4

08003e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e78:	d3fb      	bcc.n	8003e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e7a:	f7ff fbe9 	bl	8003650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e7e:	f005 fcdd 	bl	800983c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e82:	f7fe fb27 	bl	80024d4 <main>
  bx  lr    
 8003e86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e90:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003e94:	0800faa4 	.word	0x0800faa4
  ldr r2, =_sbss
 8003e98:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003e9c:	20000668 	.word	0x20000668

08003ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ea0:	e7fe      	b.n	8003ea0 <ADC_IRQHandler>
	...

08003ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <HAL_Init+0x40>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <HAL_Init+0x40>)
 8003eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_Init+0x40>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_Init+0x40>)
 8003eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_Init+0x40>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <HAL_Init+0x40>)
 8003ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ecc:	2003      	movs	r0, #3
 8003ece:	f000 fd61 	bl	8004994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ed2:	200f      	movs	r0, #15
 8003ed4:	f000 f808 	bl	8003ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ed8:	f7ff fa66 	bl	80033a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023c00 	.word	0x40023c00

08003ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_InitTick+0x54>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_InitTick+0x58>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fd79 	bl	80049fe <HAL_SYSTICK_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00e      	b.n	8003f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b0f      	cmp	r3, #15
 8003f1a:	d80a      	bhi.n	8003f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	f000 fd41 	bl	80049aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f28:	4a06      	ldr	r2, [pc, #24]	; (8003f44 <HAL_InitTick+0x5c>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000010 	.word	0x20000010
 8003f40:	20000018 	.word	0x20000018
 8003f44:	20000014 	.word	0x20000014

08003f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_IncTick+0x20>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_IncTick+0x24>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4413      	add	r3, r2
 8003f58:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <HAL_IncTick+0x24>)
 8003f5a:	6013      	str	r3, [r2, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000018 	.word	0x20000018
 8003f6c:	20000654 	.word	0x20000654

08003f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return uwTick;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_GetTick+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000654 	.word	0x20000654

08003f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7ff ffee 	bl	8003f70 <HAL_GetTick>
 8003f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d005      	beq.n	8003fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <HAL_Delay+0x44>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fae:	bf00      	nop
 8003fb0:	f7ff ffde 	bl	8003f70 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d8f7      	bhi.n	8003fb0 <HAL_Delay+0x28>
  {
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000018 	.word	0x20000018

08003fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e033      	b.n	800404e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd f830 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b00      	cmp	r3, #0
 800400c:	d118      	bne.n	8004040 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004016:	f023 0302 	bic.w	r3, r3, #2
 800401a:	f043 0202 	orr.w	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa68 	bl	80044f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	f043 0201 	orr.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
 800403e:	e001      	b.n	8004044 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_ADC_Start_DMA+0x1e>
 8004072:	2302      	movs	r3, #2
 8004074:	e0e9      	b.n	800424a <HAL_ADC_Start_DMA+0x1f2>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d018      	beq.n	80040be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800409c:	4b6d      	ldr	r3, [pc, #436]	; (8004254 <HAL_ADC_Start_DMA+0x1fc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6d      	ldr	r2, [pc, #436]	; (8004258 <HAL_ADC_Start_DMA+0x200>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	0c9a      	lsrs	r2, r3, #18
 80040a8:	4613      	mov	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4413      	add	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80040b0:	e002      	b.n	80040b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f9      	bne.n	80040b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040cc:	d107      	bne.n	80040de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	f040 80a1 	bne.w	8004230 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004118:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d106      	bne.n	800413c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f023 0206 	bic.w	r2, r3, #6
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	645a      	str	r2, [r3, #68]	; 0x44
 800413a:	e002      	b.n	8004142 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800414a:	4b44      	ldr	r3, [pc, #272]	; (800425c <HAL_ADC_Start_DMA+0x204>)
 800414c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	4a43      	ldr	r2, [pc, #268]	; (8004260 <HAL_ADC_Start_DMA+0x208>)
 8004154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	4a42      	ldr	r2, [pc, #264]	; (8004264 <HAL_ADC_Start_DMA+0x20c>)
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	4a41      	ldr	r2, [pc, #260]	; (8004268 <HAL_ADC_Start_DMA+0x210>)
 8004164:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800416e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800417e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	334c      	adds	r3, #76	; 0x4c
 800419a:	4619      	mov	r1, r3
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f000 fce8 	bl	8004b74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d12a      	bne.n	8004206 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a2d      	ldr	r2, [pc, #180]	; (800426c <HAL_ADC_Start_DMA+0x214>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d015      	beq.n	80041e6 <HAL_ADC_Start_DMA+0x18e>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2c      	ldr	r2, [pc, #176]	; (8004270 <HAL_ADC_Start_DMA+0x218>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d105      	bne.n	80041d0 <HAL_ADC_Start_DMA+0x178>
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_ADC_Start_DMA+0x204>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a27      	ldr	r2, [pc, #156]	; (8004274 <HAL_ADC_Start_DMA+0x21c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d136      	bne.n	8004248 <HAL_ADC_Start_DMA+0x1f0>
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_ADC_Start_DMA+0x204>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d130      	bne.n	8004248 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d129      	bne.n	8004248 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	e020      	b.n	8004248 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a18      	ldr	r2, [pc, #96]	; (800426c <HAL_ADC_Start_DMA+0x214>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d11b      	bne.n	8004248 <HAL_ADC_Start_DMA+0x1f0>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d114      	bne.n	8004248 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	e00b      	b.n	8004248 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f043 0210 	orr.w	r2, r3, #16
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	f043 0201 	orr.w	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000010 	.word	0x20000010
 8004258:	431bde83 	.word	0x431bde83
 800425c:	40012300 	.word	0x40012300
 8004260:	080046f1 	.word	0x080046f1
 8004264:	080047ab 	.word	0x080047ab
 8004268:	080047c7 	.word	0x080047c7
 800426c:	40012000 	.word	0x40012000
 8004270:	40012100 	.word	0x40012100
 8004274:	40012200 	.word	0x40012200

08004278 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x1c>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e105      	b.n	80044dc <HAL_ADC_ConfigChannel+0x228>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d925      	bls.n	800432c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68d9      	ldr	r1, [r3, #12]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	4613      	mov	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	3b1e      	subs	r3, #30
 80042f6:	2207      	movs	r2, #7
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43da      	mvns	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	400a      	ands	r2, r1
 8004304:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68d9      	ldr	r1, [r3, #12]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	4618      	mov	r0, r3
 8004318:	4603      	mov	r3, r0
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4403      	add	r3, r0
 800431e:	3b1e      	subs	r3, #30
 8004320:	409a      	lsls	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	e022      	b.n	8004372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6919      	ldr	r1, [r3, #16]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	4613      	mov	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4413      	add	r3, r2
 8004340:	2207      	movs	r2, #7
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	400a      	ands	r2, r1
 800434e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6919      	ldr	r1, [r3, #16]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	4618      	mov	r0, r3
 8004362:	4603      	mov	r3, r0
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4403      	add	r3, r0
 8004368:	409a      	lsls	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b06      	cmp	r3, #6
 8004378:	d824      	bhi.n	80043c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	3b05      	subs	r3, #5
 800438c:	221f      	movs	r2, #31
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43da      	mvns	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	400a      	ands	r2, r1
 800439a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4618      	mov	r0, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	3b05      	subs	r3, #5
 80043b6:	fa00 f203 	lsl.w	r2, r0, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34
 80043c2:	e04c      	b.n	800445e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d824      	bhi.n	8004416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	3b23      	subs	r3, #35	; 0x23
 80043de:	221f      	movs	r2, #31
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43da      	mvns	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	400a      	ands	r2, r1
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4618      	mov	r0, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	3b23      	subs	r3, #35	; 0x23
 8004408:	fa00 f203 	lsl.w	r2, r0, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
 8004414:	e023      	b.n	800445e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	3b41      	subs	r3, #65	; 0x41
 8004428:	221f      	movs	r2, #31
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	400a      	ands	r2, r1
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	4618      	mov	r0, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	3b41      	subs	r3, #65	; 0x41
 8004452:	fa00 f203 	lsl.w	r2, r0, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_ADC_ConfigChannel+0x234>)
 8004460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <HAL_ADC_ConfigChannel+0x238>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d109      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1cc>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b12      	cmp	r3, #18
 8004472:	d105      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a19      	ldr	r2, [pc, #100]	; (80044ec <HAL_ADC_ConfigChannel+0x238>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d123      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x21e>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b10      	cmp	r3, #16
 8004490:	d003      	beq.n	800449a <HAL_ADC_ConfigChannel+0x1e6>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b11      	cmp	r3, #17
 8004498:	d11b      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d111      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044ae:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <HAL_ADC_ConfigChannel+0x23c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <HAL_ADC_ConfigChannel+0x240>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	0c9a      	lsrs	r2, r3, #18
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044c4:	e002      	b.n	80044cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f9      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40012300 	.word	0x40012300
 80044ec:	40012000 	.word	0x40012000
 80044f0:	20000010 	.word	0x20000010
 80044f4:	431bde83 	.word	0x431bde83

080044f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004500:	4b79      	ldr	r3, [pc, #484]	; (80046e8 <ADC_Init+0x1f0>)
 8004502:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800452c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	021a      	lsls	r2, r3, #8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6899      	ldr	r1, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	4a58      	ldr	r2, [pc, #352]	; (80046ec <ADC_Init+0x1f4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d022      	beq.n	80045d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800459e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	e00f      	b.n	80045f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0202 	bic.w	r2, r2, #2
 8004604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6899      	ldr	r1, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	7e1b      	ldrb	r3, [r3, #24]
 8004610:	005a      	lsls	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004632:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	3b01      	subs	r3, #1
 8004650:	035a      	lsls	r2, r3, #13
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	e007      	b.n	800466c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800466a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	3b01      	subs	r3, #1
 8004688:	051a      	lsls	r2, r3, #20
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6899      	ldr	r1, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046ae:	025a      	lsls	r2, r3, #9
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6899      	ldr	r1, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	029a      	lsls	r2, r3, #10
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40012300 	.word	0x40012300
 80046ec:	0f000001 	.word	0x0f000001

080046f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d13c      	bne.n	8004784 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d12b      	bne.n	800477c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	d127      	bne.n	800477c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004736:	2b00      	cmp	r3, #0
 8004738:	d006      	beq.n	8004748 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004744:	2b00      	cmp	r3, #0
 8004746:	d119      	bne.n	800477c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0220 	bic.w	r2, r2, #32
 8004756:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f043 0201 	orr.w	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fd7b 	bl	8004278 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004782:	e00e      	b.n	80047a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff fd85 	bl	80042a0 <HAL_ADC_ErrorCallback>
}
 8004796:	e004      	b.n	80047a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff fd67 	bl	800428c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7ff fd5a 	bl	80042a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004810:	4013      	ands	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800481c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	60d3      	str	r3, [r2, #12]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <__NVIC_GetPriorityGrouping+0x18>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f003 0307 	and.w	r3, r3, #7
}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	2b00      	cmp	r3, #0
 8004868:	db0b      	blt.n	8004882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	4907      	ldr	r1, [pc, #28]	; (8004890 <__NVIC_EnableIRQ+0x38>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2001      	movs	r0, #1
 800487a:	fa00 f202 	lsl.w	r2, r0, r2
 800487e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e100 	.word	0xe000e100

08004894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	db0a      	blt.n	80048be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	490c      	ldr	r1, [pc, #48]	; (80048e0 <__NVIC_SetPriority+0x4c>)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	0112      	lsls	r2, r2, #4
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	440b      	add	r3, r1
 80048b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048bc:	e00a      	b.n	80048d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4908      	ldr	r1, [pc, #32]	; (80048e4 <__NVIC_SetPriority+0x50>)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	3b04      	subs	r3, #4
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	440b      	add	r3, r1
 80048d2:	761a      	strb	r2, [r3, #24]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	e000e100 	.word	0xe000e100
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f1c3 0307 	rsb	r3, r3, #7
 8004902:	2b04      	cmp	r3, #4
 8004904:	bf28      	it	cs
 8004906:	2304      	movcs	r3, #4
 8004908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3304      	adds	r3, #4
 800490e:	2b06      	cmp	r3, #6
 8004910:	d902      	bls.n	8004918 <NVIC_EncodePriority+0x30>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3b03      	subs	r3, #3
 8004916:	e000      	b.n	800491a <NVIC_EncodePriority+0x32>
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43da      	mvns	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	401a      	ands	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004930:	f04f 31ff 	mov.w	r1, #4294967295
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	43d9      	mvns	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004940:	4313      	orrs	r3, r2
         );
}
 8004942:	4618      	mov	r0, r3
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004960:	d301      	bcc.n	8004966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004962:	2301      	movs	r3, #1
 8004964:	e00f      	b.n	8004986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <SysTick_Config+0x40>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800496e:	210f      	movs	r1, #15
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	f7ff ff8e 	bl	8004894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <SysTick_Config+0x40>)
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <SysTick_Config+0x40>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	e000e010 	.word	0xe000e010

08004994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ff29 	bl	80047f4 <__NVIC_SetPriorityGrouping>
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	4603      	mov	r3, r0
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049bc:	f7ff ff3e 	bl	800483c <__NVIC_GetPriorityGrouping>
 80049c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7ff ff8e 	bl	80048e8 <NVIC_EncodePriority>
 80049cc:	4602      	mov	r2, r0
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff5d 	bl	8004894 <__NVIC_SetPriority>
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4603      	mov	r3, r0
 80049ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff31 	bl	8004858 <__NVIC_EnableIRQ>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffa2 	bl	8004950 <SysTick_Config>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a24:	f7ff faa4 	bl	8003f70 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e099      	b.n	8004b68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a54:	e00f      	b.n	8004a76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a56:	f7ff fa8b 	bl	8003f70 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d908      	bls.n	8004a76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e078      	b.n	8004b68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e8      	bne.n	8004a56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <HAL_DMA_Init+0x158>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d107      	bne.n	8004ae0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0307 	bic.w	r3, r3, #7
 8004af6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d117      	bne.n	8004b3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fb01 	bl	8005124 <DMA_CheckFifoParam>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2240      	movs	r2, #64	; 0x40
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b36:	2301      	movs	r3, #1
 8004b38:	e016      	b.n	8004b68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fab8 	bl	80050b8 <DMA_CalcBaseAndBitshift>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	223f      	movs	r2, #63	; 0x3f
 8004b52:	409a      	lsls	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	f010803f 	.word	0xf010803f

08004b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_DMA_Start_IT+0x26>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e040      	b.n	8004c1c <HAL_DMA_Start_IT+0xa8>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d12f      	bne.n	8004c0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fa4a 	bl	800505c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bcc:	223f      	movs	r2, #63	; 0x3f
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0216 	orr.w	r2, r2, #22
 8004be2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e005      	b.n	8004c1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
 8004c18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c32:	f7ff f99d 	bl	8003f70 <HAL_GetTick>
 8004c36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d008      	beq.n	8004c56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2280      	movs	r2, #128	; 0x80
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e052      	b.n	8004cfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0216 	bic.w	r2, r2, #22
 8004c64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_DMA_Abort+0x62>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0208 	bic.w	r2, r2, #8
 8004c94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca6:	e013      	b.n	8004cd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ca8:	f7ff f962 	bl	8003f70 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	d90c      	bls.n	8004cd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e015      	b.n	8004cfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e4      	bne.n	8004ca8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	223f      	movs	r2, #63	; 0x3f
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d004      	beq.n	8004d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2280      	movs	r2, #128	; 0x80
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e00c      	b.n	8004d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2205      	movs	r2, #5
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d54:	4b92      	ldr	r3, [pc, #584]	; (8004fa0 <HAL_DMA_IRQHandler+0x258>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a92      	ldr	r2, [pc, #584]	; (8004fa4 <HAL_DMA_IRQHandler+0x25c>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	0a9b      	lsrs	r3, r3, #10
 8004d60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	2208      	movs	r2, #8
 8004d74:	409a      	lsls	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01a      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0204 	bic.w	r2, r2, #4
 8004d9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	2208      	movs	r2, #8
 8004da2:	409a      	lsls	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d012      	beq.n	8004dea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f043 0202 	orr.w	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	2204      	movs	r2, #4
 8004df0:	409a      	lsls	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f043 0204 	orr.w	r2, r3, #4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	2210      	movs	r2, #16
 8004e26:	409a      	lsls	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d043      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d03c      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	2210      	movs	r2, #16
 8004e44:	409a      	lsls	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d018      	beq.n	8004e8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d024      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
 8004e76:	e01f      	b.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01b      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
 8004e88:	e016      	b.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0208 	bic.w	r2, r2, #8
 8004ea6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 808e 	beq.w	8004fe6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8086 	beq.w	8004fe6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	2220      	movs	r2, #32
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d136      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0216 	bic.w	r2, r2, #22
 8004f00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_DMA_IRQHandler+0x1da>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0208 	bic.w	r2, r2, #8
 8004f30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f36:	223f      	movs	r2, #63	; 0x3f
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d07d      	beq.n	8005052 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
        }
        return;
 8004f5e:	e078      	b.n	8005052 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01c      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d108      	bne.n	8004f8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d030      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
 8004f8c:	e02b      	b.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d027      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
 8004f9e:	e022      	b.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
 8004fa0:	20000010 	.word	0x20000010
 8004fa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0210 	bic.w	r2, r2, #16
 8004fc4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d032      	beq.n	8005054 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d022      	beq.n	8005040 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	3301      	adds	r3, #1
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	429a      	cmp	r2, r3
 800501c:	d307      	bcc.n	800502e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f2      	bne.n	8005012 <HAL_DMA_IRQHandler+0x2ca>
 800502c:	e000      	b.n	8005030 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800502e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e000      	b.n	8005054 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005052:	bf00      	nop
    }
  }
}
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop

0800505c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005078:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d108      	bne.n	800509c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800509a:	e007      	b.n	80050ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	3b10      	subs	r3, #16
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <DMA_CalcBaseAndBitshift+0x64>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050d2:	4a13      	ldr	r2, [pc, #76]	; (8005120 <DMA_CalcBaseAndBitshift+0x68>)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d909      	bls.n	80050fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	659a      	str	r2, [r3, #88]	; 0x58
 80050f8:	e007      	b.n	800510a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	aaaaaaab 	.word	0xaaaaaaab
 8005120:	0800f6a8 	.word	0x0800f6a8

08005124 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d11f      	bne.n	800517e <DMA_CheckFifoParam+0x5a>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b03      	cmp	r3, #3
 8005142:	d856      	bhi.n	80051f2 <DMA_CheckFifoParam+0xce>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <DMA_CheckFifoParam+0x28>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	0800515d 	.word	0x0800515d
 8005150:	0800516f 	.word	0x0800516f
 8005154:	0800515d 	.word	0x0800515d
 8005158:	080051f3 	.word	0x080051f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d046      	beq.n	80051f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800516c:	e043      	b.n	80051f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005176:	d140      	bne.n	80051fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800517c:	e03d      	b.n	80051fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005186:	d121      	bne.n	80051cc <DMA_CheckFifoParam+0xa8>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d837      	bhi.n	80051fe <DMA_CheckFifoParam+0xda>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <DMA_CheckFifoParam+0x70>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051ab 	.word	0x080051ab
 800519c:	080051a5 	.word	0x080051a5
 80051a0:	080051bd 	.word	0x080051bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
      break;
 80051a8:	e030      	b.n	800520c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d025      	beq.n	8005202 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ba:	e022      	b.n	8005202 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051c4:	d11f      	bne.n	8005206 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051ca:	e01c      	b.n	8005206 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d903      	bls.n	80051da <DMA_CheckFifoParam+0xb6>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d003      	beq.n	80051e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051d8:	e018      	b.n	800520c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	73fb      	strb	r3, [r7, #15]
      break;
 80051de:	e015      	b.n	800520c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00e      	beq.n	800520a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      break;
 80051f0:	e00b      	b.n	800520a <DMA_CheckFifoParam+0xe6>
      break;
 80051f2:	bf00      	nop
 80051f4:	e00a      	b.n	800520c <DMA_CheckFifoParam+0xe8>
      break;
 80051f6:	bf00      	nop
 80051f8:	e008      	b.n	800520c <DMA_CheckFifoParam+0xe8>
      break;
 80051fa:	bf00      	nop
 80051fc:	e006      	b.n	800520c <DMA_CheckFifoParam+0xe8>
      break;
 80051fe:	bf00      	nop
 8005200:	e004      	b.n	800520c <DMA_CheckFifoParam+0xe8>
      break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <DMA_CheckFifoParam+0xe8>
      break;   
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <DMA_CheckFifoParam+0xe8>
      break;
 800520a:	bf00      	nop
    }
  } 
  
  return status; 
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop

0800521c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800521c:	b480      	push	{r7}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	e16b      	b.n	8005510 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005238:	2201      	movs	r2, #1
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	429a      	cmp	r2, r3
 8005252:	f040 815a 	bne.w	800550a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d005      	beq.n	800526e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800526a:	2b02      	cmp	r3, #2
 800526c:	d130      	bne.n	80052d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	2203      	movs	r2, #3
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4013      	ands	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052a4:	2201      	movs	r2, #1
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	091b      	lsrs	r3, r3, #4
 80052ba:	f003 0201 	and.w	r2, r3, #1
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d017      	beq.n	800530c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	2203      	movs	r2, #3
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4013      	ands	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4313      	orrs	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d123      	bne.n	8005360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	08da      	lsrs	r2, r3, #3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3208      	adds	r2, #8
 8005320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	220f      	movs	r2, #15
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	08da      	lsrs	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3208      	adds	r2, #8
 800535a:	69b9      	ldr	r1, [r7, #24]
 800535c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	2203      	movs	r2, #3
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 0203 	and.w	r2, r3, #3
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4313      	orrs	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80b4 	beq.w	800550a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	4b60      	ldr	r3, [pc, #384]	; (8005528 <HAL_GPIO_Init+0x30c>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	4a5f      	ldr	r2, [pc, #380]	; (8005528 <HAL_GPIO_Init+0x30c>)
 80053ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053b0:	6453      	str	r3, [r2, #68]	; 0x44
 80053b2:	4b5d      	ldr	r3, [pc, #372]	; (8005528 <HAL_GPIO_Init+0x30c>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053be:	4a5b      	ldr	r2, [pc, #364]	; (800552c <HAL_GPIO_Init+0x310>)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	3302      	adds	r3, #2
 80053c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	220f      	movs	r2, #15
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a52      	ldr	r2, [pc, #328]	; (8005530 <HAL_GPIO_Init+0x314>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d02b      	beq.n	8005442 <HAL_GPIO_Init+0x226>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a51      	ldr	r2, [pc, #324]	; (8005534 <HAL_GPIO_Init+0x318>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d025      	beq.n	800543e <HAL_GPIO_Init+0x222>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a50      	ldr	r2, [pc, #320]	; (8005538 <HAL_GPIO_Init+0x31c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01f      	beq.n	800543a <HAL_GPIO_Init+0x21e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a4f      	ldr	r2, [pc, #316]	; (800553c <HAL_GPIO_Init+0x320>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d019      	beq.n	8005436 <HAL_GPIO_Init+0x21a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a4e      	ldr	r2, [pc, #312]	; (8005540 <HAL_GPIO_Init+0x324>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_GPIO_Init+0x216>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a4d      	ldr	r2, [pc, #308]	; (8005544 <HAL_GPIO_Init+0x328>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00d      	beq.n	800542e <HAL_GPIO_Init+0x212>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a4c      	ldr	r2, [pc, #304]	; (8005548 <HAL_GPIO_Init+0x32c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <HAL_GPIO_Init+0x20e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a4b      	ldr	r2, [pc, #300]	; (800554c <HAL_GPIO_Init+0x330>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_GPIO_Init+0x20a>
 8005422:	2307      	movs	r3, #7
 8005424:	e00e      	b.n	8005444 <HAL_GPIO_Init+0x228>
 8005426:	2308      	movs	r3, #8
 8005428:	e00c      	b.n	8005444 <HAL_GPIO_Init+0x228>
 800542a:	2306      	movs	r3, #6
 800542c:	e00a      	b.n	8005444 <HAL_GPIO_Init+0x228>
 800542e:	2305      	movs	r3, #5
 8005430:	e008      	b.n	8005444 <HAL_GPIO_Init+0x228>
 8005432:	2304      	movs	r3, #4
 8005434:	e006      	b.n	8005444 <HAL_GPIO_Init+0x228>
 8005436:	2303      	movs	r3, #3
 8005438:	e004      	b.n	8005444 <HAL_GPIO_Init+0x228>
 800543a:	2302      	movs	r3, #2
 800543c:	e002      	b.n	8005444 <HAL_GPIO_Init+0x228>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_GPIO_Init+0x228>
 8005442:	2300      	movs	r3, #0
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	f002 0203 	and.w	r2, r2, #3
 800544a:	0092      	lsls	r2, r2, #2
 800544c:	4093      	lsls	r3, r2
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005454:	4935      	ldr	r1, [pc, #212]	; (800552c <HAL_GPIO_Init+0x310>)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	3302      	adds	r3, #2
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005462:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <HAL_GPIO_Init+0x334>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	43db      	mvns	r3, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4013      	ands	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005486:	4a32      	ldr	r2, [pc, #200]	; (8005550 <HAL_GPIO_Init+0x334>)
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800548c:	4b30      	ldr	r3, [pc, #192]	; (8005550 <HAL_GPIO_Init+0x334>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	43db      	mvns	r3, r3
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4013      	ands	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054b0:	4a27      	ldr	r2, [pc, #156]	; (8005550 <HAL_GPIO_Init+0x334>)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054b6:	4b26      	ldr	r3, [pc, #152]	; (8005550 <HAL_GPIO_Init+0x334>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054da:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <HAL_GPIO_Init+0x334>)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <HAL_GPIO_Init+0x334>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4013      	ands	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005504:	4a12      	ldr	r2, [pc, #72]	; (8005550 <HAL_GPIO_Init+0x334>)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	f67f ae90 	bls.w	8005238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	3724      	adds	r7, #36	; 0x24
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800
 800552c:	40013800 	.word	0x40013800
 8005530:	40020000 	.word	0x40020000
 8005534:	40020400 	.word	0x40020400
 8005538:	40020800 	.word	0x40020800
 800553c:	40020c00 	.word	0x40020c00
 8005540:	40021000 	.word	0x40021000
 8005544:	40021400 	.word	0x40021400
 8005548:	40021800 	.word	0x40021800
 800554c:	40021c00 	.word	0x40021c00
 8005550:	40013c00 	.word	0x40013c00

08005554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	887b      	ldrh	r3, [r7, #2]
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
 8005570:	e001      	b.n	8005576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	807b      	strh	r3, [r7, #2]
 8005590:	4613      	mov	r3, r2
 8005592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005594:	787b      	ldrb	r3, [r7, #1]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055a0:	e003      	b.n	80055aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055a2:	887b      	ldrh	r3, [r7, #2]
 80055a4:	041a      	lsls	r2, r3, #16
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	619a      	str	r2, [r3, #24]
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055c8:	887a      	ldrh	r2, [r7, #2]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4013      	ands	r3, r2
 80055ce:	041a      	lsls	r2, r3, #16
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	43d9      	mvns	r1, r3
 80055d4:	887b      	ldrh	r3, [r7, #2]
 80055d6:	400b      	ands	r3, r1
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	619a      	str	r2, [r3, #24]
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e12b      	b.n	8005856 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc f92a 	bl	800186c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2224      	movs	r2, #36	; 0x24
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800563e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800564e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005650:	f001 fa06 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8005654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4a81      	ldr	r2, [pc, #516]	; (8005860 <HAL_I2C_Init+0x274>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d807      	bhi.n	8005670 <HAL_I2C_Init+0x84>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a80      	ldr	r2, [pc, #512]	; (8005864 <HAL_I2C_Init+0x278>)
 8005664:	4293      	cmp	r3, r2
 8005666:	bf94      	ite	ls
 8005668:	2301      	movls	r3, #1
 800566a:	2300      	movhi	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e006      	b.n	800567e <HAL_I2C_Init+0x92>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a7d      	ldr	r2, [pc, #500]	; (8005868 <HAL_I2C_Init+0x27c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	bf94      	ite	ls
 8005678:	2301      	movls	r3, #1
 800567a:	2300      	movhi	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e0e7      	b.n	8005856 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a78      	ldr	r2, [pc, #480]	; (800586c <HAL_I2C_Init+0x280>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	0c9b      	lsrs	r3, r3, #18
 8005690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4a6a      	ldr	r2, [pc, #424]	; (8005860 <HAL_I2C_Init+0x274>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d802      	bhi.n	80056c0 <HAL_I2C_Init+0xd4>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	3301      	adds	r3, #1
 80056be:	e009      	b.n	80056d4 <HAL_I2C_Init+0xe8>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056c6:	fb02 f303 	mul.w	r3, r2, r3
 80056ca:	4a69      	ldr	r2, [pc, #420]	; (8005870 <HAL_I2C_Init+0x284>)
 80056cc:	fba2 2303 	umull	r2, r3, r2, r3
 80056d0:	099b      	lsrs	r3, r3, #6
 80056d2:	3301      	adds	r3, #1
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	430b      	orrs	r3, r1
 80056da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	495c      	ldr	r1, [pc, #368]	; (8005860 <HAL_I2C_Init+0x274>)
 80056f0:	428b      	cmp	r3, r1
 80056f2:	d819      	bhi.n	8005728 <HAL_I2C_Init+0x13c>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1e59      	subs	r1, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005702:	1c59      	adds	r1, r3, #1
 8005704:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005708:	400b      	ands	r3, r1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_I2C_Init+0x138>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1e59      	subs	r1, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	fbb1 f3f3 	udiv	r3, r1, r3
 800571c:	3301      	adds	r3, #1
 800571e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005722:	e051      	b.n	80057c8 <HAL_I2C_Init+0x1dc>
 8005724:	2304      	movs	r3, #4
 8005726:	e04f      	b.n	80057c8 <HAL_I2C_Init+0x1dc>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d111      	bne.n	8005754 <HAL_I2C_Init+0x168>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	1e58      	subs	r0, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6859      	ldr	r1, [r3, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	440b      	add	r3, r1
 800573e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005742:	3301      	adds	r3, #1
 8005744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005748:	2b00      	cmp	r3, #0
 800574a:	bf0c      	ite	eq
 800574c:	2301      	moveq	r3, #1
 800574e:	2300      	movne	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e012      	b.n	800577a <HAL_I2C_Init+0x18e>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1e58      	subs	r0, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6859      	ldr	r1, [r3, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	0099      	lsls	r1, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	fbb0 f3f3 	udiv	r3, r0, r3
 800576a:	3301      	adds	r3, #1
 800576c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf0c      	ite	eq
 8005774:	2301      	moveq	r3, #1
 8005776:	2300      	movne	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_Init+0x196>
 800577e:	2301      	movs	r3, #1
 8005780:	e022      	b.n	80057c8 <HAL_I2C_Init+0x1dc>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10e      	bne.n	80057a8 <HAL_I2C_Init+0x1bc>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1e58      	subs	r0, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	440b      	add	r3, r1
 8005798:	fbb0 f3f3 	udiv	r3, r0, r3
 800579c:	3301      	adds	r3, #1
 800579e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a6:	e00f      	b.n	80057c8 <HAL_I2C_Init+0x1dc>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1e58      	subs	r0, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6859      	ldr	r1, [r3, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	0099      	lsls	r1, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80057be:	3301      	adds	r3, #1
 80057c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	6809      	ldr	r1, [r1, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6911      	ldr	r1, [r2, #16]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68d2      	ldr	r2, [r2, #12]
 8005802:	4311      	orrs	r1, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	430b      	orrs	r3, r1
 800580a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	000186a0 	.word	0x000186a0
 8005864:	001e847f 	.word	0x001e847f
 8005868:	003d08ff 	.word	0x003d08ff
 800586c:	431bde83 	.word	0x431bde83
 8005870:	10624dd3 	.word	0x10624dd3

08005874 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	; 0x30
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	4608      	mov	r0, r1
 800587e:	4611      	mov	r1, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4603      	mov	r3, r0
 8005884:	817b      	strh	r3, [r7, #10]
 8005886:	460b      	mov	r3, r1
 8005888:	813b      	strh	r3, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800588e:	f7fe fb6f 	bl	8003f70 <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b20      	cmp	r3, #32
 800589e:	f040 8208 	bne.w	8005cb2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2319      	movs	r3, #25
 80058a8:	2201      	movs	r2, #1
 80058aa:	497b      	ldr	r1, [pc, #492]	; (8005a98 <HAL_I2C_Mem_Read+0x224>)
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 faef 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
 80058ba:	e1fb      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_I2C_Mem_Read+0x56>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e1f4      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d007      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2222      	movs	r2, #34	; 0x22
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2240      	movs	r2, #64	; 0x40
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4a5b      	ldr	r2, [pc, #364]	; (8005a9c <HAL_I2C_Mem_Read+0x228>)
 8005930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005932:	88f8      	ldrh	r0, [r7, #6]
 8005934:	893a      	ldrh	r2, [r7, #8]
 8005936:	8979      	ldrh	r1, [r7, #10]
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	4603      	mov	r3, r0
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 f9bc 	bl	8005cc0 <I2C_RequestMemoryRead>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1b0      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d113      	bne.n	8005982 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595a:	2300      	movs	r3, #0
 800595c:	623b      	str	r3, [r7, #32]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e184      	b.n	8005c8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005986:	2b01      	cmp	r3, #1
 8005988:	d11b      	bne.n	80059c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e164      	b.n	8005c8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d11b      	bne.n	8005a02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	e144      	b.n	8005c8c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a18:	e138      	b.n	8005c8c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	f200 80f1 	bhi.w	8005c06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d123      	bne.n	8005a74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fb44 	bl	80060be <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e139      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a72:	e10b      	b.n	8005c8c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d14e      	bne.n	8005b1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	2200      	movs	r2, #0
 8005a84:	4906      	ldr	r1, [pc, #24]	; (8005aa0 <HAL_I2C_Mem_Read+0x22c>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fa02 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e10e      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
 8005a96:	bf00      	nop
 8005a98:	00100002 	.word	0x00100002
 8005a9c:	ffff0000 	.word	0xffff0000
 8005aa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b18:	e0b8      	b.n	8005c8c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	2200      	movs	r2, #0
 8005b22:	4966      	ldr	r1, [pc, #408]	; (8005cbc <HAL_I2C_Mem_Read+0x448>)
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f9b3 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0bf      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	494f      	ldr	r1, [pc, #316]	; (8005cbc <HAL_I2C_Mem_Read+0x448>)
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f985 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e091      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c04:	e042      	b.n	8005c8c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fa57 	bl	80060be <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e04c      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d118      	bne.n	8005c8c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f47f aec2 	bne.w	8005a1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e000      	b.n	8005cb4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
  }
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3728      	adds	r7, #40	; 0x28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	00010004 	.word	0x00010004

08005cc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	4608      	mov	r0, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	817b      	strh	r3, [r7, #10]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	813b      	strh	r3, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8c2 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d20:	d103      	bne.n	8005d2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e0aa      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d2e:	897b      	ldrh	r3, [r7, #10]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	4952      	ldr	r1, [pc, #328]	; (8005e8c <I2C_RequestMemoryRead+0x1cc>)
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f8fa 	bl	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e097      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	6a39      	ldr	r1, [r7, #32]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f964 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d107      	bne.n	8005d92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e076      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d105      	bne.n	8005da8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	e021      	b.n	8005dec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005da8:	893b      	ldrh	r3, [r7, #8]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	6a39      	ldr	r1, [r7, #32]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f93e 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00d      	beq.n	8005de2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d107      	bne.n	8005dde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e050      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005de2:	893b      	ldrh	r3, [r7, #8]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	6a39      	ldr	r1, [r7, #32]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f923 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00d      	beq.n	8005e18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d107      	bne.n	8005e14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e035      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f82b 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00d      	beq.n	8005e5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4e:	d103      	bne.n	8005e58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e013      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e5c:	897b      	ldrh	r3, [r7, #10]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	4906      	ldr	r1, [pc, #24]	; (8005e8c <I2C_RequestMemoryRead+0x1cc>)
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f863 	bl	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	00010002 	.word	0x00010002

08005e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea0:	e025      	b.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d021      	beq.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eaa:	f7fe f861 	bl	8003f70 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d302      	bcc.n	8005ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d116      	bne.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f043 0220 	orr.w	r2, r3, #32
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e023      	b.n	8005f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d10d      	bne.n	8005f14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	43da      	mvns	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4013      	ands	r3, r2
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	e00c      	b.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d0b6      	beq.n	8005ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	607a      	str	r2, [r7, #4]
 8005f4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4c:	e051      	b.n	8005ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5c:	d123      	bne.n	8005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f043 0204 	orr.w	r2, r3, #4
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e046      	b.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d021      	beq.n	8005ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fd ffdf 	bl	8003f70 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e020      	b.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d10c      	bne.n	8006016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	43da      	mvns	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4013      	ands	r3, r2
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	bf14      	ite	ne
 800600e:	2301      	movne	r3, #1
 8006010:	2300      	moveq	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	e00b      	b.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	43da      	mvns	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4013      	ands	r3, r2
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d18d      	bne.n	8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006048:	e02d      	b.n	80060a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f88d 	bl	800616a <I2C_IsAcknowledgeFailed>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e02d      	b.n	80060b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d021      	beq.n	80060a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006062:	f7fd ff85 	bl	8003f70 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d302      	bcc.n	8006078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d116      	bne.n	80060a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e007      	b.n	80060b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d1ca      	bne.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060ca:	e042      	b.n	8006152 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	2b10      	cmp	r3, #16
 80060d8:	d119      	bne.n	800610e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f06f 0210 	mvn.w	r2, #16
 80060e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e029      	b.n	8006162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fd ff2f 	bl	8003f70 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d116      	bne.n	8006152 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f043 0220 	orr.w	r2, r3, #32
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e007      	b.n	8006162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d1b5      	bne.n	80060cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006180:	d11b      	bne.n	80061ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800618a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e264      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d075      	beq.n	80062d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061e6:	4ba3      	ldr	r3, [pc, #652]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d00c      	beq.n	800620c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061f2:	4ba0      	ldr	r3, [pc, #640]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d112      	bne.n	8006224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fe:	4b9d      	ldr	r3, [pc, #628]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800620a:	d10b      	bne.n	8006224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620c:	4b99      	ldr	r3, [pc, #612]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d05b      	beq.n	80062d0 <HAL_RCC_OscConfig+0x108>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d157      	bne.n	80062d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e23f      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622c:	d106      	bne.n	800623c <HAL_RCC_OscConfig+0x74>
 800622e:	4b91      	ldr	r3, [pc, #580]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a90      	ldr	r2, [pc, #576]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	e01d      	b.n	8006278 <HAL_RCC_OscConfig+0xb0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006244:	d10c      	bne.n	8006260 <HAL_RCC_OscConfig+0x98>
 8006246:	4b8b      	ldr	r3, [pc, #556]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a8a      	ldr	r2, [pc, #552]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800624c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a87      	ldr	r2, [pc, #540]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	e00b      	b.n	8006278 <HAL_RCC_OscConfig+0xb0>
 8006260:	4b84      	ldr	r3, [pc, #528]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a83      	ldr	r2, [pc, #524]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4b81      	ldr	r3, [pc, #516]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a80      	ldr	r2, [pc, #512]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d013      	beq.n	80062a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fd fe76 	bl	8003f70 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006288:	f7fd fe72 	bl	8003f70 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b64      	cmp	r3, #100	; 0x64
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e204      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629a:	4b76      	ldr	r3, [pc, #472]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCC_OscConfig+0xc0>
 80062a6:	e014      	b.n	80062d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a8:	f7fd fe62 	bl	8003f70 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b0:	f7fd fe5e 	bl	8003f70 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b64      	cmp	r3, #100	; 0x64
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e1f0      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c2:	4b6c      	ldr	r3, [pc, #432]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0xe8>
 80062ce:	e000      	b.n	80062d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d063      	beq.n	80063a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062de:	4b65      	ldr	r3, [pc, #404]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ea:	4b62      	ldr	r3, [pc, #392]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d11c      	bne.n	8006330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f6:	4b5f      	ldr	r3, [pc, #380]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d116      	bne.n	8006330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006302:	4b5c      	ldr	r3, [pc, #368]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_RCC_OscConfig+0x152>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d001      	beq.n	800631a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e1c4      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631a:	4b56      	ldr	r3, [pc, #344]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	4952      	ldr	r1, [pc, #328]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800632a:	4313      	orrs	r3, r2
 800632c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632e:	e03a      	b.n	80063a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d020      	beq.n	800637a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006338:	4b4f      	ldr	r3, [pc, #316]	; (8006478 <HAL_RCC_OscConfig+0x2b0>)
 800633a:	2201      	movs	r2, #1
 800633c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633e:	f7fd fe17 	bl	8003f70 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006346:	f7fd fe13 	bl	8003f70 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e1a5      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006358:	4b46      	ldr	r3, [pc, #280]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006364:	4b43      	ldr	r3, [pc, #268]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4940      	ldr	r1, [pc, #256]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]
 8006378:	e015      	b.n	80063a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800637a:	4b3f      	ldr	r3, [pc, #252]	; (8006478 <HAL_RCC_OscConfig+0x2b0>)
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fd fdf6 	bl	8003f70 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006388:	f7fd fdf2 	bl	8003f70 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e184      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639a:	4b36      	ldr	r3, [pc, #216]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d030      	beq.n	8006414 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ba:	4b30      	ldr	r3, [pc, #192]	; (800647c <HAL_RCC_OscConfig+0x2b4>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c0:	f7fd fdd6 	bl	8003f70 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c8:	f7fd fdd2 	bl	8003f70 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e164      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063da:	4b26      	ldr	r3, [pc, #152]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCC_OscConfig+0x200>
 80063e6:	e015      	b.n	8006414 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e8:	4b24      	ldr	r3, [pc, #144]	; (800647c <HAL_RCC_OscConfig+0x2b4>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ee:	f7fd fdbf 	bl	8003f70 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f6:	f7fd fdbb 	bl	8003f70 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e14d      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006408:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800640a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f0      	bne.n	80063f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80a0 	beq.w	8006562 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	4a0e      	ldr	r2, [pc, #56]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006440:	6413      	str	r3, [r2, #64]	; 0x40
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644a:	60bb      	str	r3, [r7, #8]
 800644c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644e:	2301      	movs	r3, #1
 8006450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <HAL_RCC_OscConfig+0x2b8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645a:	2b00      	cmp	r3, #0
 800645c:	d121      	bne.n	80064a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800645e:	4b08      	ldr	r3, [pc, #32]	; (8006480 <HAL_RCC_OscConfig+0x2b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a07      	ldr	r2, [pc, #28]	; (8006480 <HAL_RCC_OscConfig+0x2b8>)
 8006464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800646a:	f7fd fd81 	bl	8003f70 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006470:	e011      	b.n	8006496 <HAL_RCC_OscConfig+0x2ce>
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800
 8006478:	42470000 	.word	0x42470000
 800647c:	42470e80 	.word	0x42470e80
 8006480:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006484:	f7fd fd74 	bl	8003f70 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e106      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006496:	4b85      	ldr	r3, [pc, #532]	; (80066ac <HAL_RCC_OscConfig+0x4e4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f0      	beq.n	8006484 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d106      	bne.n	80064b8 <HAL_RCC_OscConfig+0x2f0>
 80064aa:	4b81      	ldr	r3, [pc, #516]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a80      	ldr	r2, [pc, #512]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
 80064b6:	e01c      	b.n	80064f2 <HAL_RCC_OscConfig+0x32a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b05      	cmp	r3, #5
 80064be:	d10c      	bne.n	80064da <HAL_RCC_OscConfig+0x312>
 80064c0:	4b7b      	ldr	r3, [pc, #492]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c4:	4a7a      	ldr	r2, [pc, #488]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064c6:	f043 0304 	orr.w	r3, r3, #4
 80064ca:	6713      	str	r3, [r2, #112]	; 0x70
 80064cc:	4b78      	ldr	r3, [pc, #480]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d0:	4a77      	ldr	r2, [pc, #476]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	6713      	str	r3, [r2, #112]	; 0x70
 80064d8:	e00b      	b.n	80064f2 <HAL_RCC_OscConfig+0x32a>
 80064da:	4b75      	ldr	r3, [pc, #468]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a74      	ldr	r2, [pc, #464]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	6713      	str	r3, [r2, #112]	; 0x70
 80064e6:	4b72      	ldr	r3, [pc, #456]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	4a71      	ldr	r2, [pc, #452]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064ec:	f023 0304 	bic.w	r3, r3, #4
 80064f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d015      	beq.n	8006526 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fa:	f7fd fd39 	bl	8003f70 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006500:	e00a      	b.n	8006518 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006502:	f7fd fd35 	bl	8003f70 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006510:	4293      	cmp	r3, r2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e0c5      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006518:	4b65      	ldr	r3, [pc, #404]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0ee      	beq.n	8006502 <HAL_RCC_OscConfig+0x33a>
 8006524:	e014      	b.n	8006550 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006526:	f7fd fd23 	bl	8003f70 <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800652c:	e00a      	b.n	8006544 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652e:	f7fd fd1f 	bl	8003f70 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	f241 3288 	movw	r2, #5000	; 0x1388
 800653c:	4293      	cmp	r3, r2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e0af      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006544:	4b5a      	ldr	r3, [pc, #360]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1ee      	bne.n	800652e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d105      	bne.n	8006562 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006556:	4b56      	ldr	r3, [pc, #344]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	4a55      	ldr	r2, [pc, #340]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 800655c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006560:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 809b 	beq.w	80066a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800656c:	4b50      	ldr	r3, [pc, #320]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 030c 	and.w	r3, r3, #12
 8006574:	2b08      	cmp	r3, #8
 8006576:	d05c      	beq.n	8006632 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d141      	bne.n	8006604 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006580:	4b4c      	ldr	r3, [pc, #304]	; (80066b4 <HAL_RCC_OscConfig+0x4ec>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006586:	f7fd fcf3 	bl	8003f70 <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800658e:	f7fd fcef 	bl	8003f70 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e081      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a0:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f0      	bne.n	800658e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	019b      	lsls	r3, r3, #6
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	3b01      	subs	r3, #1
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	4937      	ldr	r1, [pc, #220]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d6:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <HAL_RCC_OscConfig+0x4ec>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065dc:	f7fd fcc8 	bl	8003f70 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e4:	f7fd fcc4 	bl	8003f70 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e056      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f6:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <HAL_RCC_OscConfig+0x41c>
 8006602:	e04e      	b.n	80066a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006604:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <HAL_RCC_OscConfig+0x4ec>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660a:	f7fd fcb1 	bl	8003f70 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006612:	f7fd fcad 	bl	8003f70 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e03f      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006624:	4b22      	ldr	r3, [pc, #136]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f0      	bne.n	8006612 <HAL_RCC_OscConfig+0x44a>
 8006630:	e037      	b.n	80066a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e032      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800663e:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d028      	beq.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006656:	429a      	cmp	r2, r3
 8006658:	d121      	bne.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d11a      	bne.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800666e:	4013      	ands	r3, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006674:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006676:	4293      	cmp	r3, r2
 8006678:	d111      	bne.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	3b01      	subs	r3, #1
 8006688:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800668a:	429a      	cmp	r2, r3
 800668c:	d107      	bne.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d001      	beq.n	80066a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40007000 	.word	0x40007000
 80066b0:	40023800 	.word	0x40023800
 80066b4:	42470060 	.word	0x42470060

080066b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0cc      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066cc:	4b68      	ldr	r3, [pc, #416]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d90c      	bls.n	80066f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066da:	4b65      	ldr	r3, [pc, #404]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e2:	4b63      	ldr	r3, [pc, #396]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d001      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0b8      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d020      	beq.n	8006742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800670c:	4b59      	ldr	r3, [pc, #356]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	4a58      	ldr	r2, [pc, #352]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006724:	4b53      	ldr	r3, [pc, #332]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	4a52      	ldr	r2, [pc, #328]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800672e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006730:	4b50      	ldr	r3, [pc, #320]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	494d      	ldr	r1, [pc, #308]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	4313      	orrs	r3, r2
 8006740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d044      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d107      	bne.n	8006766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006756:	4b47      	ldr	r3, [pc, #284]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d119      	bne.n	8006796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e07f      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d003      	beq.n	8006776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006772:	2b03      	cmp	r3, #3
 8006774:	d107      	bne.n	8006786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006776:	4b3f      	ldr	r3, [pc, #252]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e06f      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006786:	4b3b      	ldr	r3, [pc, #236]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e067      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006796:	4b37      	ldr	r3, [pc, #220]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f023 0203 	bic.w	r2, r3, #3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	4934      	ldr	r1, [pc, #208]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a8:	f7fd fbe2 	bl	8003f70 <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ae:	e00a      	b.n	80067c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b0:	f7fd fbde 	bl	8003f70 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80067be:	4293      	cmp	r3, r2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e04f      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c6:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 020c 	and.w	r2, r3, #12
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d1eb      	bne.n	80067b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d20c      	bcs.n	8006800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e6:	4b22      	ldr	r3, [pc, #136]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ee:	4b20      	ldr	r3, [pc, #128]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d001      	beq.n	8006800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e032      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d008      	beq.n	800681e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800680c:	4b19      	ldr	r3, [pc, #100]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	4916      	ldr	r1, [pc, #88]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	4313      	orrs	r3, r2
 800681c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	490e      	ldr	r1, [pc, #56]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	4313      	orrs	r3, r2
 800683c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800683e:	f000 f821 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 8006842:	4602      	mov	r2, r0
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	490a      	ldr	r1, [pc, #40]	; (8006878 <HAL_RCC_ClockConfig+0x1c0>)
 8006850:	5ccb      	ldrb	r3, [r1, r3]
 8006852:	fa22 f303 	lsr.w	r3, r2, r3
 8006856:	4a09      	ldr	r2, [pc, #36]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 8006858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7fd fb42 	bl	8003ee8 <HAL_InitTick>

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40023c00 	.word	0x40023c00
 8006874:	40023800 	.word	0x40023800
 8006878:	0800f690 	.word	0x0800f690
 800687c:	20000010 	.word	0x20000010
 8006880:	20000014 	.word	0x20000014

08006884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006884:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	2300      	movs	r3, #0
 8006896:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800689c:	4b67      	ldr	r3, [pc, #412]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 030c 	and.w	r3, r3, #12
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d00d      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x40>
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	f200 80bd 	bhi.w	8006a28 <HAL_RCC_GetSysClockFreq+0x1a4>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <HAL_RCC_GetSysClockFreq+0x34>
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d003      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0x3a>
 80068b6:	e0b7      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b8:	4b61      	ldr	r3, [pc, #388]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068ba:	60bb      	str	r3, [r7, #8]
       break;
 80068bc:	e0b7      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068be:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80068c0:	60bb      	str	r3, [r7, #8]
      break;
 80068c2:	e0b4      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c4:	4b5d      	ldr	r3, [pc, #372]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ce:	4b5b      	ldr	r3, [pc, #364]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d04d      	beq.n	8006976 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068da:	4b58      	ldr	r3, [pc, #352]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	099b      	lsrs	r3, r3, #6
 80068e0:	461a      	mov	r2, r3
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068ea:	f04f 0100 	mov.w	r1, #0
 80068ee:	ea02 0800 	and.w	r8, r2, r0
 80068f2:	ea03 0901 	and.w	r9, r3, r1
 80068f6:	4640      	mov	r0, r8
 80068f8:	4649      	mov	r1, r9
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	014b      	lsls	r3, r1, #5
 8006904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006908:	0142      	lsls	r2, r0, #5
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	ebb0 0008 	subs.w	r0, r0, r8
 8006912:	eb61 0109 	sbc.w	r1, r1, r9
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	018b      	lsls	r3, r1, #6
 8006920:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006924:	0182      	lsls	r2, r0, #6
 8006926:	1a12      	subs	r2, r2, r0
 8006928:	eb63 0301 	sbc.w	r3, r3, r1
 800692c:	f04f 0000 	mov.w	r0, #0
 8006930:	f04f 0100 	mov.w	r1, #0
 8006934:	00d9      	lsls	r1, r3, #3
 8006936:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800693a:	00d0      	lsls	r0, r2, #3
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	eb12 0208 	adds.w	r2, r2, r8
 8006944:	eb43 0309 	adc.w	r3, r3, r9
 8006948:	f04f 0000 	mov.w	r0, #0
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	0259      	lsls	r1, r3, #9
 8006952:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006956:	0250      	lsls	r0, r2, #9
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4610      	mov	r0, r2
 800695e:	4619      	mov	r1, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	461a      	mov	r2, r3
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	f7fa f96e 	bl	8000c48 <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4613      	mov	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e04a      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006976:	4b31      	ldr	r3, [pc, #196]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	099b      	lsrs	r3, r3, #6
 800697c:	461a      	mov	r2, r3
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006986:	f04f 0100 	mov.w	r1, #0
 800698a:	ea02 0400 	and.w	r4, r2, r0
 800698e:	ea03 0501 	and.w	r5, r3, r1
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	014b      	lsls	r3, r1, #5
 80069a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069a4:	0142      	lsls	r2, r0, #5
 80069a6:	4610      	mov	r0, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	1b00      	subs	r0, r0, r4
 80069ac:	eb61 0105 	sbc.w	r1, r1, r5
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	018b      	lsls	r3, r1, #6
 80069ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069be:	0182      	lsls	r2, r0, #6
 80069c0:	1a12      	subs	r2, r2, r0
 80069c2:	eb63 0301 	sbc.w	r3, r3, r1
 80069c6:	f04f 0000 	mov.w	r0, #0
 80069ca:	f04f 0100 	mov.w	r1, #0
 80069ce:	00d9      	lsls	r1, r3, #3
 80069d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069d4:	00d0      	lsls	r0, r2, #3
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	1912      	adds	r2, r2, r4
 80069dc:	eb45 0303 	adc.w	r3, r5, r3
 80069e0:	f04f 0000 	mov.w	r0, #0
 80069e4:	f04f 0100 	mov.w	r1, #0
 80069e8:	0299      	lsls	r1, r3, #10
 80069ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80069ee:	0290      	lsls	r0, r2, #10
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4610      	mov	r0, r2
 80069f6:	4619      	mov	r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	f7fa f922 	bl	8000c48 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4613      	mov	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	60bb      	str	r3, [r7, #8]
      break;
 8006a26:	e002      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a2a:	60bb      	str	r3, [r7, #8]
      break;
 8006a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	007a1200 	.word	0x007a1200

08006a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a4c:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000010 	.word	0x20000010

08006a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a64:	f7ff fff0 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0a9b      	lsrs	r3, r3, #10
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4903      	ldr	r1, [pc, #12]	; (8006a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	0800f6a0 	.word	0x0800f6a0

08006a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a8c:	f7ff ffdc 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	0b5b      	lsrs	r3, r3, #13
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	4903      	ldr	r1, [pc, #12]	; (8006aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a9e:	5ccb      	ldrb	r3, [r1, r3]
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	0800f6a0 	.word	0x0800f6a0

08006ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e07b      	b.n	8006bba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d108      	bne.n	8006adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ad2:	d009      	beq.n	8006ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	61da      	str	r2, [r3, #28]
 8006ada:	e005      	b.n	8006ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fc fc08 	bl	8003318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6c:	ea42 0103 	orr.w	r1, r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	f003 0104 	and.w	r1, r3, #4
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	f003 0210 	and.w	r2, r3, #16
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b088      	sub	sp, #32
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	603b      	str	r3, [r7, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d101      	bne.n	8006be4 <HAL_SPI_Transmit+0x22>
 8006be0:	2302      	movs	r3, #2
 8006be2:	e126      	b.n	8006e32 <HAL_SPI_Transmit+0x270>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bec:	f7fd f9c0 	bl	8003f70 <HAL_GetTick>
 8006bf0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d002      	beq.n	8006c08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c02:	2302      	movs	r3, #2
 8006c04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c06:	e10b      	b.n	8006e20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_Transmit+0x52>
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c18:	e102      	b.n	8006e20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c60:	d10f      	bne.n	8006c82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8c:	2b40      	cmp	r3, #64	; 0x40
 8006c8e:	d007      	beq.n	8006ca0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca8:	d14b      	bne.n	8006d42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_SPI_Transmit+0xf6>
 8006cb2:	8afb      	ldrh	r3, [r7, #22]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d13e      	bne.n	8006d36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	881a      	ldrh	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	1c9a      	adds	r2, r3, #2
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cdc:	e02b      	b.n	8006d36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d112      	bne.n	8006d12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	881a      	ldrh	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	1c9a      	adds	r2, r3, #2
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d10:	e011      	b.n	8006d36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d12:	f7fd f92d 	bl	8003f70 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d803      	bhi.n	8006d2a <HAL_SPI_Transmit+0x168>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d102      	bne.n	8006d30 <HAL_SPI_Transmit+0x16e>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d34:	e074      	b.n	8006e20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1ce      	bne.n	8006cde <HAL_SPI_Transmit+0x11c>
 8006d40:	e04c      	b.n	8006ddc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <HAL_SPI_Transmit+0x18e>
 8006d4a:	8afb      	ldrh	r3, [r7, #22]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d140      	bne.n	8006dd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	7812      	ldrb	r2, [r2, #0]
 8006d5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d76:	e02c      	b.n	8006dd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d113      	bne.n	8006dae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	7812      	ldrb	r2, [r2, #0]
 8006d92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dac:	e011      	b.n	8006dd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dae:	f7fd f8df 	bl	8003f70 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d803      	bhi.n	8006dc6 <HAL_SPI_Transmit+0x204>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d102      	bne.n	8006dcc <HAL_SPI_Transmit+0x20a>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dd0:	e026      	b.n	8006e20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1cd      	bne.n	8006d78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 fbcb 	bl	800757c <SPI_EndRxTxTransaction>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	77fb      	strb	r3, [r7, #31]
 8006e1c:	e000      	b.n	8006e20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e30:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3720      	adds	r7, #32
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b088      	sub	sp, #32
 8006e3e:	af02      	add	r7, sp, #8
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	603b      	str	r3, [r7, #0]
 8006e46:	4613      	mov	r3, r2
 8006e48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e56:	d112      	bne.n	8006e7e <HAL_SPI_Receive+0x44>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10e      	bne.n	8006e7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f8f1 	bl	800705c <HAL_SPI_TransmitReceive>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	e0ea      	b.n	8007054 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_SPI_Receive+0x52>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e0e3      	b.n	8007054 <HAL_SPI_Receive+0x21a>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e94:	f7fd f86c 	bl	8003f70 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d002      	beq.n	8006eac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eaa:	e0ca      	b.n	8007042 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_SPI_Receive+0x7e>
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ebc:	e0c1      	b.n	8007042 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	88fa      	ldrh	r2, [r7, #6]
 8006ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f04:	d10f      	bne.n	8006f26 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d007      	beq.n	8006f44 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d162      	bne.n	8007012 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f4c:	e02e      	b.n	8006fac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d115      	bne.n	8006f88 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f103 020c 	add.w	r2, r3, #12
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	7812      	ldrb	r2, [r2, #0]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f86:	e011      	b.n	8006fac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f88:	f7fc fff2 	bl	8003f70 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d803      	bhi.n	8006fa0 <HAL_SPI_Receive+0x166>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d102      	bne.n	8006fa6 <HAL_SPI_Receive+0x16c>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006faa:	e04a      	b.n	8007042 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1cb      	bne.n	8006f4e <HAL_SPI_Receive+0x114>
 8006fb6:	e031      	b.n	800701c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d113      	bne.n	8006fee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	b292      	uxth	r2, r2
 8006fd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fec:	e011      	b.n	8007012 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fee:	f7fc ffbf 	bl	8003f70 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d803      	bhi.n	8007006 <HAL_SPI_Receive+0x1cc>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d102      	bne.n	800700c <HAL_SPI_Receive+0x1d2>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007010:	e017      	b.n	8007042 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1cd      	bne.n	8006fb8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fa45 	bl	80074b0 <SPI_EndRxTransaction>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
 800703e:	e000      	b.n	8007042 <HAL_SPI_Receive+0x208>
  }

error :
 8007040:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08c      	sub	sp, #48	; 0x30
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800706a:	2301      	movs	r3, #1
 800706c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_SPI_TransmitReceive+0x26>
 800707e:	2302      	movs	r3, #2
 8007080:	e18a      	b.n	8007398 <HAL_SPI_TransmitReceive+0x33c>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800708a:	f7fc ff71 	bl	8003f70 <HAL_GetTick>
 800708e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070a0:	887b      	ldrh	r3, [r7, #2]
 80070a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d00f      	beq.n	80070cc <HAL_SPI_TransmitReceive+0x70>
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070b2:	d107      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d103      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x68>
 80070bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d003      	beq.n	80070cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070ca:	e15b      	b.n	8007384 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <HAL_SPI_TransmitReceive+0x82>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_SPI_TransmitReceive+0x82>
 80070d8:	887b      	ldrh	r3, [r7, #2]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d103      	bne.n	80070e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070e4:	e14e      	b.n	8007384 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d003      	beq.n	80070fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2205      	movs	r2, #5
 80070f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	887a      	ldrh	r2, [r7, #2]
 800710a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	887a      	ldrh	r2, [r7, #2]
 8007110:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	887a      	ldrh	r2, [r7, #2]
 800711c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	887a      	ldrh	r2, [r7, #2]
 8007122:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d007      	beq.n	800714e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800714c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007156:	d178      	bne.n	800724a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x10a>
 8007160:	8b7b      	ldrh	r3, [r7, #26]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d166      	bne.n	8007234 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	881a      	ldrh	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	1c9a      	adds	r2, r3, #2
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800718a:	e053      	b.n	8007234 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b02      	cmp	r3, #2
 8007198:	d11b      	bne.n	80071d2 <HAL_SPI_TransmitReceive+0x176>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d016      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x176>
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d113      	bne.n	80071d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	881a      	ldrh	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	1c9a      	adds	r2, r3, #2
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d119      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x1b8>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d014      	beq.n	8007214 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	b292      	uxth	r2, r2
 80071f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	1c9a      	adds	r2, r3, #2
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007206:	b29b      	uxth	r3, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007210:	2301      	movs	r3, #1
 8007212:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007214:	f7fc feac 	bl	8003f70 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007220:	429a      	cmp	r2, r3
 8007222:	d807      	bhi.n	8007234 <HAL_SPI_TransmitReceive+0x1d8>
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d003      	beq.n	8007234 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007232:	e0a7      	b.n	8007384 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1a6      	bne.n	800718c <HAL_SPI_TransmitReceive+0x130>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1a1      	bne.n	800718c <HAL_SPI_TransmitReceive+0x130>
 8007248:	e07c      	b.n	8007344 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x1fc>
 8007252:	8b7b      	ldrh	r3, [r7, #26]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d16b      	bne.n	8007330 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	330c      	adds	r3, #12
 8007262:	7812      	ldrb	r2, [r2, #0]
 8007264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800727e:	e057      	b.n	8007330 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b02      	cmp	r3, #2
 800728c:	d11c      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x26c>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d017      	beq.n	80072c8 <HAL_SPI_TransmitReceive+0x26c>
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	2b01      	cmp	r3, #1
 800729c:	d114      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	7812      	ldrb	r2, [r2, #0]
 80072aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d119      	bne.n	800730a <HAL_SPI_TransmitReceive+0x2ae>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d014      	beq.n	800730a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007306:	2301      	movs	r3, #1
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800730a:	f7fc fe31 	bl	8003f70 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007316:	429a      	cmp	r2, r3
 8007318:	d803      	bhi.n	8007322 <HAL_SPI_TransmitReceive+0x2c6>
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007320:	d102      	bne.n	8007328 <HAL_SPI_TransmitReceive+0x2cc>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800732e:	e029      	b.n	8007384 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1a2      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x224>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d19d      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007346:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f917 	bl	800757c <SPI_EndRxTxTransaction>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d006      	beq.n	8007362 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007360:	e010      	b.n	8007384 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	e000      	b.n	8007384 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007382:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007398:	4618      	mov	r0, r3
 800739a:	3730      	adds	r7, #48	; 0x30
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	603b      	str	r3, [r7, #0]
 80073ac:	4613      	mov	r3, r2
 80073ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073b0:	f7fc fdde 	bl	8003f70 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	4413      	add	r3, r2
 80073be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073c0:	f7fc fdd6 	bl	8003f70 <HAL_GetTick>
 80073c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073c6:	4b39      	ldr	r3, [pc, #228]	; (80074ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	015b      	lsls	r3, r3, #5
 80073cc:	0d1b      	lsrs	r3, r3, #20
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	fb02 f303 	mul.w	r3, r2, r3
 80073d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073d6:	e054      	b.n	8007482 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d050      	beq.n	8007482 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073e0:	f7fc fdc6 	bl	8003f70 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d902      	bls.n	80073f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d13d      	bne.n	8007472 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800740e:	d111      	bne.n	8007434 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007418:	d004      	beq.n	8007424 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007422:	d107      	bne.n	8007434 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800743c:	d10f      	bne.n	800745e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800745c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e017      	b.n	80074a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	3b01      	subs	r3, #1
 8007480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4013      	ands	r3, r2
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	429a      	cmp	r2, r3
 8007490:	bf0c      	ite	eq
 8007492:	2301      	moveq	r3, #1
 8007494:	2300      	movne	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	461a      	mov	r2, r3
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	429a      	cmp	r2, r3
 800749e:	d19b      	bne.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3720      	adds	r7, #32
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000010 	.word	0x20000010

080074b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c4:	d111      	bne.n	80074ea <SPI_EndRxTransaction+0x3a>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ce:	d004      	beq.n	80074da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d8:	d107      	bne.n	80074ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f2:	d12a      	bne.n	800754a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074fc:	d012      	beq.n	8007524 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff ff49 	bl	80073a0 <SPI_WaitFlagStateUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d02d      	beq.n	8007570 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	f043 0220 	orr.w	r2, r3, #32
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e026      	b.n	8007572 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2200      	movs	r2, #0
 800752c:	2101      	movs	r1, #1
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff ff36 	bl	80073a0 <SPI_WaitFlagStateUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d01a      	beq.n	8007570 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753e:	f043 0220 	orr.w	r2, r3, #32
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e013      	b.n	8007572 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	2101      	movs	r1, #1
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f7ff ff23 	bl	80073a0 <SPI_WaitFlagStateUntilTimeout>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d007      	beq.n	8007570 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007564:	f043 0220 	orr.w	r2, r3, #32
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e000      	b.n	8007572 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af02      	add	r7, sp, #8
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007588:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <SPI_EndRxTxTransaction+0x7c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <SPI_EndRxTxTransaction+0x80>)
 800758e:	fba2 2303 	umull	r2, r3, r2, r3
 8007592:	0d5b      	lsrs	r3, r3, #21
 8007594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007598:	fb02 f303 	mul.w	r3, r2, r3
 800759c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075a6:	d112      	bne.n	80075ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2200      	movs	r2, #0
 80075b0:	2180      	movs	r1, #128	; 0x80
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7ff fef4 	bl	80073a0 <SPI_WaitFlagStateUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d016      	beq.n	80075ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	f043 0220 	orr.w	r2, r3, #32
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e00f      	b.n	80075ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00a      	beq.n	80075ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e4:	2b80      	cmp	r3, #128	; 0x80
 80075e6:	d0f2      	beq.n	80075ce <SPI_EndRxTxTransaction+0x52>
 80075e8:	e000      	b.n	80075ec <SPI_EndRxTxTransaction+0x70>
        break;
 80075ea:	bf00      	nop
  }

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000010 	.word	0x20000010
 80075fc:	165e9f81 	.word	0x165e9f81

08007600 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e034      	b.n	8007680 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7f9 ffca 	bl	80015c4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3308      	adds	r3, #8
 8007638:	4619      	mov	r1, r3
 800763a:	4610      	mov	r0, r2
 800763c:	f002 f828 	bl	8009690 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	461a      	mov	r2, r3
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	f002 f872 	bl	8009734 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6858      	ldr	r0, [r3, #4]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	f002 f8a7 	bl	80097b0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	6892      	ldr	r2, [r2, #8]
 800766a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	6892      	ldr	r2, [r2, #8]
 8007676:	f041 0101 	orr.w	r1, r1, #1
 800767a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e041      	b.n	800771e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fc f87a 	bl	80037a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f000 fc7a 	bl	8007fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	d001      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e04e      	b.n	80077de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a23      	ldr	r2, [pc, #140]	; (80077ec <HAL_TIM_Base_Start_IT+0xc4>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d022      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776a:	d01d      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1f      	ldr	r2, [pc, #124]	; (80077f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d018      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1e      	ldr	r2, [pc, #120]	; (80077f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d013      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a1c      	ldr	r2, [pc, #112]	; (80077f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00e      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1b      	ldr	r2, [pc, #108]	; (80077fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d009      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a19      	ldr	r2, [pc, #100]	; (8007800 <HAL_TIM_Base_Start_IT+0xd8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a18      	ldr	r2, [pc, #96]	; (8007804 <HAL_TIM_Base_Start_IT+0xdc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d111      	bne.n	80077cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b06      	cmp	r3, #6
 80077b8:	d010      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	e007      	b.n	80077dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40010400 	.word	0x40010400
 8007800:	40014000 	.word	0x40014000
 8007804:	40001800 	.word	0x40001800

08007808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e041      	b.n	800789e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f839 	bl	80078a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f000 fbba 	bl	8007fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
	...

080078bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <HAL_TIM_PWM_Start+0x24>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	bf14      	ite	ne
 80078d8:	2301      	movne	r3, #1
 80078da:	2300      	moveq	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	e022      	b.n	8007926 <HAL_TIM_PWM_Start+0x6a>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d109      	bne.n	80078fa <HAL_TIM_PWM_Start+0x3e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	bf14      	ite	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	2300      	moveq	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	e015      	b.n	8007926 <HAL_TIM_PWM_Start+0x6a>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d109      	bne.n	8007914 <HAL_TIM_PWM_Start+0x58>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	bf14      	ite	ne
 800790c:	2301      	movne	r3, #1
 800790e:	2300      	moveq	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	e008      	b.n	8007926 <HAL_TIM_PWM_Start+0x6a>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	bf14      	ite	ne
 8007920:	2301      	movne	r3, #1
 8007922:	2300      	moveq	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e07c      	b.n	8007a28 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <HAL_TIM_PWM_Start+0x82>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800793c:	e013      	b.n	8007966 <HAL_TIM_PWM_Start+0xaa>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b04      	cmp	r3, #4
 8007942:	d104      	bne.n	800794e <HAL_TIM_PWM_Start+0x92>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800794c:	e00b      	b.n	8007966 <HAL_TIM_PWM_Start+0xaa>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b08      	cmp	r3, #8
 8007952:	d104      	bne.n	800795e <HAL_TIM_PWM_Start+0xa2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800795c:	e003      	b.n	8007966 <HAL_TIM_PWM_Start+0xaa>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2201      	movs	r2, #1
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fe10 	bl	8008594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a2d      	ldr	r2, [pc, #180]	; (8007a30 <HAL_TIM_PWM_Start+0x174>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d004      	beq.n	8007988 <HAL_TIM_PWM_Start+0xcc>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a2c      	ldr	r2, [pc, #176]	; (8007a34 <HAL_TIM_PWM_Start+0x178>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d101      	bne.n	800798c <HAL_TIM_PWM_Start+0xd0>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <HAL_TIM_PWM_Start+0xd2>
 800798c:	2300      	movs	r3, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a22      	ldr	r2, [pc, #136]	; (8007a30 <HAL_TIM_PWM_Start+0x174>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d022      	beq.n	80079f2 <HAL_TIM_PWM_Start+0x136>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b4:	d01d      	beq.n	80079f2 <HAL_TIM_PWM_Start+0x136>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <HAL_TIM_PWM_Start+0x17c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d018      	beq.n	80079f2 <HAL_TIM_PWM_Start+0x136>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1d      	ldr	r2, [pc, #116]	; (8007a3c <HAL_TIM_PWM_Start+0x180>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d013      	beq.n	80079f2 <HAL_TIM_PWM_Start+0x136>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1c      	ldr	r2, [pc, #112]	; (8007a40 <HAL_TIM_PWM_Start+0x184>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d00e      	beq.n	80079f2 <HAL_TIM_PWM_Start+0x136>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a16      	ldr	r2, [pc, #88]	; (8007a34 <HAL_TIM_PWM_Start+0x178>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d009      	beq.n	80079f2 <HAL_TIM_PWM_Start+0x136>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a18      	ldr	r2, [pc, #96]	; (8007a44 <HAL_TIM_PWM_Start+0x188>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d004      	beq.n	80079f2 <HAL_TIM_PWM_Start+0x136>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <HAL_TIM_PWM_Start+0x18c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d111      	bne.n	8007a16 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 0307 	and.w	r3, r3, #7
 80079fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b06      	cmp	r3, #6
 8007a02:	d010      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0201 	orr.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a14:	e007      	b.n	8007a26 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	40010000 	.word	0x40010000
 8007a34:	40010400 	.word	0x40010400
 8007a38:	40000400 	.word	0x40000400
 8007a3c:	40000800 	.word	0x40000800
 8007a40:	40000c00 	.word	0x40000c00
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40001800 	.word	0x40001800

08007a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d122      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d11b      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0202 	mvn.w	r2, #2
 8007a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa77 	bl	8007f82 <HAL_TIM_IC_CaptureCallback>
 8007a94:	e005      	b.n	8007aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa69 	bl	8007f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fa7a 	bl	8007f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d122      	bne.n	8007afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d11b      	bne.n	8007afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0204 	mvn.w	r2, #4
 8007acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa4d 	bl	8007f82 <HAL_TIM_IC_CaptureCallback>
 8007ae8:	e005      	b.n	8007af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa3f 	bl	8007f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa50 	bl	8007f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b08      	cmp	r3, #8
 8007b08:	d122      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d11b      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0208 	mvn.w	r2, #8
 8007b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2204      	movs	r2, #4
 8007b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa23 	bl	8007f82 <HAL_TIM_IC_CaptureCallback>
 8007b3c:	e005      	b.n	8007b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa15 	bl	8007f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fa26 	bl	8007f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0310 	and.w	r3, r3, #16
 8007b5a:	2b10      	cmp	r3, #16
 8007b5c:	d122      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f003 0310 	and.w	r3, r3, #16
 8007b68:	2b10      	cmp	r3, #16
 8007b6a:	d11b      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f06f 0210 	mvn.w	r2, #16
 8007b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2208      	movs	r2, #8
 8007b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f9f9 	bl	8007f82 <HAL_TIM_IC_CaptureCallback>
 8007b90:	e005      	b.n	8007b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f9eb 	bl	8007f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f9fc 	bl	8007f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d10e      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d107      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0201 	mvn.w	r2, #1
 8007bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fb fb44 	bl	8003258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b80      	cmp	r3, #128	; 0x80
 8007bdc:	d10e      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be8:	2b80      	cmp	r3, #128	; 0x80
 8007bea:	d107      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fd78 	bl	80086ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c06:	2b40      	cmp	r3, #64	; 0x40
 8007c08:	d10e      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	d107      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9c1 	bl	8007faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d10e      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d107      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f06f 0220 	mvn.w	r2, #32
 8007c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fd42 	bl	80086d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e0ae      	b.n	8007dd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b0c      	cmp	r3, #12
 8007c86:	f200 809f 	bhi.w	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c8a:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007cc5 	.word	0x08007cc5
 8007c94:	08007dc9 	.word	0x08007dc9
 8007c98:	08007dc9 	.word	0x08007dc9
 8007c9c:	08007dc9 	.word	0x08007dc9
 8007ca0:	08007d05 	.word	0x08007d05
 8007ca4:	08007dc9 	.word	0x08007dc9
 8007ca8:	08007dc9 	.word	0x08007dc9
 8007cac:	08007dc9 	.word	0x08007dc9
 8007cb0:	08007d47 	.word	0x08007d47
 8007cb4:	08007dc9 	.word	0x08007dc9
 8007cb8:	08007dc9 	.word	0x08007dc9
 8007cbc:	08007dc9 	.word	0x08007dc9
 8007cc0:	08007d87 	.word	0x08007d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fa18 	bl	8008100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0208 	orr.w	r2, r2, #8
 8007cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699a      	ldr	r2, [r3, #24]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0204 	bic.w	r2, r2, #4
 8007cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6999      	ldr	r1, [r3, #24]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	691a      	ldr	r2, [r3, #16]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	619a      	str	r2, [r3, #24]
      break;
 8007d02:	e064      	b.n	8007dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fa68 	bl	80081e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699a      	ldr	r2, [r3, #24]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6999      	ldr	r1, [r3, #24]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	021a      	lsls	r2, r3, #8
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	619a      	str	r2, [r3, #24]
      break;
 8007d44:	e043      	b.n	8007dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fabd 	bl	80082cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	69da      	ldr	r2, [r3, #28]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0208 	orr.w	r2, r2, #8
 8007d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	69da      	ldr	r2, [r3, #28]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0204 	bic.w	r2, r2, #4
 8007d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69d9      	ldr	r1, [r3, #28]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	61da      	str	r2, [r3, #28]
      break;
 8007d84:	e023      	b.n	8007dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fb11 	bl	80083b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69da      	ldr	r2, [r3, #28]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69da      	ldr	r2, [r3, #28]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69d9      	ldr	r1, [r3, #28]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	021a      	lsls	r2, r3, #8
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	61da      	str	r2, [r3, #28]
      break;
 8007dc6:	e002      	b.n	8007dce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	75fb      	strb	r3, [r7, #23]
      break;
 8007dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d101      	bne.n	8007dfc <HAL_TIM_ConfigClockSource+0x1c>
 8007df8:	2302      	movs	r3, #2
 8007dfa:	e0b4      	b.n	8007f66 <HAL_TIM_ConfigClockSource+0x186>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e34:	d03e      	beq.n	8007eb4 <HAL_TIM_ConfigClockSource+0xd4>
 8007e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3a:	f200 8087 	bhi.w	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
 8007e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e42:	f000 8086 	beq.w	8007f52 <HAL_TIM_ConfigClockSource+0x172>
 8007e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4a:	d87f      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
 8007e4c:	2b70      	cmp	r3, #112	; 0x70
 8007e4e:	d01a      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0xa6>
 8007e50:	2b70      	cmp	r3, #112	; 0x70
 8007e52:	d87b      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
 8007e54:	2b60      	cmp	r3, #96	; 0x60
 8007e56:	d050      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x11a>
 8007e58:	2b60      	cmp	r3, #96	; 0x60
 8007e5a:	d877      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
 8007e5c:	2b50      	cmp	r3, #80	; 0x50
 8007e5e:	d03c      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0xfa>
 8007e60:	2b50      	cmp	r3, #80	; 0x50
 8007e62:	d873      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
 8007e64:	2b40      	cmp	r3, #64	; 0x40
 8007e66:	d058      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0x13a>
 8007e68:	2b40      	cmp	r3, #64	; 0x40
 8007e6a:	d86f      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
 8007e6c:	2b30      	cmp	r3, #48	; 0x30
 8007e6e:	d064      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x15a>
 8007e70:	2b30      	cmp	r3, #48	; 0x30
 8007e72:	d86b      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d060      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x15a>
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d867      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d05c      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x15a>
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d05a      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x15a>
 8007e84:	e062      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6899      	ldr	r1, [r3, #8]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f000 fb5d 	bl	8008554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ea8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	609a      	str	r2, [r3, #8]
      break;
 8007eb2:	e04f      	b.n	8007f54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	6899      	ldr	r1, [r3, #8]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f000 fb46 	bl	8008554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ed6:	609a      	str	r2, [r3, #8]
      break;
 8007ed8:	e03c      	b.n	8007f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6859      	ldr	r1, [r3, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f000 faba 	bl	8008460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2150      	movs	r1, #80	; 0x50
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fb13 	bl	800851e <TIM_ITRx_SetConfig>
      break;
 8007ef8:	e02c      	b.n	8007f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	6859      	ldr	r1, [r3, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f000 fad9 	bl	80084be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2160      	movs	r1, #96	; 0x60
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fb03 	bl	800851e <TIM_ITRx_SetConfig>
      break;
 8007f18:	e01c      	b.n	8007f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6859      	ldr	r1, [r3, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f000 fa9a 	bl	8008460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2140      	movs	r1, #64	; 0x40
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 faf3 	bl	800851e <TIM_ITRx_SetConfig>
      break;
 8007f38:	e00c      	b.n	8007f54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f000 faea 	bl	800851e <TIM_ITRx_SetConfig>
      break;
 8007f4a:	e003      	b.n	8007f54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f50:	e000      	b.n	8007f54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a40      	ldr	r2, [pc, #256]	; (80080d4 <TIM_Base_SetConfig+0x114>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d013      	beq.n	8008000 <TIM_Base_SetConfig+0x40>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fde:	d00f      	beq.n	8008000 <TIM_Base_SetConfig+0x40>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a3d      	ldr	r2, [pc, #244]	; (80080d8 <TIM_Base_SetConfig+0x118>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00b      	beq.n	8008000 <TIM_Base_SetConfig+0x40>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a3c      	ldr	r2, [pc, #240]	; (80080dc <TIM_Base_SetConfig+0x11c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d007      	beq.n	8008000 <TIM_Base_SetConfig+0x40>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a3b      	ldr	r2, [pc, #236]	; (80080e0 <TIM_Base_SetConfig+0x120>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d003      	beq.n	8008000 <TIM_Base_SetConfig+0x40>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a3a      	ldr	r2, [pc, #232]	; (80080e4 <TIM_Base_SetConfig+0x124>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d108      	bne.n	8008012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a2f      	ldr	r2, [pc, #188]	; (80080d4 <TIM_Base_SetConfig+0x114>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d02b      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008020:	d027      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a2c      	ldr	r2, [pc, #176]	; (80080d8 <TIM_Base_SetConfig+0x118>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d023      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a2b      	ldr	r2, [pc, #172]	; (80080dc <TIM_Base_SetConfig+0x11c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d01f      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a2a      	ldr	r2, [pc, #168]	; (80080e0 <TIM_Base_SetConfig+0x120>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d01b      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a29      	ldr	r2, [pc, #164]	; (80080e4 <TIM_Base_SetConfig+0x124>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d017      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a28      	ldr	r2, [pc, #160]	; (80080e8 <TIM_Base_SetConfig+0x128>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a27      	ldr	r2, [pc, #156]	; (80080ec <TIM_Base_SetConfig+0x12c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00f      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a26      	ldr	r2, [pc, #152]	; (80080f0 <TIM_Base_SetConfig+0x130>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00b      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a25      	ldr	r2, [pc, #148]	; (80080f4 <TIM_Base_SetConfig+0x134>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d007      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a24      	ldr	r2, [pc, #144]	; (80080f8 <TIM_Base_SetConfig+0x138>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d003      	beq.n	8008072 <TIM_Base_SetConfig+0xb2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a23      	ldr	r2, [pc, #140]	; (80080fc <TIM_Base_SetConfig+0x13c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d108      	bne.n	8008084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	4313      	orrs	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a0a      	ldr	r2, [pc, #40]	; (80080d4 <TIM_Base_SetConfig+0x114>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d003      	beq.n	80080b8 <TIM_Base_SetConfig+0xf8>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a0c      	ldr	r2, [pc, #48]	; (80080e4 <TIM_Base_SetConfig+0x124>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d103      	bne.n	80080c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	615a      	str	r2, [r3, #20]
}
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40010000 	.word	0x40010000
 80080d8:	40000400 	.word	0x40000400
 80080dc:	40000800 	.word	0x40000800
 80080e0:	40000c00 	.word	0x40000c00
 80080e4:	40010400 	.word	0x40010400
 80080e8:	40014000 	.word	0x40014000
 80080ec:	40014400 	.word	0x40014400
 80080f0:	40014800 	.word	0x40014800
 80080f4:	40001800 	.word	0x40001800
 80080f8:	40001c00 	.word	0x40001c00
 80080fc:	40002000 	.word	0x40002000

08008100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	f023 0201 	bic.w	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f023 0302 	bic.w	r3, r3, #2
 8008148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a20      	ldr	r2, [pc, #128]	; (80081d8 <TIM_OC1_SetConfig+0xd8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_OC1_SetConfig+0x64>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a1f      	ldr	r2, [pc, #124]	; (80081dc <TIM_OC1_SetConfig+0xdc>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d10c      	bne.n	800817e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f023 0308 	bic.w	r3, r3, #8
 800816a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f023 0304 	bic.w	r3, r3, #4
 800817c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a15      	ldr	r2, [pc, #84]	; (80081d8 <TIM_OC1_SetConfig+0xd8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d003      	beq.n	800818e <TIM_OC1_SetConfig+0x8e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a14      	ldr	r2, [pc, #80]	; (80081dc <TIM_OC1_SetConfig+0xdc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d111      	bne.n	80081b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800819c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	621a      	str	r2, [r3, #32]
}
 80081cc:	bf00      	nop
 80081ce:	371c      	adds	r7, #28
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40010400 	.word	0x40010400

080081e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	f023 0210 	bic.w	r2, r3, #16
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f023 0320 	bic.w	r3, r3, #32
 800822a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a22      	ldr	r2, [pc, #136]	; (80082c4 <TIM_OC2_SetConfig+0xe4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_OC2_SetConfig+0x68>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a21      	ldr	r2, [pc, #132]	; (80082c8 <TIM_OC2_SetConfig+0xe8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d10d      	bne.n	8008264 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a17      	ldr	r2, [pc, #92]	; (80082c4 <TIM_OC2_SetConfig+0xe4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d003      	beq.n	8008274 <TIM_OC2_SetConfig+0x94>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a16      	ldr	r2, [pc, #88]	; (80082c8 <TIM_OC2_SetConfig+0xe8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d113      	bne.n	800829c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800827a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	4313      	orrs	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	40010000 	.word	0x40010000
 80082c8:	40010400 	.word	0x40010400

080082cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0303 	bic.w	r3, r3, #3
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	4313      	orrs	r3, r2
 8008320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a21      	ldr	r2, [pc, #132]	; (80083ac <TIM_OC3_SetConfig+0xe0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d003      	beq.n	8008332 <TIM_OC3_SetConfig+0x66>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a20      	ldr	r2, [pc, #128]	; (80083b0 <TIM_OC3_SetConfig+0xe4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d10d      	bne.n	800834e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	4313      	orrs	r3, r2
 8008344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800834c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a16      	ldr	r2, [pc, #88]	; (80083ac <TIM_OC3_SetConfig+0xe0>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d003      	beq.n	800835e <TIM_OC3_SetConfig+0x92>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a15      	ldr	r2, [pc, #84]	; (80083b0 <TIM_OC3_SetConfig+0xe4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d113      	bne.n	8008386 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800836c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	621a      	str	r2, [r3, #32]
}
 80083a0:	bf00      	nop
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	40010000 	.word	0x40010000
 80083b0:	40010400 	.word	0x40010400

080083b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	031b      	lsls	r3, r3, #12
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	4313      	orrs	r3, r2
 800840a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a12      	ldr	r2, [pc, #72]	; (8008458 <TIM_OC4_SetConfig+0xa4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d003      	beq.n	800841c <TIM_OC4_SetConfig+0x68>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a11      	ldr	r2, [pc, #68]	; (800845c <TIM_OC4_SetConfig+0xa8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d109      	bne.n	8008430 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	019b      	lsls	r3, r3, #6
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4313      	orrs	r3, r2
 800842e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	621a      	str	r2, [r3, #32]
}
 800844a:	bf00      	nop
 800844c:	371c      	adds	r7, #28
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	40010000 	.word	0x40010000
 800845c:	40010400 	.word	0x40010400

08008460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f023 0201 	bic.w	r2, r3, #1
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800848a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4313      	orrs	r3, r2
 8008494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f023 030a 	bic.w	r3, r3, #10
 800849c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	621a      	str	r2, [r3, #32]
}
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084be:	b480      	push	{r7}
 80084c0:	b087      	sub	sp, #28
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f023 0210 	bic.w	r2, r3, #16
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	031b      	lsls	r3, r3, #12
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4313      	orrs	r3, r2
 8008504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	621a      	str	r2, [r3, #32]
}
 8008512:	bf00      	nop
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	f043 0307 	orr.w	r3, r3, #7
 8008540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	609a      	str	r2, [r3, #8]
}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800856e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	021a      	lsls	r2, r3, #8
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	431a      	orrs	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4313      	orrs	r3, r2
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	4313      	orrs	r3, r2
 8008580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	609a      	str	r2, [r3, #8]
}
 8008588:	bf00      	nop
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f003 031f 	and.w	r3, r3, #31
 80085a6:	2201      	movs	r2, #1
 80085a8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a1a      	ldr	r2, [r3, #32]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	43db      	mvns	r3, r3
 80085b6:	401a      	ands	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a1a      	ldr	r2, [r3, #32]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 031f 	and.w	r3, r3, #31
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	fa01 f303 	lsl.w	r3, r1, r3
 80085cc:	431a      	orrs	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	621a      	str	r2, [r3, #32]
}
 80085d2:	bf00      	nop
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
	...

080085e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d101      	bne.n	80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e05a      	b.n	80086ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800861e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a21      	ldr	r2, [pc, #132]	; (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d022      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008644:	d01d      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d018      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d013      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00e      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a18      	ldr	r2, [pc, #96]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d009      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a17      	ldr	r2, [pc, #92]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d004      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a15      	ldr	r2, [pc, #84]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d10c      	bne.n	800869c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4313      	orrs	r3, r2
 8008692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	40010000 	.word	0x40010000
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40000c00 	.word	0x40000c00
 80086cc:	40010400 	.word	0x40010400
 80086d0:	40014000 	.word	0x40014000
 80086d4:	40001800 	.word	0x40001800

080086d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e03f      	b.n	8008792 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fb fa4c 	bl	8003bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2224      	movs	r2, #36	; 0x24
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fddb 	bl	8009300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695a      	ldr	r2, [r3, #20]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b08a      	sub	sp, #40	; 0x28
 800879e:	af02      	add	r7, sp, #8
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	603b      	str	r3, [r7, #0]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d17c      	bne.n	80088b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <HAL_UART_Transmit+0x2c>
 80087c0:	88fb      	ldrh	r3, [r7, #6]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e075      	b.n	80088b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_UART_Transmit+0x3e>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e06e      	b.n	80088b6 <HAL_UART_Transmit+0x11c>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2221      	movs	r2, #33	; 0x21
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087ee:	f7fb fbbf 	bl	8003f70 <HAL_GetTick>
 80087f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	88fa      	ldrh	r2, [r7, #6]
 80087f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	88fa      	ldrh	r2, [r7, #6]
 80087fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008808:	d108      	bne.n	800881c <HAL_UART_Transmit+0x82>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d104      	bne.n	800881c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	61bb      	str	r3, [r7, #24]
 800881a:	e003      	b.n	8008824 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008820:	2300      	movs	r3, #0
 8008822:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800882c:	e02a      	b.n	8008884 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2200      	movs	r2, #0
 8008836:	2180      	movs	r1, #128	; 0x80
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 fb1f 	bl	8008e7c <UART_WaitOnFlagUntilTimeout>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e036      	b.n	80088b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800885c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	3302      	adds	r3, #2
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	e007      	b.n	8008876 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	3301      	adds	r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800887a:	b29b      	uxth	r3, r3
 800887c:	3b01      	subs	r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1cf      	bne.n	800882e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2200      	movs	r2, #0
 8008896:	2140      	movs	r1, #64	; 0x40
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 faef 	bl	8008e7c <UART_WaitOnFlagUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e006      	b.n	80088b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	e000      	b.n	80088b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80088b4:	2302      	movs	r3, #2
  }
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3720      	adds	r7, #32
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	4613      	mov	r3, r2
 80088ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d11d      	bne.n	8008914 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <HAL_UART_Receive_IT+0x26>
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e016      	b.n	8008916 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_UART_Receive_IT+0x38>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e00f      	b.n	8008916 <HAL_UART_Receive_IT+0x58>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008904:	88fb      	ldrh	r3, [r7, #6]
 8008906:	461a      	mov	r2, r3
 8008908:	68b9      	ldr	r1, [r7, #8]
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 fb24 	bl	8008f58 <UART_Start_Receive_IT>
 8008910:	4603      	mov	r3, r0
 8008912:	e000      	b.n	8008916 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008914:	2302      	movs	r3, #2
  }
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b0ba      	sub	sp, #232	; 0xe8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008946:	2300      	movs	r3, #0
 8008948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800894c:	2300      	movs	r3, #0
 800894e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800895e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10f      	bne.n	8008986 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <HAL_UART_IRQHandler+0x66>
 8008972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fc03 	bl	800918a <UART_Receive_IT>
      return;
 8008984:	e256      	b.n	8008e34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 80de 	beq.w	8008b4c <HAL_UART_IRQHandler+0x22c>
 8008990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d106      	bne.n	80089aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800899c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 80d1 	beq.w	8008b4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00b      	beq.n	80089ce <HAL_UART_IRQHandler+0xae>
 80089b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	f043 0201 	orr.w	r2, r3, #1
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00b      	beq.n	80089f2 <HAL_UART_IRQHandler+0xd2>
 80089da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d005      	beq.n	80089f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	f043 0202 	orr.w	r2, r3, #2
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00b      	beq.n	8008a16 <HAL_UART_IRQHandler+0xf6>
 80089fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f043 0204 	orr.w	r2, r3, #4
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1a:	f003 0308 	and.w	r3, r3, #8
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d011      	beq.n	8008a46 <HAL_UART_IRQHandler+0x126>
 8008a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d105      	bne.n	8008a3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	f043 0208 	orr.w	r2, r3, #8
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 81ed 	beq.w	8008e2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d008      	beq.n	8008a6e <HAL_UART_IRQHandler+0x14e>
 8008a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a60:	f003 0320 	and.w	r3, r3, #32
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fb8e 	bl	800918a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a78:	2b40      	cmp	r3, #64	; 0x40
 8008a7a:	bf0c      	ite	eq
 8008a7c:	2301      	moveq	r3, #1
 8008a7e:	2300      	movne	r3, #0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f003 0308 	and.w	r3, r3, #8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d103      	bne.n	8008a9a <HAL_UART_IRQHandler+0x17a>
 8008a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d04f      	beq.n	8008b3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa96 	bl	8008fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	d141      	bne.n	8008b32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3314      	adds	r3, #20
 8008ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ada:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1d9      	bne.n	8008aae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d013      	beq.n	8008b2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	4a7d      	ldr	r2, [pc, #500]	; (8008cfc <HAL_UART_IRQHandler+0x3dc>)
 8008b08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fc f8f8 	bl	8004d04 <HAL_DMA_Abort_IT>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d016      	beq.n	8008b48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b28:	e00e      	b.n	8008b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f990 	bl	8008e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b30:	e00a      	b.n	8008b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f98c 	bl	8008e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b38:	e006      	b.n	8008b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f988 	bl	8008e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b46:	e170      	b.n	8008e2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b48:	bf00      	nop
    return;
 8008b4a:	e16e      	b.n	8008e2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	f040 814a 	bne.w	8008dea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5a:	f003 0310 	and.w	r3, r3, #16
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 8143 	beq.w	8008dea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b68:	f003 0310 	and.w	r3, r3, #16
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 813c 	beq.w	8008dea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b72:	2300      	movs	r3, #0
 8008b74:	60bb      	str	r3, [r7, #8]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	60bb      	str	r3, [r7, #8]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	60bb      	str	r3, [r7, #8]
 8008b86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	f040 80b4 	bne.w	8008d00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 8140 	beq.w	8008e2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	f080 8139 	bcs.w	8008e2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bce:	f000 8088 	beq.w	8008ce2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	330c      	adds	r3, #12
 8008bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c0e:	e841 2300 	strex	r3, r2, [r1]
 8008c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1d9      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3314      	adds	r3, #20
 8008c24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c30:	f023 0301 	bic.w	r3, r3, #1
 8008c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e1      	bne.n	8008c1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3314      	adds	r3, #20
 8008c60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3314      	adds	r3, #20
 8008c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e3      	bne.n	8008c5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb2:	f023 0310 	bic.w	r3, r3, #16
 8008cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008cc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008cc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ccc:	e841 2300 	strex	r3, r2, [r1]
 8008cd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e3      	bne.n	8008ca0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fb ffa1 	bl	8004c24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f8b6 	bl	8008e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cf8:	e099      	b.n	8008e2e <HAL_UART_IRQHandler+0x50e>
 8008cfa:	bf00      	nop
 8008cfc:	08009093 	.word	0x08009093
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 808b 	beq.w	8008e32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8086 	beq.w	8008e32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	330c      	adds	r3, #12
 8008d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	330c      	adds	r3, #12
 8008d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d4a:	647a      	str	r2, [r7, #68]	; 0x44
 8008d4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e3      	bne.n	8008d26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3314      	adds	r3, #20
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3314      	adds	r3, #20
 8008d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d82:	633a      	str	r2, [r7, #48]	; 0x30
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e3      	bne.n	8008d5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	330c      	adds	r3, #12
 8008daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	e853 3f00 	ldrex	r3, [r3]
 8008db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0310 	bic.w	r3, r3, #16
 8008dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	330c      	adds	r3, #12
 8008dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008dc8:	61fa      	str	r2, [r7, #28]
 8008dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dcc:	69b9      	ldr	r1, [r7, #24]
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	e841 2300 	strex	r3, r2, [r1]
 8008dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e3      	bne.n	8008da4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f83e 	bl	8008e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008de8:	e023      	b.n	8008e32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <HAL_UART_IRQHandler+0x4ea>
 8008df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f959 	bl	80090ba <UART_Transmit_IT>
    return;
 8008e08:	e014      	b.n	8008e34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00e      	beq.n	8008e34 <HAL_UART_IRQHandler+0x514>
 8008e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d008      	beq.n	8008e34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f999 	bl	800915a <UART_EndTransmit_IT>
    return;
 8008e28:	e004      	b.n	8008e34 <HAL_UART_IRQHandler+0x514>
    return;
 8008e2a:	bf00      	nop
 8008e2c:	e002      	b.n	8008e34 <HAL_UART_IRQHandler+0x514>
      return;
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <HAL_UART_IRQHandler+0x514>
      return;
 8008e32:	bf00      	nop
  }
}
 8008e34:	37e8      	adds	r7, #232	; 0xe8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop

08008e3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b090      	sub	sp, #64	; 0x40
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e8c:	e050      	b.n	8008f30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e94:	d04c      	beq.n	8008f30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d007      	beq.n	8008eac <UART_WaitOnFlagUntilTimeout+0x30>
 8008e9c:	f7fb f868 	bl	8003f70 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d241      	bcs.n	8008f30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	e853 3f00 	ldrex	r3, [r3]
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	330c      	adds	r3, #12
 8008eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ecc:	637a      	str	r2, [r7, #52]	; 0x34
 8008ece:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ed4:	e841 2300 	strex	r3, r2, [r1]
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e5      	bne.n	8008eac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	e853 3f00 	ldrex	r3, [r3]
 8008eee:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f023 0301 	bic.w	r3, r3, #1
 8008ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3314      	adds	r3, #20
 8008efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f00:	623a      	str	r2, [r7, #32]
 8008f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	69f9      	ldr	r1, [r7, #28]
 8008f06:	6a3a      	ldr	r2, [r7, #32]
 8008f08:	e841 2300 	strex	r3, r2, [r1]
 8008f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e5      	bne.n	8008ee0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e00f      	b.n	8008f50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	bf0c      	ite	eq
 8008f40:	2301      	moveq	r3, #1
 8008f42:	2300      	movne	r3, #0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	461a      	mov	r2, r3
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d09f      	beq.n	8008e8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3740      	adds	r7, #64	; 0x40
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	88fa      	ldrh	r2, [r7, #6]
 8008f76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2222      	movs	r2, #34	; 0x22
 8008f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f9c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	695a      	ldr	r2, [r3, #20]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f042 0201 	orr.w	r2, r2, #1
 8008fac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 0220 	orr.w	r2, r2, #32
 8008fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b095      	sub	sp, #84	; 0x54
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	330c      	adds	r3, #12
 8008fda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ff4:	643a      	str	r2, [r7, #64]	; 0x40
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e5      	bne.n	8008fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3314      	adds	r3, #20
 800900e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	61fb      	str	r3, [r7, #28]
   return(result);
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	f023 0301 	bic.w	r3, r3, #1
 800901e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3314      	adds	r3, #20
 8009026:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800902e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e5      	bne.n	8009008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	2b01      	cmp	r3, #1
 8009042:	d119      	bne.n	8009078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	e853 3f00 	ldrex	r3, [r3]
 8009052:	60bb      	str	r3, [r7, #8]
   return(result);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f023 0310 	bic.w	r3, r3, #16
 800905a:	647b      	str	r3, [r7, #68]	; 0x44
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	330c      	adds	r3, #12
 8009062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009064:	61ba      	str	r2, [r7, #24]
 8009066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	6979      	ldr	r1, [r7, #20]
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	613b      	str	r3, [r7, #16]
   return(result);
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e5      	bne.n	8009044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009086:	bf00      	nop
 8009088:	3754      	adds	r7, #84	; 0x54
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f7ff fecf 	bl	8008e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b21      	cmp	r3, #33	; 0x21
 80090cc:	d13e      	bne.n	800914c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d6:	d114      	bne.n	8009102 <UART_Transmit_IT+0x48>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d110      	bne.n	8009102 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	1c9a      	adds	r2, r3, #2
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	621a      	str	r2, [r3, #32]
 8009100:	e008      	b.n	8009114 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	1c59      	adds	r1, r3, #1
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	6211      	str	r1, [r2, #32]
 800910c:	781a      	ldrb	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009118:	b29b      	uxth	r3, r3
 800911a:	3b01      	subs	r3, #1
 800911c:	b29b      	uxth	r3, r3
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	4619      	mov	r1, r3
 8009122:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10f      	bne.n	8009148 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009136:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009146:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	e000      	b.n	800914e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800914c:	2302      	movs	r3, #2
  }
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009170:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fe5e 	bl	8008e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b08c      	sub	sp, #48	; 0x30
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b22      	cmp	r3, #34	; 0x22
 800919c:	f040 80ab 	bne.w	80092f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a8:	d117      	bne.n	80091da <UART_Receive_IT+0x50>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d113      	bne.n	80091da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d2:	1c9a      	adds	r2, r3, #2
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	629a      	str	r2, [r3, #40]	; 0x28
 80091d8:	e026      	b.n	8009228 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ec:	d007      	beq.n	80091fe <UART_Receive_IT+0x74>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10a      	bne.n	800920c <UART_Receive_IT+0x82>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	b2da      	uxtb	r2, r3
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e008      	b.n	800921e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009218:	b2da      	uxtb	r2, r3
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b01      	subs	r3, #1
 8009230:	b29b      	uxth	r3, r3
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	4619      	mov	r1, r3
 8009236:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009238:	2b00      	cmp	r3, #0
 800923a:	d15a      	bne.n	80092f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0220 	bic.w	r2, r2, #32
 800924a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800925a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	695a      	ldr	r2, [r3, #20]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0201 	bic.w	r2, r2, #1
 800926a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009278:	2b01      	cmp	r3, #1
 800927a:	d135      	bne.n	80092e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	613b      	str	r3, [r7, #16]
   return(result);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f023 0310 	bic.w	r3, r3, #16
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	330c      	adds	r3, #12
 80092a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a2:	623a      	str	r2, [r7, #32]
 80092a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	69f9      	ldr	r1, [r7, #28]
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e5      	bne.n	8009282 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d10a      	bne.n	80092da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff fdbf 	bl	8008e64 <HAL_UARTEx_RxEventCallback>
 80092e6:	e002      	b.n	80092ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7fa fb67 	bl	80039bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e002      	b.n	80092f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e000      	b.n	80092f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80092f6:	2302      	movs	r3, #2
  }
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3730      	adds	r7, #48	; 0x30
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	b09f      	sub	sp, #124	; 0x7c
 8009306:	af00      	add	r7, sp, #0
 8009308:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800930a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009316:	68d9      	ldr	r1, [r3, #12]
 8009318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	ea40 0301 	orr.w	r3, r0, r1
 8009320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009324:	689a      	ldr	r2, [r3, #8]
 8009326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	431a      	orrs	r2, r3
 800932c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	431a      	orrs	r2, r3
 8009332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	4313      	orrs	r3, r2
 8009338:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800933a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009344:	f021 010c 	bic.w	r1, r1, #12
 8009348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800934e:	430b      	orrs	r3, r1
 8009350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800935c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935e:	6999      	ldr	r1, [r3, #24]
 8009360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	ea40 0301 	orr.w	r3, r0, r1
 8009368:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800936a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4bc5      	ldr	r3, [pc, #788]	; (8009684 <UART_SetConfig+0x384>)
 8009370:	429a      	cmp	r2, r3
 8009372:	d004      	beq.n	800937e <UART_SetConfig+0x7e>
 8009374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	4bc3      	ldr	r3, [pc, #780]	; (8009688 <UART_SetConfig+0x388>)
 800937a:	429a      	cmp	r2, r3
 800937c:	d103      	bne.n	8009386 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800937e:	f7fd fb83 	bl	8006a88 <HAL_RCC_GetPCLK2Freq>
 8009382:	6778      	str	r0, [r7, #116]	; 0x74
 8009384:	e002      	b.n	800938c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009386:	f7fd fb6b 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 800938a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800938c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009394:	f040 80b6 	bne.w	8009504 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800939a:	461c      	mov	r4, r3
 800939c:	f04f 0500 	mov.w	r5, #0
 80093a0:	4622      	mov	r2, r4
 80093a2:	462b      	mov	r3, r5
 80093a4:	1891      	adds	r1, r2, r2
 80093a6:	6439      	str	r1, [r7, #64]	; 0x40
 80093a8:	415b      	adcs	r3, r3
 80093aa:	647b      	str	r3, [r7, #68]	; 0x44
 80093ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093b0:	1912      	adds	r2, r2, r4
 80093b2:	eb45 0303 	adc.w	r3, r5, r3
 80093b6:	f04f 0000 	mov.w	r0, #0
 80093ba:	f04f 0100 	mov.w	r1, #0
 80093be:	00d9      	lsls	r1, r3, #3
 80093c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093c4:	00d0      	lsls	r0, r2, #3
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	1911      	adds	r1, r2, r4
 80093cc:	6639      	str	r1, [r7, #96]	; 0x60
 80093ce:	416b      	adcs	r3, r5
 80093d0:	667b      	str	r3, [r7, #100]	; 0x64
 80093d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f04f 0300 	mov.w	r3, #0
 80093dc:	1891      	adds	r1, r2, r2
 80093de:	63b9      	str	r1, [r7, #56]	; 0x38
 80093e0:	415b      	adcs	r3, r3
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80093ec:	f7f7 fc2c 	bl	8000c48 <__aeabi_uldivmod>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4ba5      	ldr	r3, [pc, #660]	; (800968c <UART_SetConfig+0x38c>)
 80093f6:	fba3 2302 	umull	r2, r3, r3, r2
 80093fa:	095b      	lsrs	r3, r3, #5
 80093fc:	011e      	lsls	r6, r3, #4
 80093fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009400:	461c      	mov	r4, r3
 8009402:	f04f 0500 	mov.w	r5, #0
 8009406:	4622      	mov	r2, r4
 8009408:	462b      	mov	r3, r5
 800940a:	1891      	adds	r1, r2, r2
 800940c:	6339      	str	r1, [r7, #48]	; 0x30
 800940e:	415b      	adcs	r3, r3
 8009410:	637b      	str	r3, [r7, #52]	; 0x34
 8009412:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009416:	1912      	adds	r2, r2, r4
 8009418:	eb45 0303 	adc.w	r3, r5, r3
 800941c:	f04f 0000 	mov.w	r0, #0
 8009420:	f04f 0100 	mov.w	r1, #0
 8009424:	00d9      	lsls	r1, r3, #3
 8009426:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800942a:	00d0      	lsls	r0, r2, #3
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	1911      	adds	r1, r2, r4
 8009432:	65b9      	str	r1, [r7, #88]	; 0x58
 8009434:	416b      	adcs	r3, r5
 8009436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	461a      	mov	r2, r3
 800943e:	f04f 0300 	mov.w	r3, #0
 8009442:	1891      	adds	r1, r2, r2
 8009444:	62b9      	str	r1, [r7, #40]	; 0x28
 8009446:	415b      	adcs	r3, r3
 8009448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800944a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800944e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009452:	f7f7 fbf9 	bl	8000c48 <__aeabi_uldivmod>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4b8c      	ldr	r3, [pc, #560]	; (800968c <UART_SetConfig+0x38c>)
 800945c:	fba3 1302 	umull	r1, r3, r3, r2
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	2164      	movs	r1, #100	; 0x64
 8009464:	fb01 f303 	mul.w	r3, r1, r3
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	3332      	adds	r3, #50	; 0x32
 800946e:	4a87      	ldr	r2, [pc, #540]	; (800968c <UART_SetConfig+0x38c>)
 8009470:	fba2 2303 	umull	r2, r3, r2, r3
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800947c:	441e      	add	r6, r3
 800947e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009480:	4618      	mov	r0, r3
 8009482:	f04f 0100 	mov.w	r1, #0
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	1894      	adds	r4, r2, r2
 800948c:	623c      	str	r4, [r7, #32]
 800948e:	415b      	adcs	r3, r3
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
 8009492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009496:	1812      	adds	r2, r2, r0
 8009498:	eb41 0303 	adc.w	r3, r1, r3
 800949c:	f04f 0400 	mov.w	r4, #0
 80094a0:	f04f 0500 	mov.w	r5, #0
 80094a4:	00dd      	lsls	r5, r3, #3
 80094a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094aa:	00d4      	lsls	r4, r2, #3
 80094ac:	4622      	mov	r2, r4
 80094ae:	462b      	mov	r3, r5
 80094b0:	1814      	adds	r4, r2, r0
 80094b2:	653c      	str	r4, [r7, #80]	; 0x50
 80094b4:	414b      	adcs	r3, r1
 80094b6:	657b      	str	r3, [r7, #84]	; 0x54
 80094b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	461a      	mov	r2, r3
 80094be:	f04f 0300 	mov.w	r3, #0
 80094c2:	1891      	adds	r1, r2, r2
 80094c4:	61b9      	str	r1, [r7, #24]
 80094c6:	415b      	adcs	r3, r3
 80094c8:	61fb      	str	r3, [r7, #28]
 80094ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80094d2:	f7f7 fbb9 	bl	8000c48 <__aeabi_uldivmod>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4b6c      	ldr	r3, [pc, #432]	; (800968c <UART_SetConfig+0x38c>)
 80094dc:	fba3 1302 	umull	r1, r3, r3, r2
 80094e0:	095b      	lsrs	r3, r3, #5
 80094e2:	2164      	movs	r1, #100	; 0x64
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	3332      	adds	r3, #50	; 0x32
 80094ee:	4a67      	ldr	r2, [pc, #412]	; (800968c <UART_SetConfig+0x38c>)
 80094f0:	fba2 2303 	umull	r2, r3, r2, r3
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	f003 0207 	and.w	r2, r3, #7
 80094fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4432      	add	r2, r6
 8009500:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009502:	e0b9      	b.n	8009678 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009506:	461c      	mov	r4, r3
 8009508:	f04f 0500 	mov.w	r5, #0
 800950c:	4622      	mov	r2, r4
 800950e:	462b      	mov	r3, r5
 8009510:	1891      	adds	r1, r2, r2
 8009512:	6139      	str	r1, [r7, #16]
 8009514:	415b      	adcs	r3, r3
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800951c:	1912      	adds	r2, r2, r4
 800951e:	eb45 0303 	adc.w	r3, r5, r3
 8009522:	f04f 0000 	mov.w	r0, #0
 8009526:	f04f 0100 	mov.w	r1, #0
 800952a:	00d9      	lsls	r1, r3, #3
 800952c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009530:	00d0      	lsls	r0, r2, #3
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	eb12 0804 	adds.w	r8, r2, r4
 800953a:	eb43 0905 	adc.w	r9, r3, r5
 800953e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	4618      	mov	r0, r3
 8009544:	f04f 0100 	mov.w	r1, #0
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	008b      	lsls	r3, r1, #2
 8009552:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009556:	0082      	lsls	r2, r0, #2
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	f7f7 fb74 	bl	8000c48 <__aeabi_uldivmod>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4b49      	ldr	r3, [pc, #292]	; (800968c <UART_SetConfig+0x38c>)
 8009566:	fba3 2302 	umull	r2, r3, r3, r2
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	011e      	lsls	r6, r3, #4
 800956e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009570:	4618      	mov	r0, r3
 8009572:	f04f 0100 	mov.w	r1, #0
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	1894      	adds	r4, r2, r2
 800957c:	60bc      	str	r4, [r7, #8]
 800957e:	415b      	adcs	r3, r3
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009586:	1812      	adds	r2, r2, r0
 8009588:	eb41 0303 	adc.w	r3, r1, r3
 800958c:	f04f 0400 	mov.w	r4, #0
 8009590:	f04f 0500 	mov.w	r5, #0
 8009594:	00dd      	lsls	r5, r3, #3
 8009596:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800959a:	00d4      	lsls	r4, r2, #3
 800959c:	4622      	mov	r2, r4
 800959e:	462b      	mov	r3, r5
 80095a0:	1814      	adds	r4, r2, r0
 80095a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80095a4:	414b      	adcs	r3, r1
 80095a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f04f 0100 	mov.w	r1, #0
 80095b2:	f04f 0200 	mov.w	r2, #0
 80095b6:	f04f 0300 	mov.w	r3, #0
 80095ba:	008b      	lsls	r3, r1, #2
 80095bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095c0:	0082      	lsls	r2, r0, #2
 80095c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80095c6:	f7f7 fb3f 	bl	8000c48 <__aeabi_uldivmod>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4b2f      	ldr	r3, [pc, #188]	; (800968c <UART_SetConfig+0x38c>)
 80095d0:	fba3 1302 	umull	r1, r3, r3, r2
 80095d4:	095b      	lsrs	r3, r3, #5
 80095d6:	2164      	movs	r1, #100	; 0x64
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	3332      	adds	r3, #50	; 0x32
 80095e2:	4a2a      	ldr	r2, [pc, #168]	; (800968c <UART_SetConfig+0x38c>)
 80095e4:	fba2 2303 	umull	r2, r3, r2, r3
 80095e8:	095b      	lsrs	r3, r3, #5
 80095ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095ee:	441e      	add	r6, r3
 80095f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095f2:	4618      	mov	r0, r3
 80095f4:	f04f 0100 	mov.w	r1, #0
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	1894      	adds	r4, r2, r2
 80095fe:	603c      	str	r4, [r7, #0]
 8009600:	415b      	adcs	r3, r3
 8009602:	607b      	str	r3, [r7, #4]
 8009604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009608:	1812      	adds	r2, r2, r0
 800960a:	eb41 0303 	adc.w	r3, r1, r3
 800960e:	f04f 0400 	mov.w	r4, #0
 8009612:	f04f 0500 	mov.w	r5, #0
 8009616:	00dd      	lsls	r5, r3, #3
 8009618:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800961c:	00d4      	lsls	r4, r2, #3
 800961e:	4622      	mov	r2, r4
 8009620:	462b      	mov	r3, r5
 8009622:	eb12 0a00 	adds.w	sl, r2, r0
 8009626:	eb43 0b01 	adc.w	fp, r3, r1
 800962a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	4618      	mov	r0, r3
 8009630:	f04f 0100 	mov.w	r1, #0
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	008b      	lsls	r3, r1, #2
 800963e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009642:	0082      	lsls	r2, r0, #2
 8009644:	4650      	mov	r0, sl
 8009646:	4659      	mov	r1, fp
 8009648:	f7f7 fafe 	bl	8000c48 <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4b0e      	ldr	r3, [pc, #56]	; (800968c <UART_SetConfig+0x38c>)
 8009652:	fba3 1302 	umull	r1, r3, r3, r2
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	2164      	movs	r1, #100	; 0x64
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	011b      	lsls	r3, r3, #4
 8009662:	3332      	adds	r3, #50	; 0x32
 8009664:	4a09      	ldr	r2, [pc, #36]	; (800968c <UART_SetConfig+0x38c>)
 8009666:	fba2 2303 	umull	r2, r3, r2, r3
 800966a:	095b      	lsrs	r3, r3, #5
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4432      	add	r2, r6
 8009676:	609a      	str	r2, [r3, #8]
}
 8009678:	bf00      	nop
 800967a:	377c      	adds	r7, #124	; 0x7c
 800967c:	46bd      	mov	sp, r7
 800967e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009682:	bf00      	nop
 8009684:	40011000 	.word	0x40011000
 8009688:	40011400 	.word	0x40011400
 800968c:	51eb851f 	.word	0x51eb851f

08009690 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4b20      	ldr	r3, [pc, #128]	; (8009730 <FSMC_NORSRAM_Init+0xa0>)
 80096ae:	4013      	ands	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80096ba:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80096c0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80096c6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80096cc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80096d2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80096d8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80096de:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80096e4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80096ea:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80096f0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80096f6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80096fc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	2b08      	cmp	r3, #8
 800970a:	d103      	bne.n	8009714 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009712:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	fff00080 	.word	0xfff00080

08009734 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009756:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009762:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800976a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009772:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	3b01      	subs	r3, #1
 800977a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800977c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	3b02      	subs	r3, #2
 8009784:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009786:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800978c:	4313      	orrs	r3, r2
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	4313      	orrs	r3, r2
 8009792:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6979      	ldr	r1, [r7, #20]
 800979c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
	...

080097b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097c8:	d122      	bne.n	8009810 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	4b15      	ldr	r3, [pc, #84]	; (800982c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80097d8:	4013      	ands	r3, r2
 80097da:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097e6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80097ee:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80097f6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80097fc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	4313      	orrs	r3, r2
 8009802:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	6979      	ldr	r1, [r7, #20]
 800980a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800980e:	e005      	b.n	800981c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	cff00000 	.word	0xcff00000

08009830 <__errno>:
 8009830:	4b01      	ldr	r3, [pc, #4]	; (8009838 <__errno+0x8>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	2000001c 	.word	0x2000001c

0800983c <__libc_init_array>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	4d0d      	ldr	r5, [pc, #52]	; (8009874 <__libc_init_array+0x38>)
 8009840:	4c0d      	ldr	r4, [pc, #52]	; (8009878 <__libc_init_array+0x3c>)
 8009842:	1b64      	subs	r4, r4, r5
 8009844:	10a4      	asrs	r4, r4, #2
 8009846:	2600      	movs	r6, #0
 8009848:	42a6      	cmp	r6, r4
 800984a:	d109      	bne.n	8009860 <__libc_init_array+0x24>
 800984c:	4d0b      	ldr	r5, [pc, #44]	; (800987c <__libc_init_array+0x40>)
 800984e:	4c0c      	ldr	r4, [pc, #48]	; (8009880 <__libc_init_array+0x44>)
 8009850:	f002 feb4 	bl	800c5bc <_init>
 8009854:	1b64      	subs	r4, r4, r5
 8009856:	10a4      	asrs	r4, r4, #2
 8009858:	2600      	movs	r6, #0
 800985a:	42a6      	cmp	r6, r4
 800985c:	d105      	bne.n	800986a <__libc_init_array+0x2e>
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	f855 3b04 	ldr.w	r3, [r5], #4
 8009864:	4798      	blx	r3
 8009866:	3601      	adds	r6, #1
 8009868:	e7ee      	b.n	8009848 <__libc_init_array+0xc>
 800986a:	f855 3b04 	ldr.w	r3, [r5], #4
 800986e:	4798      	blx	r3
 8009870:	3601      	adds	r6, #1
 8009872:	e7f2      	b.n	800985a <__libc_init_array+0x1e>
 8009874:	0800fa9c 	.word	0x0800fa9c
 8009878:	0800fa9c 	.word	0x0800fa9c
 800987c:	0800fa9c 	.word	0x0800fa9c
 8009880:	0800faa0 	.word	0x0800faa0

08009884 <memset>:
 8009884:	4402      	add	r2, r0
 8009886:	4603      	mov	r3, r0
 8009888:	4293      	cmp	r3, r2
 800988a:	d100      	bne.n	800988e <memset+0xa>
 800988c:	4770      	bx	lr
 800988e:	f803 1b01 	strb.w	r1, [r3], #1
 8009892:	e7f9      	b.n	8009888 <memset+0x4>

08009894 <__cvt>:
 8009894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009898:	ec55 4b10 	vmov	r4, r5, d0
 800989c:	2d00      	cmp	r5, #0
 800989e:	460e      	mov	r6, r1
 80098a0:	4619      	mov	r1, r3
 80098a2:	462b      	mov	r3, r5
 80098a4:	bfbb      	ittet	lt
 80098a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80098aa:	461d      	movlt	r5, r3
 80098ac:	2300      	movge	r3, #0
 80098ae:	232d      	movlt	r3, #45	; 0x2d
 80098b0:	700b      	strb	r3, [r1, #0]
 80098b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80098b8:	4691      	mov	r9, r2
 80098ba:	f023 0820 	bic.w	r8, r3, #32
 80098be:	bfbc      	itt	lt
 80098c0:	4622      	movlt	r2, r4
 80098c2:	4614      	movlt	r4, r2
 80098c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098c8:	d005      	beq.n	80098d6 <__cvt+0x42>
 80098ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80098ce:	d100      	bne.n	80098d2 <__cvt+0x3e>
 80098d0:	3601      	adds	r6, #1
 80098d2:	2102      	movs	r1, #2
 80098d4:	e000      	b.n	80098d8 <__cvt+0x44>
 80098d6:	2103      	movs	r1, #3
 80098d8:	ab03      	add	r3, sp, #12
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	ab02      	add	r3, sp, #8
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	ec45 4b10 	vmov	d0, r4, r5
 80098e4:	4653      	mov	r3, sl
 80098e6:	4632      	mov	r2, r6
 80098e8:	f000 fcea 	bl	800a2c0 <_dtoa_r>
 80098ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098f0:	4607      	mov	r7, r0
 80098f2:	d102      	bne.n	80098fa <__cvt+0x66>
 80098f4:	f019 0f01 	tst.w	r9, #1
 80098f8:	d022      	beq.n	8009940 <__cvt+0xac>
 80098fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098fe:	eb07 0906 	add.w	r9, r7, r6
 8009902:	d110      	bne.n	8009926 <__cvt+0x92>
 8009904:	783b      	ldrb	r3, [r7, #0]
 8009906:	2b30      	cmp	r3, #48	; 0x30
 8009908:	d10a      	bne.n	8009920 <__cvt+0x8c>
 800990a:	2200      	movs	r2, #0
 800990c:	2300      	movs	r3, #0
 800990e:	4620      	mov	r0, r4
 8009910:	4629      	mov	r1, r5
 8009912:	f7f7 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009916:	b918      	cbnz	r0, 8009920 <__cvt+0x8c>
 8009918:	f1c6 0601 	rsb	r6, r6, #1
 800991c:	f8ca 6000 	str.w	r6, [sl]
 8009920:	f8da 3000 	ldr.w	r3, [sl]
 8009924:	4499      	add	r9, r3
 8009926:	2200      	movs	r2, #0
 8009928:	2300      	movs	r3, #0
 800992a:	4620      	mov	r0, r4
 800992c:	4629      	mov	r1, r5
 800992e:	f7f7 f8cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009932:	b108      	cbz	r0, 8009938 <__cvt+0xa4>
 8009934:	f8cd 900c 	str.w	r9, [sp, #12]
 8009938:	2230      	movs	r2, #48	; 0x30
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	454b      	cmp	r3, r9
 800993e:	d307      	bcc.n	8009950 <__cvt+0xbc>
 8009940:	9b03      	ldr	r3, [sp, #12]
 8009942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009944:	1bdb      	subs	r3, r3, r7
 8009946:	4638      	mov	r0, r7
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	b004      	add	sp, #16
 800994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009950:	1c59      	adds	r1, r3, #1
 8009952:	9103      	str	r1, [sp, #12]
 8009954:	701a      	strb	r2, [r3, #0]
 8009956:	e7f0      	b.n	800993a <__cvt+0xa6>

08009958 <__exponent>:
 8009958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800995a:	4603      	mov	r3, r0
 800995c:	2900      	cmp	r1, #0
 800995e:	bfb8      	it	lt
 8009960:	4249      	neglt	r1, r1
 8009962:	f803 2b02 	strb.w	r2, [r3], #2
 8009966:	bfb4      	ite	lt
 8009968:	222d      	movlt	r2, #45	; 0x2d
 800996a:	222b      	movge	r2, #43	; 0x2b
 800996c:	2909      	cmp	r1, #9
 800996e:	7042      	strb	r2, [r0, #1]
 8009970:	dd2a      	ble.n	80099c8 <__exponent+0x70>
 8009972:	f10d 0407 	add.w	r4, sp, #7
 8009976:	46a4      	mov	ip, r4
 8009978:	270a      	movs	r7, #10
 800997a:	46a6      	mov	lr, r4
 800997c:	460a      	mov	r2, r1
 800997e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009982:	fb07 1516 	mls	r5, r7, r6, r1
 8009986:	3530      	adds	r5, #48	; 0x30
 8009988:	2a63      	cmp	r2, #99	; 0x63
 800998a:	f104 34ff 	add.w	r4, r4, #4294967295
 800998e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009992:	4631      	mov	r1, r6
 8009994:	dcf1      	bgt.n	800997a <__exponent+0x22>
 8009996:	3130      	adds	r1, #48	; 0x30
 8009998:	f1ae 0502 	sub.w	r5, lr, #2
 800999c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80099a0:	1c44      	adds	r4, r0, #1
 80099a2:	4629      	mov	r1, r5
 80099a4:	4561      	cmp	r1, ip
 80099a6:	d30a      	bcc.n	80099be <__exponent+0x66>
 80099a8:	f10d 0209 	add.w	r2, sp, #9
 80099ac:	eba2 020e 	sub.w	r2, r2, lr
 80099b0:	4565      	cmp	r5, ip
 80099b2:	bf88      	it	hi
 80099b4:	2200      	movhi	r2, #0
 80099b6:	4413      	add	r3, r2
 80099b8:	1a18      	subs	r0, r3, r0
 80099ba:	b003      	add	sp, #12
 80099bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80099c6:	e7ed      	b.n	80099a4 <__exponent+0x4c>
 80099c8:	2330      	movs	r3, #48	; 0x30
 80099ca:	3130      	adds	r1, #48	; 0x30
 80099cc:	7083      	strb	r3, [r0, #2]
 80099ce:	70c1      	strb	r1, [r0, #3]
 80099d0:	1d03      	adds	r3, r0, #4
 80099d2:	e7f1      	b.n	80099b8 <__exponent+0x60>

080099d4 <_printf_float>:
 80099d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	ed2d 8b02 	vpush	{d8}
 80099dc:	b08d      	sub	sp, #52	; 0x34
 80099de:	460c      	mov	r4, r1
 80099e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80099e4:	4616      	mov	r6, r2
 80099e6:	461f      	mov	r7, r3
 80099e8:	4605      	mov	r5, r0
 80099ea:	f001 fa55 	bl	800ae98 <_localeconv_r>
 80099ee:	f8d0 a000 	ldr.w	sl, [r0]
 80099f2:	4650      	mov	r0, sl
 80099f4:	f7f6 fbec 	bl	80001d0 <strlen>
 80099f8:	2300      	movs	r3, #0
 80099fa:	930a      	str	r3, [sp, #40]	; 0x28
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	9305      	str	r3, [sp, #20]
 8009a00:	f8d8 3000 	ldr.w	r3, [r8]
 8009a04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a08:	3307      	adds	r3, #7
 8009a0a:	f023 0307 	bic.w	r3, r3, #7
 8009a0e:	f103 0208 	add.w	r2, r3, #8
 8009a12:	f8c8 2000 	str.w	r2, [r8]
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a26:	9307      	str	r3, [sp, #28]
 8009a28:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a2c:	ee08 0a10 	vmov	s16, r0
 8009a30:	4b9f      	ldr	r3, [pc, #636]	; (8009cb0 <_printf_float+0x2dc>)
 8009a32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a36:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3a:	f7f7 f877 	bl	8000b2c <__aeabi_dcmpun>
 8009a3e:	bb88      	cbnz	r0, 8009aa4 <_printf_float+0xd0>
 8009a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a44:	4b9a      	ldr	r3, [pc, #616]	; (8009cb0 <_printf_float+0x2dc>)
 8009a46:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4a:	f7f7 f851 	bl	8000af0 <__aeabi_dcmple>
 8009a4e:	bb48      	cbnz	r0, 8009aa4 <_printf_float+0xd0>
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4640      	mov	r0, r8
 8009a56:	4649      	mov	r1, r9
 8009a58:	f7f7 f840 	bl	8000adc <__aeabi_dcmplt>
 8009a5c:	b110      	cbz	r0, 8009a64 <_printf_float+0x90>
 8009a5e:	232d      	movs	r3, #45	; 0x2d
 8009a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a64:	4b93      	ldr	r3, [pc, #588]	; (8009cb4 <_printf_float+0x2e0>)
 8009a66:	4894      	ldr	r0, [pc, #592]	; (8009cb8 <_printf_float+0x2e4>)
 8009a68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a6c:	bf94      	ite	ls
 8009a6e:	4698      	movls	r8, r3
 8009a70:	4680      	movhi	r8, r0
 8009a72:	2303      	movs	r3, #3
 8009a74:	6123      	str	r3, [r4, #16]
 8009a76:	9b05      	ldr	r3, [sp, #20]
 8009a78:	f023 0204 	bic.w	r2, r3, #4
 8009a7c:	6022      	str	r2, [r4, #0]
 8009a7e:	f04f 0900 	mov.w	r9, #0
 8009a82:	9700      	str	r7, [sp, #0]
 8009a84:	4633      	mov	r3, r6
 8009a86:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 f9d8 	bl	8009e40 <_printf_common>
 8009a90:	3001      	adds	r0, #1
 8009a92:	f040 8090 	bne.w	8009bb6 <_printf_float+0x1e2>
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9a:	b00d      	add	sp, #52	; 0x34
 8009a9c:	ecbd 8b02 	vpop	{d8}
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	4642      	mov	r2, r8
 8009aa6:	464b      	mov	r3, r9
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	4649      	mov	r1, r9
 8009aac:	f7f7 f83e 	bl	8000b2c <__aeabi_dcmpun>
 8009ab0:	b140      	cbz	r0, 8009ac4 <_printf_float+0xf0>
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	bfbc      	itt	lt
 8009ab8:	232d      	movlt	r3, #45	; 0x2d
 8009aba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009abe:	487f      	ldr	r0, [pc, #508]	; (8009cbc <_printf_float+0x2e8>)
 8009ac0:	4b7f      	ldr	r3, [pc, #508]	; (8009cc0 <_printf_float+0x2ec>)
 8009ac2:	e7d1      	b.n	8009a68 <_printf_float+0x94>
 8009ac4:	6863      	ldr	r3, [r4, #4]
 8009ac6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009aca:	9206      	str	r2, [sp, #24]
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	d13f      	bne.n	8009b50 <_printf_float+0x17c>
 8009ad0:	2306      	movs	r3, #6
 8009ad2:	6063      	str	r3, [r4, #4]
 8009ad4:	9b05      	ldr	r3, [sp, #20]
 8009ad6:	6861      	ldr	r1, [r4, #4]
 8009ad8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009adc:	2300      	movs	r3, #0
 8009ade:	9303      	str	r3, [sp, #12]
 8009ae0:	ab0a      	add	r3, sp, #40	; 0x28
 8009ae2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009ae6:	ab09      	add	r3, sp, #36	; 0x24
 8009ae8:	ec49 8b10 	vmov	d0, r8, r9
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	6022      	str	r2, [r4, #0]
 8009af0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009af4:	4628      	mov	r0, r5
 8009af6:	f7ff fecd 	bl	8009894 <__cvt>
 8009afa:	9b06      	ldr	r3, [sp, #24]
 8009afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009afe:	2b47      	cmp	r3, #71	; 0x47
 8009b00:	4680      	mov	r8, r0
 8009b02:	d108      	bne.n	8009b16 <_printf_float+0x142>
 8009b04:	1cc8      	adds	r0, r1, #3
 8009b06:	db02      	blt.n	8009b0e <_printf_float+0x13a>
 8009b08:	6863      	ldr	r3, [r4, #4]
 8009b0a:	4299      	cmp	r1, r3
 8009b0c:	dd41      	ble.n	8009b92 <_printf_float+0x1be>
 8009b0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b12:	fa5f fb8b 	uxtb.w	fp, fp
 8009b16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b1a:	d820      	bhi.n	8009b5e <_printf_float+0x18a>
 8009b1c:	3901      	subs	r1, #1
 8009b1e:	465a      	mov	r2, fp
 8009b20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b24:	9109      	str	r1, [sp, #36]	; 0x24
 8009b26:	f7ff ff17 	bl	8009958 <__exponent>
 8009b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b2c:	1813      	adds	r3, r2, r0
 8009b2e:	2a01      	cmp	r2, #1
 8009b30:	4681      	mov	r9, r0
 8009b32:	6123      	str	r3, [r4, #16]
 8009b34:	dc02      	bgt.n	8009b3c <_printf_float+0x168>
 8009b36:	6822      	ldr	r2, [r4, #0]
 8009b38:	07d2      	lsls	r2, r2, #31
 8009b3a:	d501      	bpl.n	8009b40 <_printf_float+0x16c>
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d09c      	beq.n	8009a82 <_printf_float+0xae>
 8009b48:	232d      	movs	r3, #45	; 0x2d
 8009b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b4e:	e798      	b.n	8009a82 <_printf_float+0xae>
 8009b50:	9a06      	ldr	r2, [sp, #24]
 8009b52:	2a47      	cmp	r2, #71	; 0x47
 8009b54:	d1be      	bne.n	8009ad4 <_printf_float+0x100>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1bc      	bne.n	8009ad4 <_printf_float+0x100>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e7b9      	b.n	8009ad2 <_printf_float+0xfe>
 8009b5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b62:	d118      	bne.n	8009b96 <_printf_float+0x1c2>
 8009b64:	2900      	cmp	r1, #0
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	dd0b      	ble.n	8009b82 <_printf_float+0x1ae>
 8009b6a:	6121      	str	r1, [r4, #16]
 8009b6c:	b913      	cbnz	r3, 8009b74 <_printf_float+0x1a0>
 8009b6e:	6822      	ldr	r2, [r4, #0]
 8009b70:	07d0      	lsls	r0, r2, #31
 8009b72:	d502      	bpl.n	8009b7a <_printf_float+0x1a6>
 8009b74:	3301      	adds	r3, #1
 8009b76:	440b      	add	r3, r1
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b7c:	f04f 0900 	mov.w	r9, #0
 8009b80:	e7de      	b.n	8009b40 <_printf_float+0x16c>
 8009b82:	b913      	cbnz	r3, 8009b8a <_printf_float+0x1b6>
 8009b84:	6822      	ldr	r2, [r4, #0]
 8009b86:	07d2      	lsls	r2, r2, #31
 8009b88:	d501      	bpl.n	8009b8e <_printf_float+0x1ba>
 8009b8a:	3302      	adds	r3, #2
 8009b8c:	e7f4      	b.n	8009b78 <_printf_float+0x1a4>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e7f2      	b.n	8009b78 <_printf_float+0x1a4>
 8009b92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b98:	4299      	cmp	r1, r3
 8009b9a:	db05      	blt.n	8009ba8 <_printf_float+0x1d4>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	6121      	str	r1, [r4, #16]
 8009ba0:	07d8      	lsls	r0, r3, #31
 8009ba2:	d5ea      	bpl.n	8009b7a <_printf_float+0x1a6>
 8009ba4:	1c4b      	adds	r3, r1, #1
 8009ba6:	e7e7      	b.n	8009b78 <_printf_float+0x1a4>
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	bfd4      	ite	le
 8009bac:	f1c1 0202 	rsble	r2, r1, #2
 8009bb0:	2201      	movgt	r2, #1
 8009bb2:	4413      	add	r3, r2
 8009bb4:	e7e0      	b.n	8009b78 <_printf_float+0x1a4>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	055a      	lsls	r2, r3, #21
 8009bba:	d407      	bmi.n	8009bcc <_printf_float+0x1f8>
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	4642      	mov	r2, r8
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d12c      	bne.n	8009c24 <_printf_float+0x250>
 8009bca:	e764      	b.n	8009a96 <_printf_float+0xc2>
 8009bcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bd0:	f240 80e0 	bls.w	8009d94 <_printf_float+0x3c0>
 8009bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f7f6 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d034      	beq.n	8009c4e <_printf_float+0x27a>
 8009be4:	4a37      	ldr	r2, [pc, #220]	; (8009cc4 <_printf_float+0x2f0>)
 8009be6:	2301      	movs	r3, #1
 8009be8:	4631      	mov	r1, r6
 8009bea:	4628      	mov	r0, r5
 8009bec:	47b8      	blx	r7
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f43f af51 	beq.w	8009a96 <_printf_float+0xc2>
 8009bf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	db02      	blt.n	8009c02 <_printf_float+0x22e>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07d8      	lsls	r0, r3, #31
 8009c00:	d510      	bpl.n	8009c24 <_printf_float+0x250>
 8009c02:	ee18 3a10 	vmov	r3, s16
 8009c06:	4652      	mov	r2, sl
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f43f af41 	beq.w	8009a96 <_printf_float+0xc2>
 8009c14:	f04f 0800 	mov.w	r8, #0
 8009c18:	f104 091a 	add.w	r9, r4, #26
 8009c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	4543      	cmp	r3, r8
 8009c22:	dc09      	bgt.n	8009c38 <_printf_float+0x264>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	079b      	lsls	r3, r3, #30
 8009c28:	f100 8105 	bmi.w	8009e36 <_printf_float+0x462>
 8009c2c:	68e0      	ldr	r0, [r4, #12]
 8009c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c30:	4298      	cmp	r0, r3
 8009c32:	bfb8      	it	lt
 8009c34:	4618      	movlt	r0, r3
 8009c36:	e730      	b.n	8009a9a <_printf_float+0xc6>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	464a      	mov	r2, r9
 8009c3c:	4631      	mov	r1, r6
 8009c3e:	4628      	mov	r0, r5
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	f43f af27 	beq.w	8009a96 <_printf_float+0xc2>
 8009c48:	f108 0801 	add.w	r8, r8, #1
 8009c4c:	e7e6      	b.n	8009c1c <_printf_float+0x248>
 8009c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	dc39      	bgt.n	8009cc8 <_printf_float+0x2f4>
 8009c54:	4a1b      	ldr	r2, [pc, #108]	; (8009cc4 <_printf_float+0x2f0>)
 8009c56:	2301      	movs	r3, #1
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b8      	blx	r7
 8009c5e:	3001      	adds	r0, #1
 8009c60:	f43f af19 	beq.w	8009a96 <_printf_float+0xc2>
 8009c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	d102      	bne.n	8009c72 <_printf_float+0x29e>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	07d9      	lsls	r1, r3, #31
 8009c70:	d5d8      	bpl.n	8009c24 <_printf_float+0x250>
 8009c72:	ee18 3a10 	vmov	r3, s16
 8009c76:	4652      	mov	r2, sl
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	f43f af09 	beq.w	8009a96 <_printf_float+0xc2>
 8009c84:	f04f 0900 	mov.w	r9, #0
 8009c88:	f104 0a1a 	add.w	sl, r4, #26
 8009c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8e:	425b      	negs	r3, r3
 8009c90:	454b      	cmp	r3, r9
 8009c92:	dc01      	bgt.n	8009c98 <_printf_float+0x2c4>
 8009c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c96:	e792      	b.n	8009bbe <_printf_float+0x1ea>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	4652      	mov	r2, sl
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	f43f aef7 	beq.w	8009a96 <_printf_float+0xc2>
 8009ca8:	f109 0901 	add.w	r9, r9, #1
 8009cac:	e7ee      	b.n	8009c8c <_printf_float+0x2b8>
 8009cae:	bf00      	nop
 8009cb0:	7fefffff 	.word	0x7fefffff
 8009cb4:	0800f6b4 	.word	0x0800f6b4
 8009cb8:	0800f6b8 	.word	0x0800f6b8
 8009cbc:	0800f6c0 	.word	0x0800f6c0
 8009cc0:	0800f6bc 	.word	0x0800f6bc
 8009cc4:	0800f6c4 	.word	0x0800f6c4
 8009cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	bfa8      	it	ge
 8009cd0:	461a      	movge	r2, r3
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	4691      	mov	r9, r2
 8009cd6:	dc37      	bgt.n	8009d48 <_printf_float+0x374>
 8009cd8:	f04f 0b00 	mov.w	fp, #0
 8009cdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ce0:	f104 021a 	add.w	r2, r4, #26
 8009ce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ce6:	9305      	str	r3, [sp, #20]
 8009ce8:	eba3 0309 	sub.w	r3, r3, r9
 8009cec:	455b      	cmp	r3, fp
 8009cee:	dc33      	bgt.n	8009d58 <_printf_float+0x384>
 8009cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	db3b      	blt.n	8009d70 <_printf_float+0x39c>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	07da      	lsls	r2, r3, #31
 8009cfc:	d438      	bmi.n	8009d70 <_printf_float+0x39c>
 8009cfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d00:	9b05      	ldr	r3, [sp, #20]
 8009d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	eba2 0901 	sub.w	r9, r2, r1
 8009d0a:	4599      	cmp	r9, r3
 8009d0c:	bfa8      	it	ge
 8009d0e:	4699      	movge	r9, r3
 8009d10:	f1b9 0f00 	cmp.w	r9, #0
 8009d14:	dc35      	bgt.n	8009d82 <_printf_float+0x3ae>
 8009d16:	f04f 0800 	mov.w	r8, #0
 8009d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d1e:	f104 0a1a 	add.w	sl, r4, #26
 8009d22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d26:	1a9b      	subs	r3, r3, r2
 8009d28:	eba3 0309 	sub.w	r3, r3, r9
 8009d2c:	4543      	cmp	r3, r8
 8009d2e:	f77f af79 	ble.w	8009c24 <_printf_float+0x250>
 8009d32:	2301      	movs	r3, #1
 8009d34:	4652      	mov	r2, sl
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f43f aeaa 	beq.w	8009a96 <_printf_float+0xc2>
 8009d42:	f108 0801 	add.w	r8, r8, #1
 8009d46:	e7ec      	b.n	8009d22 <_printf_float+0x34e>
 8009d48:	4613      	mov	r3, r2
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4642      	mov	r2, r8
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b8      	blx	r7
 8009d52:	3001      	adds	r0, #1
 8009d54:	d1c0      	bne.n	8009cd8 <_printf_float+0x304>
 8009d56:	e69e      	b.n	8009a96 <_printf_float+0xc2>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	9205      	str	r2, [sp, #20]
 8009d60:	47b8      	blx	r7
 8009d62:	3001      	adds	r0, #1
 8009d64:	f43f ae97 	beq.w	8009a96 <_printf_float+0xc2>
 8009d68:	9a05      	ldr	r2, [sp, #20]
 8009d6a:	f10b 0b01 	add.w	fp, fp, #1
 8009d6e:	e7b9      	b.n	8009ce4 <_printf_float+0x310>
 8009d70:	ee18 3a10 	vmov	r3, s16
 8009d74:	4652      	mov	r2, sl
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	d1be      	bne.n	8009cfe <_printf_float+0x32a>
 8009d80:	e689      	b.n	8009a96 <_printf_float+0xc2>
 8009d82:	9a05      	ldr	r2, [sp, #20]
 8009d84:	464b      	mov	r3, r9
 8009d86:	4442      	add	r2, r8
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b8      	blx	r7
 8009d8e:	3001      	adds	r0, #1
 8009d90:	d1c1      	bne.n	8009d16 <_printf_float+0x342>
 8009d92:	e680      	b.n	8009a96 <_printf_float+0xc2>
 8009d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d96:	2a01      	cmp	r2, #1
 8009d98:	dc01      	bgt.n	8009d9e <_printf_float+0x3ca>
 8009d9a:	07db      	lsls	r3, r3, #31
 8009d9c:	d538      	bpl.n	8009e10 <_printf_float+0x43c>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4642      	mov	r2, r8
 8009da2:	4631      	mov	r1, r6
 8009da4:	4628      	mov	r0, r5
 8009da6:	47b8      	blx	r7
 8009da8:	3001      	adds	r0, #1
 8009daa:	f43f ae74 	beq.w	8009a96 <_printf_float+0xc2>
 8009dae:	ee18 3a10 	vmov	r3, s16
 8009db2:	4652      	mov	r2, sl
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f ae6b 	beq.w	8009a96 <_printf_float+0xc2>
 8009dc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f7f6 fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dcc:	b9d8      	cbnz	r0, 8009e06 <_printf_float+0x432>
 8009dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd0:	f108 0201 	add.w	r2, r8, #1
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b8      	blx	r7
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d10e      	bne.n	8009dfe <_printf_float+0x42a>
 8009de0:	e659      	b.n	8009a96 <_printf_float+0xc2>
 8009de2:	2301      	movs	r3, #1
 8009de4:	4652      	mov	r2, sl
 8009de6:	4631      	mov	r1, r6
 8009de8:	4628      	mov	r0, r5
 8009dea:	47b8      	blx	r7
 8009dec:	3001      	adds	r0, #1
 8009dee:	f43f ae52 	beq.w	8009a96 <_printf_float+0xc2>
 8009df2:	f108 0801 	add.w	r8, r8, #1
 8009df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	4543      	cmp	r3, r8
 8009dfc:	dcf1      	bgt.n	8009de2 <_printf_float+0x40e>
 8009dfe:	464b      	mov	r3, r9
 8009e00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e04:	e6dc      	b.n	8009bc0 <_printf_float+0x1ec>
 8009e06:	f04f 0800 	mov.w	r8, #0
 8009e0a:	f104 0a1a 	add.w	sl, r4, #26
 8009e0e:	e7f2      	b.n	8009df6 <_printf_float+0x422>
 8009e10:	2301      	movs	r3, #1
 8009e12:	4642      	mov	r2, r8
 8009e14:	e7df      	b.n	8009dd6 <_printf_float+0x402>
 8009e16:	2301      	movs	r3, #1
 8009e18:	464a      	mov	r2, r9
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	47b8      	blx	r7
 8009e20:	3001      	adds	r0, #1
 8009e22:	f43f ae38 	beq.w	8009a96 <_printf_float+0xc2>
 8009e26:	f108 0801 	add.w	r8, r8, #1
 8009e2a:	68e3      	ldr	r3, [r4, #12]
 8009e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e2e:	1a5b      	subs	r3, r3, r1
 8009e30:	4543      	cmp	r3, r8
 8009e32:	dcf0      	bgt.n	8009e16 <_printf_float+0x442>
 8009e34:	e6fa      	b.n	8009c2c <_printf_float+0x258>
 8009e36:	f04f 0800 	mov.w	r8, #0
 8009e3a:	f104 0919 	add.w	r9, r4, #25
 8009e3e:	e7f4      	b.n	8009e2a <_printf_float+0x456>

08009e40 <_printf_common>:
 8009e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e44:	4616      	mov	r6, r2
 8009e46:	4699      	mov	r9, r3
 8009e48:	688a      	ldr	r2, [r1, #8]
 8009e4a:	690b      	ldr	r3, [r1, #16]
 8009e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e50:	4293      	cmp	r3, r2
 8009e52:	bfb8      	it	lt
 8009e54:	4613      	movlt	r3, r2
 8009e56:	6033      	str	r3, [r6, #0]
 8009e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	b10a      	cbz	r2, 8009e66 <_printf_common+0x26>
 8009e62:	3301      	adds	r3, #1
 8009e64:	6033      	str	r3, [r6, #0]
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	0699      	lsls	r1, r3, #26
 8009e6a:	bf42      	ittt	mi
 8009e6c:	6833      	ldrmi	r3, [r6, #0]
 8009e6e:	3302      	addmi	r3, #2
 8009e70:	6033      	strmi	r3, [r6, #0]
 8009e72:	6825      	ldr	r5, [r4, #0]
 8009e74:	f015 0506 	ands.w	r5, r5, #6
 8009e78:	d106      	bne.n	8009e88 <_printf_common+0x48>
 8009e7a:	f104 0a19 	add.w	sl, r4, #25
 8009e7e:	68e3      	ldr	r3, [r4, #12]
 8009e80:	6832      	ldr	r2, [r6, #0]
 8009e82:	1a9b      	subs	r3, r3, r2
 8009e84:	42ab      	cmp	r3, r5
 8009e86:	dc26      	bgt.n	8009ed6 <_printf_common+0x96>
 8009e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e8c:	1e13      	subs	r3, r2, #0
 8009e8e:	6822      	ldr	r2, [r4, #0]
 8009e90:	bf18      	it	ne
 8009e92:	2301      	movne	r3, #1
 8009e94:	0692      	lsls	r2, r2, #26
 8009e96:	d42b      	bmi.n	8009ef0 <_printf_common+0xb0>
 8009e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	47c0      	blx	r8
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d01e      	beq.n	8009ee4 <_printf_common+0xa4>
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	68e5      	ldr	r5, [r4, #12]
 8009eaa:	6832      	ldr	r2, [r6, #0]
 8009eac:	f003 0306 	and.w	r3, r3, #6
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	bf08      	it	eq
 8009eb4:	1aad      	subeq	r5, r5, r2
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	6922      	ldr	r2, [r4, #16]
 8009eba:	bf0c      	ite	eq
 8009ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ec0:	2500      	movne	r5, #0
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	bfc4      	itt	gt
 8009ec6:	1a9b      	subgt	r3, r3, r2
 8009ec8:	18ed      	addgt	r5, r5, r3
 8009eca:	2600      	movs	r6, #0
 8009ecc:	341a      	adds	r4, #26
 8009ece:	42b5      	cmp	r5, r6
 8009ed0:	d11a      	bne.n	8009f08 <_printf_common+0xc8>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e008      	b.n	8009ee8 <_printf_common+0xa8>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4652      	mov	r2, sl
 8009eda:	4649      	mov	r1, r9
 8009edc:	4638      	mov	r0, r7
 8009ede:	47c0      	blx	r8
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d103      	bne.n	8009eec <_printf_common+0xac>
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eec:	3501      	adds	r5, #1
 8009eee:	e7c6      	b.n	8009e7e <_printf_common+0x3e>
 8009ef0:	18e1      	adds	r1, r4, r3
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	2030      	movs	r0, #48	; 0x30
 8009ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009efa:	4422      	add	r2, r4
 8009efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f04:	3302      	adds	r3, #2
 8009f06:	e7c7      	b.n	8009e98 <_printf_common+0x58>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	4638      	mov	r0, r7
 8009f10:	47c0      	blx	r8
 8009f12:	3001      	adds	r0, #1
 8009f14:	d0e6      	beq.n	8009ee4 <_printf_common+0xa4>
 8009f16:	3601      	adds	r6, #1
 8009f18:	e7d9      	b.n	8009ece <_printf_common+0x8e>
	...

08009f1c <_printf_i>:
 8009f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	460c      	mov	r4, r1
 8009f22:	4691      	mov	r9, r2
 8009f24:	7e27      	ldrb	r7, [r4, #24]
 8009f26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f28:	2f78      	cmp	r7, #120	; 0x78
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	469a      	mov	sl, r3
 8009f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f32:	d807      	bhi.n	8009f44 <_printf_i+0x28>
 8009f34:	2f62      	cmp	r7, #98	; 0x62
 8009f36:	d80a      	bhi.n	8009f4e <_printf_i+0x32>
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	f000 80d8 	beq.w	800a0ee <_printf_i+0x1d2>
 8009f3e:	2f58      	cmp	r7, #88	; 0x58
 8009f40:	f000 80a3 	beq.w	800a08a <_printf_i+0x16e>
 8009f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f4c:	e03a      	b.n	8009fc4 <_printf_i+0xa8>
 8009f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f52:	2b15      	cmp	r3, #21
 8009f54:	d8f6      	bhi.n	8009f44 <_printf_i+0x28>
 8009f56:	a001      	add	r0, pc, #4	; (adr r0, 8009f5c <_printf_i+0x40>)
 8009f58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f5c:	08009fb5 	.word	0x08009fb5
 8009f60:	08009fc9 	.word	0x08009fc9
 8009f64:	08009f45 	.word	0x08009f45
 8009f68:	08009f45 	.word	0x08009f45
 8009f6c:	08009f45 	.word	0x08009f45
 8009f70:	08009f45 	.word	0x08009f45
 8009f74:	08009fc9 	.word	0x08009fc9
 8009f78:	08009f45 	.word	0x08009f45
 8009f7c:	08009f45 	.word	0x08009f45
 8009f80:	08009f45 	.word	0x08009f45
 8009f84:	08009f45 	.word	0x08009f45
 8009f88:	0800a0d5 	.word	0x0800a0d5
 8009f8c:	08009ff9 	.word	0x08009ff9
 8009f90:	0800a0b7 	.word	0x0800a0b7
 8009f94:	08009f45 	.word	0x08009f45
 8009f98:	08009f45 	.word	0x08009f45
 8009f9c:	0800a0f7 	.word	0x0800a0f7
 8009fa0:	08009f45 	.word	0x08009f45
 8009fa4:	08009ff9 	.word	0x08009ff9
 8009fa8:	08009f45 	.word	0x08009f45
 8009fac:	08009f45 	.word	0x08009f45
 8009fb0:	0800a0bf 	.word	0x0800a0bf
 8009fb4:	680b      	ldr	r3, [r1, #0]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	600a      	str	r2, [r1, #0]
 8009fbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e0a3      	b.n	800a110 <_printf_i+0x1f4>
 8009fc8:	6825      	ldr	r5, [r4, #0]
 8009fca:	6808      	ldr	r0, [r1, #0]
 8009fcc:	062e      	lsls	r6, r5, #24
 8009fce:	f100 0304 	add.w	r3, r0, #4
 8009fd2:	d50a      	bpl.n	8009fea <_printf_i+0xce>
 8009fd4:	6805      	ldr	r5, [r0, #0]
 8009fd6:	600b      	str	r3, [r1, #0]
 8009fd8:	2d00      	cmp	r5, #0
 8009fda:	da03      	bge.n	8009fe4 <_printf_i+0xc8>
 8009fdc:	232d      	movs	r3, #45	; 0x2d
 8009fde:	426d      	negs	r5, r5
 8009fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe4:	485e      	ldr	r0, [pc, #376]	; (800a160 <_printf_i+0x244>)
 8009fe6:	230a      	movs	r3, #10
 8009fe8:	e019      	b.n	800a01e <_printf_i+0x102>
 8009fea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fee:	6805      	ldr	r5, [r0, #0]
 8009ff0:	600b      	str	r3, [r1, #0]
 8009ff2:	bf18      	it	ne
 8009ff4:	b22d      	sxthne	r5, r5
 8009ff6:	e7ef      	b.n	8009fd8 <_printf_i+0xbc>
 8009ff8:	680b      	ldr	r3, [r1, #0]
 8009ffa:	6825      	ldr	r5, [r4, #0]
 8009ffc:	1d18      	adds	r0, r3, #4
 8009ffe:	6008      	str	r0, [r1, #0]
 800a000:	0628      	lsls	r0, r5, #24
 800a002:	d501      	bpl.n	800a008 <_printf_i+0xec>
 800a004:	681d      	ldr	r5, [r3, #0]
 800a006:	e002      	b.n	800a00e <_printf_i+0xf2>
 800a008:	0669      	lsls	r1, r5, #25
 800a00a:	d5fb      	bpl.n	800a004 <_printf_i+0xe8>
 800a00c:	881d      	ldrh	r5, [r3, #0]
 800a00e:	4854      	ldr	r0, [pc, #336]	; (800a160 <_printf_i+0x244>)
 800a010:	2f6f      	cmp	r7, #111	; 0x6f
 800a012:	bf0c      	ite	eq
 800a014:	2308      	moveq	r3, #8
 800a016:	230a      	movne	r3, #10
 800a018:	2100      	movs	r1, #0
 800a01a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a01e:	6866      	ldr	r6, [r4, #4]
 800a020:	60a6      	str	r6, [r4, #8]
 800a022:	2e00      	cmp	r6, #0
 800a024:	bfa2      	ittt	ge
 800a026:	6821      	ldrge	r1, [r4, #0]
 800a028:	f021 0104 	bicge.w	r1, r1, #4
 800a02c:	6021      	strge	r1, [r4, #0]
 800a02e:	b90d      	cbnz	r5, 800a034 <_printf_i+0x118>
 800a030:	2e00      	cmp	r6, #0
 800a032:	d04d      	beq.n	800a0d0 <_printf_i+0x1b4>
 800a034:	4616      	mov	r6, r2
 800a036:	fbb5 f1f3 	udiv	r1, r5, r3
 800a03a:	fb03 5711 	mls	r7, r3, r1, r5
 800a03e:	5dc7      	ldrb	r7, [r0, r7]
 800a040:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a044:	462f      	mov	r7, r5
 800a046:	42bb      	cmp	r3, r7
 800a048:	460d      	mov	r5, r1
 800a04a:	d9f4      	bls.n	800a036 <_printf_i+0x11a>
 800a04c:	2b08      	cmp	r3, #8
 800a04e:	d10b      	bne.n	800a068 <_printf_i+0x14c>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	07df      	lsls	r7, r3, #31
 800a054:	d508      	bpl.n	800a068 <_printf_i+0x14c>
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	6861      	ldr	r1, [r4, #4]
 800a05a:	4299      	cmp	r1, r3
 800a05c:	bfde      	ittt	le
 800a05e:	2330      	movle	r3, #48	; 0x30
 800a060:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a064:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a068:	1b92      	subs	r2, r2, r6
 800a06a:	6122      	str	r2, [r4, #16]
 800a06c:	f8cd a000 	str.w	sl, [sp]
 800a070:	464b      	mov	r3, r9
 800a072:	aa03      	add	r2, sp, #12
 800a074:	4621      	mov	r1, r4
 800a076:	4640      	mov	r0, r8
 800a078:	f7ff fee2 	bl	8009e40 <_printf_common>
 800a07c:	3001      	adds	r0, #1
 800a07e:	d14c      	bne.n	800a11a <_printf_i+0x1fe>
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	b004      	add	sp, #16
 800a086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08a:	4835      	ldr	r0, [pc, #212]	; (800a160 <_printf_i+0x244>)
 800a08c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	680e      	ldr	r6, [r1, #0]
 800a094:	061f      	lsls	r7, r3, #24
 800a096:	f856 5b04 	ldr.w	r5, [r6], #4
 800a09a:	600e      	str	r6, [r1, #0]
 800a09c:	d514      	bpl.n	800a0c8 <_printf_i+0x1ac>
 800a09e:	07d9      	lsls	r1, r3, #31
 800a0a0:	bf44      	itt	mi
 800a0a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a0a6:	6023      	strmi	r3, [r4, #0]
 800a0a8:	b91d      	cbnz	r5, 800a0b2 <_printf_i+0x196>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	f023 0320 	bic.w	r3, r3, #32
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	2310      	movs	r3, #16
 800a0b4:	e7b0      	b.n	800a018 <_printf_i+0xfc>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	f043 0320 	orr.w	r3, r3, #32
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	2378      	movs	r3, #120	; 0x78
 800a0c0:	4828      	ldr	r0, [pc, #160]	; (800a164 <_printf_i+0x248>)
 800a0c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0c6:	e7e3      	b.n	800a090 <_printf_i+0x174>
 800a0c8:	065e      	lsls	r6, r3, #25
 800a0ca:	bf48      	it	mi
 800a0cc:	b2ad      	uxthmi	r5, r5
 800a0ce:	e7e6      	b.n	800a09e <_printf_i+0x182>
 800a0d0:	4616      	mov	r6, r2
 800a0d2:	e7bb      	b.n	800a04c <_printf_i+0x130>
 800a0d4:	680b      	ldr	r3, [r1, #0]
 800a0d6:	6826      	ldr	r6, [r4, #0]
 800a0d8:	6960      	ldr	r0, [r4, #20]
 800a0da:	1d1d      	adds	r5, r3, #4
 800a0dc:	600d      	str	r5, [r1, #0]
 800a0de:	0635      	lsls	r5, r6, #24
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	d501      	bpl.n	800a0e8 <_printf_i+0x1cc>
 800a0e4:	6018      	str	r0, [r3, #0]
 800a0e6:	e002      	b.n	800a0ee <_printf_i+0x1d2>
 800a0e8:	0671      	lsls	r1, r6, #25
 800a0ea:	d5fb      	bpl.n	800a0e4 <_printf_i+0x1c8>
 800a0ec:	8018      	strh	r0, [r3, #0]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	4616      	mov	r6, r2
 800a0f4:	e7ba      	b.n	800a06c <_printf_i+0x150>
 800a0f6:	680b      	ldr	r3, [r1, #0]
 800a0f8:	1d1a      	adds	r2, r3, #4
 800a0fa:	600a      	str	r2, [r1, #0]
 800a0fc:	681e      	ldr	r6, [r3, #0]
 800a0fe:	6862      	ldr	r2, [r4, #4]
 800a100:	2100      	movs	r1, #0
 800a102:	4630      	mov	r0, r6
 800a104:	f7f6 f86c 	bl	80001e0 <memchr>
 800a108:	b108      	cbz	r0, 800a10e <_printf_i+0x1f2>
 800a10a:	1b80      	subs	r0, r0, r6
 800a10c:	6060      	str	r0, [r4, #4]
 800a10e:	6863      	ldr	r3, [r4, #4]
 800a110:	6123      	str	r3, [r4, #16]
 800a112:	2300      	movs	r3, #0
 800a114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a118:	e7a8      	b.n	800a06c <_printf_i+0x150>
 800a11a:	6923      	ldr	r3, [r4, #16]
 800a11c:	4632      	mov	r2, r6
 800a11e:	4649      	mov	r1, r9
 800a120:	4640      	mov	r0, r8
 800a122:	47d0      	blx	sl
 800a124:	3001      	adds	r0, #1
 800a126:	d0ab      	beq.n	800a080 <_printf_i+0x164>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	079b      	lsls	r3, r3, #30
 800a12c:	d413      	bmi.n	800a156 <_printf_i+0x23a>
 800a12e:	68e0      	ldr	r0, [r4, #12]
 800a130:	9b03      	ldr	r3, [sp, #12]
 800a132:	4298      	cmp	r0, r3
 800a134:	bfb8      	it	lt
 800a136:	4618      	movlt	r0, r3
 800a138:	e7a4      	b.n	800a084 <_printf_i+0x168>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4632      	mov	r2, r6
 800a13e:	4649      	mov	r1, r9
 800a140:	4640      	mov	r0, r8
 800a142:	47d0      	blx	sl
 800a144:	3001      	adds	r0, #1
 800a146:	d09b      	beq.n	800a080 <_printf_i+0x164>
 800a148:	3501      	adds	r5, #1
 800a14a:	68e3      	ldr	r3, [r4, #12]
 800a14c:	9903      	ldr	r1, [sp, #12]
 800a14e:	1a5b      	subs	r3, r3, r1
 800a150:	42ab      	cmp	r3, r5
 800a152:	dcf2      	bgt.n	800a13a <_printf_i+0x21e>
 800a154:	e7eb      	b.n	800a12e <_printf_i+0x212>
 800a156:	2500      	movs	r5, #0
 800a158:	f104 0619 	add.w	r6, r4, #25
 800a15c:	e7f5      	b.n	800a14a <_printf_i+0x22e>
 800a15e:	bf00      	nop
 800a160:	0800f6c6 	.word	0x0800f6c6
 800a164:	0800f6d7 	.word	0x0800f6d7

0800a168 <siprintf>:
 800a168:	b40e      	push	{r1, r2, r3}
 800a16a:	b500      	push	{lr}
 800a16c:	b09c      	sub	sp, #112	; 0x70
 800a16e:	ab1d      	add	r3, sp, #116	; 0x74
 800a170:	9002      	str	r0, [sp, #8]
 800a172:	9006      	str	r0, [sp, #24]
 800a174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a178:	4809      	ldr	r0, [pc, #36]	; (800a1a0 <siprintf+0x38>)
 800a17a:	9107      	str	r1, [sp, #28]
 800a17c:	9104      	str	r1, [sp, #16]
 800a17e:	4909      	ldr	r1, [pc, #36]	; (800a1a4 <siprintf+0x3c>)
 800a180:	f853 2b04 	ldr.w	r2, [r3], #4
 800a184:	9105      	str	r1, [sp, #20]
 800a186:	6800      	ldr	r0, [r0, #0]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	a902      	add	r1, sp, #8
 800a18c:	f001 fb32 	bl	800b7f4 <_svfiprintf_r>
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	b01c      	add	sp, #112	; 0x70
 800a198:	f85d eb04 	ldr.w	lr, [sp], #4
 800a19c:	b003      	add	sp, #12
 800a19e:	4770      	bx	lr
 800a1a0:	2000001c 	.word	0x2000001c
 800a1a4:	ffff0208 	.word	0xffff0208

0800a1a8 <quorem>:
 800a1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	6903      	ldr	r3, [r0, #16]
 800a1ae:	690c      	ldr	r4, [r1, #16]
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	f2c0 8081 	blt.w	800a2ba <quorem+0x112>
 800a1b8:	3c01      	subs	r4, #1
 800a1ba:	f101 0814 	add.w	r8, r1, #20
 800a1be:	f100 0514 	add.w	r5, r0, #20
 800a1c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1e0:	d331      	bcc.n	800a246 <quorem+0x9e>
 800a1e2:	f04f 0e00 	mov.w	lr, #0
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	46ac      	mov	ip, r5
 800a1ea:	46f2      	mov	sl, lr
 800a1ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1f0:	b293      	uxth	r3, r2
 800a1f2:	fb06 e303 	mla	r3, r6, r3, lr
 800a1f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	ebaa 0303 	sub.w	r3, sl, r3
 800a200:	0c12      	lsrs	r2, r2, #16
 800a202:	f8dc a000 	ldr.w	sl, [ip]
 800a206:	fb06 e202 	mla	r2, r6, r2, lr
 800a20a:	fa13 f38a 	uxtah	r3, r3, sl
 800a20e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a212:	fa1f fa82 	uxth.w	sl, r2
 800a216:	f8dc 2000 	ldr.w	r2, [ip]
 800a21a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a21e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a222:	b29b      	uxth	r3, r3
 800a224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a228:	4581      	cmp	r9, r0
 800a22a:	f84c 3b04 	str.w	r3, [ip], #4
 800a22e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a232:	d2db      	bcs.n	800a1ec <quorem+0x44>
 800a234:	f855 300b 	ldr.w	r3, [r5, fp]
 800a238:	b92b      	cbnz	r3, 800a246 <quorem+0x9e>
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	3b04      	subs	r3, #4
 800a23e:	429d      	cmp	r5, r3
 800a240:	461a      	mov	r2, r3
 800a242:	d32e      	bcc.n	800a2a2 <quorem+0xfa>
 800a244:	613c      	str	r4, [r7, #16]
 800a246:	4638      	mov	r0, r7
 800a248:	f001 f8be 	bl	800b3c8 <__mcmp>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	db24      	blt.n	800a29a <quorem+0xf2>
 800a250:	3601      	adds	r6, #1
 800a252:	4628      	mov	r0, r5
 800a254:	f04f 0c00 	mov.w	ip, #0
 800a258:	f858 2b04 	ldr.w	r2, [r8], #4
 800a25c:	f8d0 e000 	ldr.w	lr, [r0]
 800a260:	b293      	uxth	r3, r2
 800a262:	ebac 0303 	sub.w	r3, ip, r3
 800a266:	0c12      	lsrs	r2, r2, #16
 800a268:	fa13 f38e 	uxtah	r3, r3, lr
 800a26c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a274:	b29b      	uxth	r3, r3
 800a276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a27a:	45c1      	cmp	r9, r8
 800a27c:	f840 3b04 	str.w	r3, [r0], #4
 800a280:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a284:	d2e8      	bcs.n	800a258 <quorem+0xb0>
 800a286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a28a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a28e:	b922      	cbnz	r2, 800a29a <quorem+0xf2>
 800a290:	3b04      	subs	r3, #4
 800a292:	429d      	cmp	r5, r3
 800a294:	461a      	mov	r2, r3
 800a296:	d30a      	bcc.n	800a2ae <quorem+0x106>
 800a298:	613c      	str	r4, [r7, #16]
 800a29a:	4630      	mov	r0, r6
 800a29c:	b003      	add	sp, #12
 800a29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a2:	6812      	ldr	r2, [r2, #0]
 800a2a4:	3b04      	subs	r3, #4
 800a2a6:	2a00      	cmp	r2, #0
 800a2a8:	d1cc      	bne.n	800a244 <quorem+0x9c>
 800a2aa:	3c01      	subs	r4, #1
 800a2ac:	e7c7      	b.n	800a23e <quorem+0x96>
 800a2ae:	6812      	ldr	r2, [r2, #0]
 800a2b0:	3b04      	subs	r3, #4
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	d1f0      	bne.n	800a298 <quorem+0xf0>
 800a2b6:	3c01      	subs	r4, #1
 800a2b8:	e7eb      	b.n	800a292 <quorem+0xea>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e7ee      	b.n	800a29c <quorem+0xf4>
	...

0800a2c0 <_dtoa_r>:
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	ed2d 8b02 	vpush	{d8}
 800a2c8:	ec57 6b10 	vmov	r6, r7, d0
 800a2cc:	b095      	sub	sp, #84	; 0x54
 800a2ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2d4:	9105      	str	r1, [sp, #20]
 800a2d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2da:	4604      	mov	r4, r0
 800a2dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2e0:	b975      	cbnz	r5, 800a300 <_dtoa_r+0x40>
 800a2e2:	2010      	movs	r0, #16
 800a2e4:	f000 fddc 	bl	800aea0 <malloc>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a2ec:	b920      	cbnz	r0, 800a2f8 <_dtoa_r+0x38>
 800a2ee:	4bb2      	ldr	r3, [pc, #712]	; (800a5b8 <_dtoa_r+0x2f8>)
 800a2f0:	21ea      	movs	r1, #234	; 0xea
 800a2f2:	48b2      	ldr	r0, [pc, #712]	; (800a5bc <_dtoa_r+0x2fc>)
 800a2f4:	f001 fb8e 	bl	800ba14 <__assert_func>
 800a2f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2fc:	6005      	str	r5, [r0, #0]
 800a2fe:	60c5      	str	r5, [r0, #12]
 800a300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	b151      	cbz	r1, 800a31c <_dtoa_r+0x5c>
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	604a      	str	r2, [r1, #4]
 800a30a:	2301      	movs	r3, #1
 800a30c:	4093      	lsls	r3, r2
 800a30e:	608b      	str	r3, [r1, #8]
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fe1b 	bl	800af4c <_Bfree>
 800a316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	1e3b      	subs	r3, r7, #0
 800a31e:	bfb9      	ittee	lt
 800a320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a324:	9303      	strlt	r3, [sp, #12]
 800a326:	2300      	movge	r3, #0
 800a328:	f8c8 3000 	strge.w	r3, [r8]
 800a32c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a330:	4ba3      	ldr	r3, [pc, #652]	; (800a5c0 <_dtoa_r+0x300>)
 800a332:	bfbc      	itt	lt
 800a334:	2201      	movlt	r2, #1
 800a336:	f8c8 2000 	strlt.w	r2, [r8]
 800a33a:	ea33 0309 	bics.w	r3, r3, r9
 800a33e:	d11b      	bne.n	800a378 <_dtoa_r+0xb8>
 800a340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a342:	f242 730f 	movw	r3, #9999	; 0x270f
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a34c:	4333      	orrs	r3, r6
 800a34e:	f000 857a 	beq.w	800ae46 <_dtoa_r+0xb86>
 800a352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a354:	b963      	cbnz	r3, 800a370 <_dtoa_r+0xb0>
 800a356:	4b9b      	ldr	r3, [pc, #620]	; (800a5c4 <_dtoa_r+0x304>)
 800a358:	e024      	b.n	800a3a4 <_dtoa_r+0xe4>
 800a35a:	4b9b      	ldr	r3, [pc, #620]	; (800a5c8 <_dtoa_r+0x308>)
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	3308      	adds	r3, #8
 800a360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	9800      	ldr	r0, [sp, #0]
 800a366:	b015      	add	sp, #84	; 0x54
 800a368:	ecbd 8b02 	vpop	{d8}
 800a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a370:	4b94      	ldr	r3, [pc, #592]	; (800a5c4 <_dtoa_r+0x304>)
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	3303      	adds	r3, #3
 800a376:	e7f3      	b.n	800a360 <_dtoa_r+0xa0>
 800a378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a37c:	2200      	movs	r2, #0
 800a37e:	ec51 0b17 	vmov	r0, r1, d7
 800a382:	2300      	movs	r3, #0
 800a384:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a388:	f7f6 fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a38c:	4680      	mov	r8, r0
 800a38e:	b158      	cbz	r0, 800a3a8 <_dtoa_r+0xe8>
 800a390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a392:	2301      	movs	r3, #1
 800a394:	6013      	str	r3, [r2, #0]
 800a396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 8551 	beq.w	800ae40 <_dtoa_r+0xb80>
 800a39e:	488b      	ldr	r0, [pc, #556]	; (800a5cc <_dtoa_r+0x30c>)
 800a3a0:	6018      	str	r0, [r3, #0]
 800a3a2:	1e43      	subs	r3, r0, #1
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	e7dd      	b.n	800a364 <_dtoa_r+0xa4>
 800a3a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a3ac:	aa12      	add	r2, sp, #72	; 0x48
 800a3ae:	a913      	add	r1, sp, #76	; 0x4c
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f001 f8ad 	bl	800b510 <__d2b>
 800a3b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a3ba:	4683      	mov	fp, r0
 800a3bc:	2d00      	cmp	r5, #0
 800a3be:	d07c      	beq.n	800a4ba <_dtoa_r+0x1fa>
 800a3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a3c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a3ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3da:	4b7d      	ldr	r3, [pc, #500]	; (800a5d0 <_dtoa_r+0x310>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4630      	mov	r0, r6
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	f7f5 ff51 	bl	8000288 <__aeabi_dsub>
 800a3e6:	a36e      	add	r3, pc, #440	; (adr r3, 800a5a0 <_dtoa_r+0x2e0>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f6 f904 	bl	80005f8 <__aeabi_dmul>
 800a3f0:	a36d      	add	r3, pc, #436	; (adr r3, 800a5a8 <_dtoa_r+0x2e8>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f5 ff49 	bl	800028c <__adddf3>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	460f      	mov	r7, r1
 800a400:	f7f6 f890 	bl	8000524 <__aeabi_i2d>
 800a404:	a36a      	add	r3, pc, #424	; (adr r3, 800a5b0 <_dtoa_r+0x2f0>)
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	f7f6 f8f5 	bl	80005f8 <__aeabi_dmul>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f5 ff39 	bl	800028c <__adddf3>
 800a41a:	4606      	mov	r6, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	f7f6 fb9b 	bl	8000b58 <__aeabi_d2iz>
 800a422:	2200      	movs	r2, #0
 800a424:	4682      	mov	sl, r0
 800a426:	2300      	movs	r3, #0
 800a428:	4630      	mov	r0, r6
 800a42a:	4639      	mov	r1, r7
 800a42c:	f7f6 fb56 	bl	8000adc <__aeabi_dcmplt>
 800a430:	b148      	cbz	r0, 800a446 <_dtoa_r+0x186>
 800a432:	4650      	mov	r0, sl
 800a434:	f7f6 f876 	bl	8000524 <__aeabi_i2d>
 800a438:	4632      	mov	r2, r6
 800a43a:	463b      	mov	r3, r7
 800a43c:	f7f6 fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 800a440:	b908      	cbnz	r0, 800a446 <_dtoa_r+0x186>
 800a442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a446:	f1ba 0f16 	cmp.w	sl, #22
 800a44a:	d854      	bhi.n	800a4f6 <_dtoa_r+0x236>
 800a44c:	4b61      	ldr	r3, [pc, #388]	; (800a5d4 <_dtoa_r+0x314>)
 800a44e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a45a:	f7f6 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d04b      	beq.n	800a4fa <_dtoa_r+0x23a>
 800a462:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a466:	2300      	movs	r3, #0
 800a468:	930e      	str	r3, [sp, #56]	; 0x38
 800a46a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a46c:	1b5d      	subs	r5, r3, r5
 800a46e:	1e6b      	subs	r3, r5, #1
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	bf43      	ittte	mi
 800a474:	2300      	movmi	r3, #0
 800a476:	f1c5 0801 	rsbmi	r8, r5, #1
 800a47a:	9304      	strmi	r3, [sp, #16]
 800a47c:	f04f 0800 	movpl.w	r8, #0
 800a480:	f1ba 0f00 	cmp.w	sl, #0
 800a484:	db3b      	blt.n	800a4fe <_dtoa_r+0x23e>
 800a486:	9b04      	ldr	r3, [sp, #16]
 800a488:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a48c:	4453      	add	r3, sl
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	2300      	movs	r3, #0
 800a492:	9306      	str	r3, [sp, #24]
 800a494:	9b05      	ldr	r3, [sp, #20]
 800a496:	2b09      	cmp	r3, #9
 800a498:	d869      	bhi.n	800a56e <_dtoa_r+0x2ae>
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	bfc4      	itt	gt
 800a49e:	3b04      	subgt	r3, #4
 800a4a0:	9305      	strgt	r3, [sp, #20]
 800a4a2:	9b05      	ldr	r3, [sp, #20]
 800a4a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a4a8:	bfcc      	ite	gt
 800a4aa:	2500      	movgt	r5, #0
 800a4ac:	2501      	movle	r5, #1
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d869      	bhi.n	800a586 <_dtoa_r+0x2c6>
 800a4b2:	e8df f003 	tbb	[pc, r3]
 800a4b6:	4e2c      	.short	0x4e2c
 800a4b8:	5a4c      	.short	0x5a4c
 800a4ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a4be:	441d      	add	r5, r3
 800a4c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4c4:	2b20      	cmp	r3, #32
 800a4c6:	bfc1      	itttt	gt
 800a4c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a4d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4d8:	bfda      	itte	le
 800a4da:	f1c3 0320 	rsble	r3, r3, #32
 800a4de:	fa06 f003 	lslle.w	r0, r6, r3
 800a4e2:	4318      	orrgt	r0, r3
 800a4e4:	f7f6 f80e 	bl	8000504 <__aeabi_ui2d>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4f0:	3d01      	subs	r5, #1
 800a4f2:	9310      	str	r3, [sp, #64]	; 0x40
 800a4f4:	e771      	b.n	800a3da <_dtoa_r+0x11a>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e7b6      	b.n	800a468 <_dtoa_r+0x1a8>
 800a4fa:	900e      	str	r0, [sp, #56]	; 0x38
 800a4fc:	e7b5      	b.n	800a46a <_dtoa_r+0x1aa>
 800a4fe:	f1ca 0300 	rsb	r3, sl, #0
 800a502:	9306      	str	r3, [sp, #24]
 800a504:	2300      	movs	r3, #0
 800a506:	eba8 080a 	sub.w	r8, r8, sl
 800a50a:	930d      	str	r3, [sp, #52]	; 0x34
 800a50c:	e7c2      	b.n	800a494 <_dtoa_r+0x1d4>
 800a50e:	2300      	movs	r3, #0
 800a510:	9308      	str	r3, [sp, #32]
 800a512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	dc39      	bgt.n	800a58c <_dtoa_r+0x2cc>
 800a518:	f04f 0901 	mov.w	r9, #1
 800a51c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a520:	464b      	mov	r3, r9
 800a522:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a526:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a528:	2200      	movs	r2, #0
 800a52a:	6042      	str	r2, [r0, #4]
 800a52c:	2204      	movs	r2, #4
 800a52e:	f102 0614 	add.w	r6, r2, #20
 800a532:	429e      	cmp	r6, r3
 800a534:	6841      	ldr	r1, [r0, #4]
 800a536:	d92f      	bls.n	800a598 <_dtoa_r+0x2d8>
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 fcc7 	bl	800aecc <_Balloc>
 800a53e:	9000      	str	r0, [sp, #0]
 800a540:	2800      	cmp	r0, #0
 800a542:	d14b      	bne.n	800a5dc <_dtoa_r+0x31c>
 800a544:	4b24      	ldr	r3, [pc, #144]	; (800a5d8 <_dtoa_r+0x318>)
 800a546:	4602      	mov	r2, r0
 800a548:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a54c:	e6d1      	b.n	800a2f2 <_dtoa_r+0x32>
 800a54e:	2301      	movs	r3, #1
 800a550:	e7de      	b.n	800a510 <_dtoa_r+0x250>
 800a552:	2300      	movs	r3, #0
 800a554:	9308      	str	r3, [sp, #32]
 800a556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a558:	eb0a 0903 	add.w	r9, sl, r3
 800a55c:	f109 0301 	add.w	r3, r9, #1
 800a560:	2b01      	cmp	r3, #1
 800a562:	9301      	str	r3, [sp, #4]
 800a564:	bfb8      	it	lt
 800a566:	2301      	movlt	r3, #1
 800a568:	e7dd      	b.n	800a526 <_dtoa_r+0x266>
 800a56a:	2301      	movs	r3, #1
 800a56c:	e7f2      	b.n	800a554 <_dtoa_r+0x294>
 800a56e:	2501      	movs	r5, #1
 800a570:	2300      	movs	r3, #0
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	9508      	str	r5, [sp, #32]
 800a576:	f04f 39ff 	mov.w	r9, #4294967295
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a580:	2312      	movs	r3, #18
 800a582:	9209      	str	r2, [sp, #36]	; 0x24
 800a584:	e7cf      	b.n	800a526 <_dtoa_r+0x266>
 800a586:	2301      	movs	r3, #1
 800a588:	9308      	str	r3, [sp, #32]
 800a58a:	e7f4      	b.n	800a576 <_dtoa_r+0x2b6>
 800a58c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a590:	f8cd 9004 	str.w	r9, [sp, #4]
 800a594:	464b      	mov	r3, r9
 800a596:	e7c6      	b.n	800a526 <_dtoa_r+0x266>
 800a598:	3101      	adds	r1, #1
 800a59a:	6041      	str	r1, [r0, #4]
 800a59c:	0052      	lsls	r2, r2, #1
 800a59e:	e7c6      	b.n	800a52e <_dtoa_r+0x26e>
 800a5a0:	636f4361 	.word	0x636f4361
 800a5a4:	3fd287a7 	.word	0x3fd287a7
 800a5a8:	8b60c8b3 	.word	0x8b60c8b3
 800a5ac:	3fc68a28 	.word	0x3fc68a28
 800a5b0:	509f79fb 	.word	0x509f79fb
 800a5b4:	3fd34413 	.word	0x3fd34413
 800a5b8:	0800f6f5 	.word	0x0800f6f5
 800a5bc:	0800f70c 	.word	0x0800f70c
 800a5c0:	7ff00000 	.word	0x7ff00000
 800a5c4:	0800f6f1 	.word	0x0800f6f1
 800a5c8:	0800f6e8 	.word	0x0800f6e8
 800a5cc:	0800f6c5 	.word	0x0800f6c5
 800a5d0:	3ff80000 	.word	0x3ff80000
 800a5d4:	0800f808 	.word	0x0800f808
 800a5d8:	0800f76b 	.word	0x0800f76b
 800a5dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5de:	9a00      	ldr	r2, [sp, #0]
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	9b01      	ldr	r3, [sp, #4]
 800a5e4:	2b0e      	cmp	r3, #14
 800a5e6:	f200 80ad 	bhi.w	800a744 <_dtoa_r+0x484>
 800a5ea:	2d00      	cmp	r5, #0
 800a5ec:	f000 80aa 	beq.w	800a744 <_dtoa_r+0x484>
 800a5f0:	f1ba 0f00 	cmp.w	sl, #0
 800a5f4:	dd36      	ble.n	800a664 <_dtoa_r+0x3a4>
 800a5f6:	4ac3      	ldr	r2, [pc, #780]	; (800a904 <_dtoa_r+0x644>)
 800a5f8:	f00a 030f 	and.w	r3, sl, #15
 800a5fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a600:	ed93 7b00 	vldr	d7, [r3]
 800a604:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a608:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a60c:	eeb0 8a47 	vmov.f32	s16, s14
 800a610:	eef0 8a67 	vmov.f32	s17, s15
 800a614:	d016      	beq.n	800a644 <_dtoa_r+0x384>
 800a616:	4bbc      	ldr	r3, [pc, #752]	; (800a908 <_dtoa_r+0x648>)
 800a618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a61c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a620:	f7f6 f914 	bl	800084c <__aeabi_ddiv>
 800a624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a628:	f007 070f 	and.w	r7, r7, #15
 800a62c:	2503      	movs	r5, #3
 800a62e:	4eb6      	ldr	r6, [pc, #728]	; (800a908 <_dtoa_r+0x648>)
 800a630:	b957      	cbnz	r7, 800a648 <_dtoa_r+0x388>
 800a632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a636:	ec53 2b18 	vmov	r2, r3, d8
 800a63a:	f7f6 f907 	bl	800084c <__aeabi_ddiv>
 800a63e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a642:	e029      	b.n	800a698 <_dtoa_r+0x3d8>
 800a644:	2502      	movs	r5, #2
 800a646:	e7f2      	b.n	800a62e <_dtoa_r+0x36e>
 800a648:	07f9      	lsls	r1, r7, #31
 800a64a:	d508      	bpl.n	800a65e <_dtoa_r+0x39e>
 800a64c:	ec51 0b18 	vmov	r0, r1, d8
 800a650:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a654:	f7f5 ffd0 	bl	80005f8 <__aeabi_dmul>
 800a658:	ec41 0b18 	vmov	d8, r0, r1
 800a65c:	3501      	adds	r5, #1
 800a65e:	107f      	asrs	r7, r7, #1
 800a660:	3608      	adds	r6, #8
 800a662:	e7e5      	b.n	800a630 <_dtoa_r+0x370>
 800a664:	f000 80a6 	beq.w	800a7b4 <_dtoa_r+0x4f4>
 800a668:	f1ca 0600 	rsb	r6, sl, #0
 800a66c:	4ba5      	ldr	r3, [pc, #660]	; (800a904 <_dtoa_r+0x644>)
 800a66e:	4fa6      	ldr	r7, [pc, #664]	; (800a908 <_dtoa_r+0x648>)
 800a670:	f006 020f 	and.w	r2, r6, #15
 800a674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a680:	f7f5 ffba 	bl	80005f8 <__aeabi_dmul>
 800a684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a688:	1136      	asrs	r6, r6, #4
 800a68a:	2300      	movs	r3, #0
 800a68c:	2502      	movs	r5, #2
 800a68e:	2e00      	cmp	r6, #0
 800a690:	f040 8085 	bne.w	800a79e <_dtoa_r+0x4de>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1d2      	bne.n	800a63e <_dtoa_r+0x37e>
 800a698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 808c 	beq.w	800a7b8 <_dtoa_r+0x4f8>
 800a6a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6a4:	4b99      	ldr	r3, [pc, #612]	; (800a90c <_dtoa_r+0x64c>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	f7f6 fa16 	bl	8000adc <__aeabi_dcmplt>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	f000 8081 	beq.w	800a7b8 <_dtoa_r+0x4f8>
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d07d      	beq.n	800a7b8 <_dtoa_r+0x4f8>
 800a6bc:	f1b9 0f00 	cmp.w	r9, #0
 800a6c0:	dd3c      	ble.n	800a73c <_dtoa_r+0x47c>
 800a6c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a6c6:	9307      	str	r3, [sp, #28]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4b91      	ldr	r3, [pc, #580]	; (800a910 <_dtoa_r+0x650>)
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f7f5 ff92 	bl	80005f8 <__aeabi_dmul>
 800a6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6d8:	3501      	adds	r5, #1
 800a6da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a6de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f7f5 ff1e 	bl	8000524 <__aeabi_i2d>
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	f7f5 ff84 	bl	80005f8 <__aeabi_dmul>
 800a6f0:	4b88      	ldr	r3, [pc, #544]	; (800a914 <_dtoa_r+0x654>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f7f5 fdca 	bl	800028c <__adddf3>
 800a6f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a704:	2b00      	cmp	r3, #0
 800a706:	d15c      	bne.n	800a7c2 <_dtoa_r+0x502>
 800a708:	4b83      	ldr	r3, [pc, #524]	; (800a918 <_dtoa_r+0x658>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f5 fdba 	bl	8000288 <__aeabi_dsub>
 800a714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a718:	4606      	mov	r6, r0
 800a71a:	460f      	mov	r7, r1
 800a71c:	f7f6 f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 800a720:	2800      	cmp	r0, #0
 800a722:	f040 8296 	bne.w	800ac52 <_dtoa_r+0x992>
 800a726:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a72a:	4630      	mov	r0, r6
 800a72c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a730:	4639      	mov	r1, r7
 800a732:	f7f6 f9d3 	bl	8000adc <__aeabi_dcmplt>
 800a736:	2800      	cmp	r0, #0
 800a738:	f040 8288 	bne.w	800ac4c <_dtoa_r+0x98c>
 800a73c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a746:	2b00      	cmp	r3, #0
 800a748:	f2c0 8158 	blt.w	800a9fc <_dtoa_r+0x73c>
 800a74c:	f1ba 0f0e 	cmp.w	sl, #14
 800a750:	f300 8154 	bgt.w	800a9fc <_dtoa_r+0x73c>
 800a754:	4b6b      	ldr	r3, [pc, #428]	; (800a904 <_dtoa_r+0x644>)
 800a756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a75a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a760:	2b00      	cmp	r3, #0
 800a762:	f280 80e3 	bge.w	800a92c <_dtoa_r+0x66c>
 800a766:	9b01      	ldr	r3, [sp, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f300 80df 	bgt.w	800a92c <_dtoa_r+0x66c>
 800a76e:	f040 826d 	bne.w	800ac4c <_dtoa_r+0x98c>
 800a772:	4b69      	ldr	r3, [pc, #420]	; (800a918 <_dtoa_r+0x658>)
 800a774:	2200      	movs	r2, #0
 800a776:	4640      	mov	r0, r8
 800a778:	4649      	mov	r1, r9
 800a77a:	f7f5 ff3d 	bl	80005f8 <__aeabi_dmul>
 800a77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a782:	f7f6 f9bf 	bl	8000b04 <__aeabi_dcmpge>
 800a786:	9e01      	ldr	r6, [sp, #4]
 800a788:	4637      	mov	r7, r6
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f040 8243 	bne.w	800ac16 <_dtoa_r+0x956>
 800a790:	9d00      	ldr	r5, [sp, #0]
 800a792:	2331      	movs	r3, #49	; 0x31
 800a794:	f805 3b01 	strb.w	r3, [r5], #1
 800a798:	f10a 0a01 	add.w	sl, sl, #1
 800a79c:	e23f      	b.n	800ac1e <_dtoa_r+0x95e>
 800a79e:	07f2      	lsls	r2, r6, #31
 800a7a0:	d505      	bpl.n	800a7ae <_dtoa_r+0x4ee>
 800a7a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a6:	f7f5 ff27 	bl	80005f8 <__aeabi_dmul>
 800a7aa:	3501      	adds	r5, #1
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	1076      	asrs	r6, r6, #1
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	e76c      	b.n	800a68e <_dtoa_r+0x3ce>
 800a7b4:	2502      	movs	r5, #2
 800a7b6:	e76f      	b.n	800a698 <_dtoa_r+0x3d8>
 800a7b8:	9b01      	ldr	r3, [sp, #4]
 800a7ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7be:	930c      	str	r3, [sp, #48]	; 0x30
 800a7c0:	e78d      	b.n	800a6de <_dtoa_r+0x41e>
 800a7c2:	9900      	ldr	r1, [sp, #0]
 800a7c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7c8:	4b4e      	ldr	r3, [pc, #312]	; (800a904 <_dtoa_r+0x644>)
 800a7ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7ce:	4401      	add	r1, r0
 800a7d0:	9102      	str	r1, [sp, #8]
 800a7d2:	9908      	ldr	r1, [sp, #32]
 800a7d4:	eeb0 8a47 	vmov.f32	s16, s14
 800a7d8:	eef0 8a67 	vmov.f32	s17, s15
 800a7dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	d045      	beq.n	800a874 <_dtoa_r+0x5b4>
 800a7e8:	494c      	ldr	r1, [pc, #304]	; (800a91c <_dtoa_r+0x65c>)
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	f7f6 f82e 	bl	800084c <__aeabi_ddiv>
 800a7f0:	ec53 2b18 	vmov	r2, r3, d8
 800a7f4:	f7f5 fd48 	bl	8000288 <__aeabi_dsub>
 800a7f8:	9d00      	ldr	r5, [sp, #0]
 800a7fa:	ec41 0b18 	vmov	d8, r0, r1
 800a7fe:	4639      	mov	r1, r7
 800a800:	4630      	mov	r0, r6
 800a802:	f7f6 f9a9 	bl	8000b58 <__aeabi_d2iz>
 800a806:	900c      	str	r0, [sp, #48]	; 0x30
 800a808:	f7f5 fe8c 	bl	8000524 <__aeabi_i2d>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f5 fd38 	bl	8000288 <__aeabi_dsub>
 800a818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a81a:	3330      	adds	r3, #48	; 0x30
 800a81c:	f805 3b01 	strb.w	r3, [r5], #1
 800a820:	ec53 2b18 	vmov	r2, r3, d8
 800a824:	4606      	mov	r6, r0
 800a826:	460f      	mov	r7, r1
 800a828:	f7f6 f958 	bl	8000adc <__aeabi_dcmplt>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d165      	bne.n	800a8fc <_dtoa_r+0x63c>
 800a830:	4632      	mov	r2, r6
 800a832:	463b      	mov	r3, r7
 800a834:	4935      	ldr	r1, [pc, #212]	; (800a90c <_dtoa_r+0x64c>)
 800a836:	2000      	movs	r0, #0
 800a838:	f7f5 fd26 	bl	8000288 <__aeabi_dsub>
 800a83c:	ec53 2b18 	vmov	r2, r3, d8
 800a840:	f7f6 f94c 	bl	8000adc <__aeabi_dcmplt>
 800a844:	2800      	cmp	r0, #0
 800a846:	f040 80b9 	bne.w	800a9bc <_dtoa_r+0x6fc>
 800a84a:	9b02      	ldr	r3, [sp, #8]
 800a84c:	429d      	cmp	r5, r3
 800a84e:	f43f af75 	beq.w	800a73c <_dtoa_r+0x47c>
 800a852:	4b2f      	ldr	r3, [pc, #188]	; (800a910 <_dtoa_r+0x650>)
 800a854:	ec51 0b18 	vmov	r0, r1, d8
 800a858:	2200      	movs	r2, #0
 800a85a:	f7f5 fecd 	bl	80005f8 <__aeabi_dmul>
 800a85e:	4b2c      	ldr	r3, [pc, #176]	; (800a910 <_dtoa_r+0x650>)
 800a860:	ec41 0b18 	vmov	d8, r0, r1
 800a864:	2200      	movs	r2, #0
 800a866:	4630      	mov	r0, r6
 800a868:	4639      	mov	r1, r7
 800a86a:	f7f5 fec5 	bl	80005f8 <__aeabi_dmul>
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	e7c4      	b.n	800a7fe <_dtoa_r+0x53e>
 800a874:	ec51 0b17 	vmov	r0, r1, d7
 800a878:	f7f5 febe 	bl	80005f8 <__aeabi_dmul>
 800a87c:	9b02      	ldr	r3, [sp, #8]
 800a87e:	9d00      	ldr	r5, [sp, #0]
 800a880:	930c      	str	r3, [sp, #48]	; 0x30
 800a882:	ec41 0b18 	vmov	d8, r0, r1
 800a886:	4639      	mov	r1, r7
 800a888:	4630      	mov	r0, r6
 800a88a:	f7f6 f965 	bl	8000b58 <__aeabi_d2iz>
 800a88e:	9011      	str	r0, [sp, #68]	; 0x44
 800a890:	f7f5 fe48 	bl	8000524 <__aeabi_i2d>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f5 fcf4 	bl	8000288 <__aeabi_dsub>
 800a8a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8a2:	3330      	adds	r3, #48	; 0x30
 800a8a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a8a8:	9b02      	ldr	r3, [sp, #8]
 800a8aa:	429d      	cmp	r5, r3
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	460f      	mov	r7, r1
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	d134      	bne.n	800a920 <_dtoa_r+0x660>
 800a8b6:	4b19      	ldr	r3, [pc, #100]	; (800a91c <_dtoa_r+0x65c>)
 800a8b8:	ec51 0b18 	vmov	r0, r1, d8
 800a8bc:	f7f5 fce6 	bl	800028c <__adddf3>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	f7f6 f926 	bl	8000b18 <__aeabi_dcmpgt>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d175      	bne.n	800a9bc <_dtoa_r+0x6fc>
 800a8d0:	ec53 2b18 	vmov	r2, r3, d8
 800a8d4:	4911      	ldr	r1, [pc, #68]	; (800a91c <_dtoa_r+0x65c>)
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	f7f5 fcd6 	bl	8000288 <__aeabi_dsub>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f6 f8fa 	bl	8000adc <__aeabi_dcmplt>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f43f af27 	beq.w	800a73c <_dtoa_r+0x47c>
 800a8ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8f0:	1e6b      	subs	r3, r5, #1
 800a8f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8f8:	2b30      	cmp	r3, #48	; 0x30
 800a8fa:	d0f8      	beq.n	800a8ee <_dtoa_r+0x62e>
 800a8fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a900:	e04a      	b.n	800a998 <_dtoa_r+0x6d8>
 800a902:	bf00      	nop
 800a904:	0800f808 	.word	0x0800f808
 800a908:	0800f7e0 	.word	0x0800f7e0
 800a90c:	3ff00000 	.word	0x3ff00000
 800a910:	40240000 	.word	0x40240000
 800a914:	401c0000 	.word	0x401c0000
 800a918:	40140000 	.word	0x40140000
 800a91c:	3fe00000 	.word	0x3fe00000
 800a920:	4baf      	ldr	r3, [pc, #700]	; (800abe0 <_dtoa_r+0x920>)
 800a922:	f7f5 fe69 	bl	80005f8 <__aeabi_dmul>
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	e7ac      	b.n	800a886 <_dtoa_r+0x5c6>
 800a92c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a930:	9d00      	ldr	r5, [sp, #0]
 800a932:	4642      	mov	r2, r8
 800a934:	464b      	mov	r3, r9
 800a936:	4630      	mov	r0, r6
 800a938:	4639      	mov	r1, r7
 800a93a:	f7f5 ff87 	bl	800084c <__aeabi_ddiv>
 800a93e:	f7f6 f90b 	bl	8000b58 <__aeabi_d2iz>
 800a942:	9002      	str	r0, [sp, #8]
 800a944:	f7f5 fdee 	bl	8000524 <__aeabi_i2d>
 800a948:	4642      	mov	r2, r8
 800a94a:	464b      	mov	r3, r9
 800a94c:	f7f5 fe54 	bl	80005f8 <__aeabi_dmul>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4630      	mov	r0, r6
 800a956:	4639      	mov	r1, r7
 800a958:	f7f5 fc96 	bl	8000288 <__aeabi_dsub>
 800a95c:	9e02      	ldr	r6, [sp, #8]
 800a95e:	9f01      	ldr	r7, [sp, #4]
 800a960:	3630      	adds	r6, #48	; 0x30
 800a962:	f805 6b01 	strb.w	r6, [r5], #1
 800a966:	9e00      	ldr	r6, [sp, #0]
 800a968:	1bae      	subs	r6, r5, r6
 800a96a:	42b7      	cmp	r7, r6
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	d137      	bne.n	800a9e2 <_dtoa_r+0x722>
 800a972:	f7f5 fc8b 	bl	800028c <__adddf3>
 800a976:	4642      	mov	r2, r8
 800a978:	464b      	mov	r3, r9
 800a97a:	4606      	mov	r6, r0
 800a97c:	460f      	mov	r7, r1
 800a97e:	f7f6 f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 800a982:	b9c8      	cbnz	r0, 800a9b8 <_dtoa_r+0x6f8>
 800a984:	4642      	mov	r2, r8
 800a986:	464b      	mov	r3, r9
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f6 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a990:	b110      	cbz	r0, 800a998 <_dtoa_r+0x6d8>
 800a992:	9b02      	ldr	r3, [sp, #8]
 800a994:	07d9      	lsls	r1, r3, #31
 800a996:	d40f      	bmi.n	800a9b8 <_dtoa_r+0x6f8>
 800a998:	4620      	mov	r0, r4
 800a99a:	4659      	mov	r1, fp
 800a99c:	f000 fad6 	bl	800af4c <_Bfree>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	702b      	strb	r3, [r5, #0]
 800a9a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9a6:	f10a 0001 	add.w	r0, sl, #1
 800a9aa:	6018      	str	r0, [r3, #0]
 800a9ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f43f acd8 	beq.w	800a364 <_dtoa_r+0xa4>
 800a9b4:	601d      	str	r5, [r3, #0]
 800a9b6:	e4d5      	b.n	800a364 <_dtoa_r+0xa4>
 800a9b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a9bc:	462b      	mov	r3, r5
 800a9be:	461d      	mov	r5, r3
 800a9c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9c4:	2a39      	cmp	r2, #57	; 0x39
 800a9c6:	d108      	bne.n	800a9da <_dtoa_r+0x71a>
 800a9c8:	9a00      	ldr	r2, [sp, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d1f7      	bne.n	800a9be <_dtoa_r+0x6fe>
 800a9ce:	9a07      	ldr	r2, [sp, #28]
 800a9d0:	9900      	ldr	r1, [sp, #0]
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	9207      	str	r2, [sp, #28]
 800a9d6:	2230      	movs	r2, #48	; 0x30
 800a9d8:	700a      	strb	r2, [r1, #0]
 800a9da:	781a      	ldrb	r2, [r3, #0]
 800a9dc:	3201      	adds	r2, #1
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	e78c      	b.n	800a8fc <_dtoa_r+0x63c>
 800a9e2:	4b7f      	ldr	r3, [pc, #508]	; (800abe0 <_dtoa_r+0x920>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f7f5 fe07 	bl	80005f8 <__aeabi_dmul>
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	f7f6 f869 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d09b      	beq.n	800a932 <_dtoa_r+0x672>
 800a9fa:	e7cd      	b.n	800a998 <_dtoa_r+0x6d8>
 800a9fc:	9a08      	ldr	r2, [sp, #32]
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	f000 80c4 	beq.w	800ab8c <_dtoa_r+0x8cc>
 800aa04:	9a05      	ldr	r2, [sp, #20]
 800aa06:	2a01      	cmp	r2, #1
 800aa08:	f300 80a8 	bgt.w	800ab5c <_dtoa_r+0x89c>
 800aa0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	f000 80a0 	beq.w	800ab54 <_dtoa_r+0x894>
 800aa14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa18:	9e06      	ldr	r6, [sp, #24]
 800aa1a:	4645      	mov	r5, r8
 800aa1c:	9a04      	ldr	r2, [sp, #16]
 800aa1e:	2101      	movs	r1, #1
 800aa20:	441a      	add	r2, r3
 800aa22:	4620      	mov	r0, r4
 800aa24:	4498      	add	r8, r3
 800aa26:	9204      	str	r2, [sp, #16]
 800aa28:	f000 fb4c 	bl	800b0c4 <__i2b>
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	dd0b      	ble.n	800aa4a <_dtoa_r+0x78a>
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd08      	ble.n	800aa4a <_dtoa_r+0x78a>
 800aa38:	42ab      	cmp	r3, r5
 800aa3a:	9a04      	ldr	r2, [sp, #16]
 800aa3c:	bfa8      	it	ge
 800aa3e:	462b      	movge	r3, r5
 800aa40:	eba8 0803 	sub.w	r8, r8, r3
 800aa44:	1aed      	subs	r5, r5, r3
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	9b06      	ldr	r3, [sp, #24]
 800aa4c:	b1fb      	cbz	r3, 800aa8e <_dtoa_r+0x7ce>
 800aa4e:	9b08      	ldr	r3, [sp, #32]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 809f 	beq.w	800ab94 <_dtoa_r+0x8d4>
 800aa56:	2e00      	cmp	r6, #0
 800aa58:	dd11      	ble.n	800aa7e <_dtoa_r+0x7be>
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 fbec 	bl	800b23c <__pow5mult>
 800aa64:	465a      	mov	r2, fp
 800aa66:	4601      	mov	r1, r0
 800aa68:	4607      	mov	r7, r0
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f000 fb40 	bl	800b0f0 <__multiply>
 800aa70:	4659      	mov	r1, fp
 800aa72:	9007      	str	r0, [sp, #28]
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 fa69 	bl	800af4c <_Bfree>
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	469b      	mov	fp, r3
 800aa7e:	9b06      	ldr	r3, [sp, #24]
 800aa80:	1b9a      	subs	r2, r3, r6
 800aa82:	d004      	beq.n	800aa8e <_dtoa_r+0x7ce>
 800aa84:	4659      	mov	r1, fp
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 fbd8 	bl	800b23c <__pow5mult>
 800aa8c:	4683      	mov	fp, r0
 800aa8e:	2101      	movs	r1, #1
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fb17 	bl	800b0c4 <__i2b>
 800aa96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	dd7c      	ble.n	800ab98 <_dtoa_r+0x8d8>
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	4601      	mov	r1, r0
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 fbca 	bl	800b23c <__pow5mult>
 800aaa8:	9b05      	ldr	r3, [sp, #20]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	4606      	mov	r6, r0
 800aaae:	dd76      	ble.n	800ab9e <_dtoa_r+0x8de>
 800aab0:	2300      	movs	r3, #0
 800aab2:	9306      	str	r3, [sp, #24]
 800aab4:	6933      	ldr	r3, [r6, #16]
 800aab6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aaba:	6918      	ldr	r0, [r3, #16]
 800aabc:	f000 fab2 	bl	800b024 <__hi0bits>
 800aac0:	f1c0 0020 	rsb	r0, r0, #32
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	4418      	add	r0, r3
 800aac8:	f010 001f 	ands.w	r0, r0, #31
 800aacc:	f000 8086 	beq.w	800abdc <_dtoa_r+0x91c>
 800aad0:	f1c0 0320 	rsb	r3, r0, #32
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	dd7f      	ble.n	800abd8 <_dtoa_r+0x918>
 800aad8:	f1c0 001c 	rsb	r0, r0, #28
 800aadc:	9b04      	ldr	r3, [sp, #16]
 800aade:	4403      	add	r3, r0
 800aae0:	4480      	add	r8, r0
 800aae2:	4405      	add	r5, r0
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	f1b8 0f00 	cmp.w	r8, #0
 800aaea:	dd05      	ble.n	800aaf8 <_dtoa_r+0x838>
 800aaec:	4659      	mov	r1, fp
 800aaee:	4642      	mov	r2, r8
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f000 fbfd 	bl	800b2f0 <__lshift>
 800aaf6:	4683      	mov	fp, r0
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	dd05      	ble.n	800ab0a <_dtoa_r+0x84a>
 800aafe:	4631      	mov	r1, r6
 800ab00:	461a      	mov	r2, r3
 800ab02:	4620      	mov	r0, r4
 800ab04:	f000 fbf4 	bl	800b2f0 <__lshift>
 800ab08:	4606      	mov	r6, r0
 800ab0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d069      	beq.n	800abe4 <_dtoa_r+0x924>
 800ab10:	4631      	mov	r1, r6
 800ab12:	4658      	mov	r0, fp
 800ab14:	f000 fc58 	bl	800b3c8 <__mcmp>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	da63      	bge.n	800abe4 <_dtoa_r+0x924>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4659      	mov	r1, fp
 800ab20:	220a      	movs	r2, #10
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 fa34 	bl	800af90 <__multadd>
 800ab28:	9b08      	ldr	r3, [sp, #32]
 800ab2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab2e:	4683      	mov	fp, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 818f 	beq.w	800ae54 <_dtoa_r+0xb94>
 800ab36:	4639      	mov	r1, r7
 800ab38:	2300      	movs	r3, #0
 800ab3a:	220a      	movs	r2, #10
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 fa27 	bl	800af90 <__multadd>
 800ab42:	f1b9 0f00 	cmp.w	r9, #0
 800ab46:	4607      	mov	r7, r0
 800ab48:	f300 808e 	bgt.w	800ac68 <_dtoa_r+0x9a8>
 800ab4c:	9b05      	ldr	r3, [sp, #20]
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	dc50      	bgt.n	800abf4 <_dtoa_r+0x934>
 800ab52:	e089      	b.n	800ac68 <_dtoa_r+0x9a8>
 800ab54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab5a:	e75d      	b.n	800aa18 <_dtoa_r+0x758>
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	1e5e      	subs	r6, r3, #1
 800ab60:	9b06      	ldr	r3, [sp, #24]
 800ab62:	42b3      	cmp	r3, r6
 800ab64:	bfbf      	itttt	lt
 800ab66:	9b06      	ldrlt	r3, [sp, #24]
 800ab68:	9606      	strlt	r6, [sp, #24]
 800ab6a:	1af2      	sublt	r2, r6, r3
 800ab6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab6e:	bfb6      	itet	lt
 800ab70:	189b      	addlt	r3, r3, r2
 800ab72:	1b9e      	subge	r6, r3, r6
 800ab74:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	bfb8      	it	lt
 800ab7a:	2600      	movlt	r6, #0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bfb5      	itete	lt
 800ab80:	eba8 0503 	sublt.w	r5, r8, r3
 800ab84:	9b01      	ldrge	r3, [sp, #4]
 800ab86:	2300      	movlt	r3, #0
 800ab88:	4645      	movge	r5, r8
 800ab8a:	e747      	b.n	800aa1c <_dtoa_r+0x75c>
 800ab8c:	9e06      	ldr	r6, [sp, #24]
 800ab8e:	9f08      	ldr	r7, [sp, #32]
 800ab90:	4645      	mov	r5, r8
 800ab92:	e74c      	b.n	800aa2e <_dtoa_r+0x76e>
 800ab94:	9a06      	ldr	r2, [sp, #24]
 800ab96:	e775      	b.n	800aa84 <_dtoa_r+0x7c4>
 800ab98:	9b05      	ldr	r3, [sp, #20]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	dc18      	bgt.n	800abd0 <_dtoa_r+0x910>
 800ab9e:	9b02      	ldr	r3, [sp, #8]
 800aba0:	b9b3      	cbnz	r3, 800abd0 <_dtoa_r+0x910>
 800aba2:	9b03      	ldr	r3, [sp, #12]
 800aba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aba8:	b9a3      	cbnz	r3, 800abd4 <_dtoa_r+0x914>
 800abaa:	9b03      	ldr	r3, [sp, #12]
 800abac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abb0:	0d1b      	lsrs	r3, r3, #20
 800abb2:	051b      	lsls	r3, r3, #20
 800abb4:	b12b      	cbz	r3, 800abc2 <_dtoa_r+0x902>
 800abb6:	9b04      	ldr	r3, [sp, #16]
 800abb8:	3301      	adds	r3, #1
 800abba:	9304      	str	r3, [sp, #16]
 800abbc:	f108 0801 	add.w	r8, r8, #1
 800abc0:	2301      	movs	r3, #1
 800abc2:	9306      	str	r3, [sp, #24]
 800abc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f47f af74 	bne.w	800aab4 <_dtoa_r+0x7f4>
 800abcc:	2001      	movs	r0, #1
 800abce:	e779      	b.n	800aac4 <_dtoa_r+0x804>
 800abd0:	2300      	movs	r3, #0
 800abd2:	e7f6      	b.n	800abc2 <_dtoa_r+0x902>
 800abd4:	9b02      	ldr	r3, [sp, #8]
 800abd6:	e7f4      	b.n	800abc2 <_dtoa_r+0x902>
 800abd8:	d085      	beq.n	800aae6 <_dtoa_r+0x826>
 800abda:	4618      	mov	r0, r3
 800abdc:	301c      	adds	r0, #28
 800abde:	e77d      	b.n	800aadc <_dtoa_r+0x81c>
 800abe0:	40240000 	.word	0x40240000
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dc38      	bgt.n	800ac5c <_dtoa_r+0x99c>
 800abea:	9b05      	ldr	r3, [sp, #20]
 800abec:	2b02      	cmp	r3, #2
 800abee:	dd35      	ble.n	800ac5c <_dtoa_r+0x99c>
 800abf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abf4:	f1b9 0f00 	cmp.w	r9, #0
 800abf8:	d10d      	bne.n	800ac16 <_dtoa_r+0x956>
 800abfa:	4631      	mov	r1, r6
 800abfc:	464b      	mov	r3, r9
 800abfe:	2205      	movs	r2, #5
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 f9c5 	bl	800af90 <__multadd>
 800ac06:	4601      	mov	r1, r0
 800ac08:	4606      	mov	r6, r0
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f000 fbdc 	bl	800b3c8 <__mcmp>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	f73f adbd 	bgt.w	800a790 <_dtoa_r+0x4d0>
 800ac16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac18:	9d00      	ldr	r5, [sp, #0]
 800ac1a:	ea6f 0a03 	mvn.w	sl, r3
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	4631      	mov	r1, r6
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 f991 	bl	800af4c <_Bfree>
 800ac2a:	2f00      	cmp	r7, #0
 800ac2c:	f43f aeb4 	beq.w	800a998 <_dtoa_r+0x6d8>
 800ac30:	f1b8 0f00 	cmp.w	r8, #0
 800ac34:	d005      	beq.n	800ac42 <_dtoa_r+0x982>
 800ac36:	45b8      	cmp	r8, r7
 800ac38:	d003      	beq.n	800ac42 <_dtoa_r+0x982>
 800ac3a:	4641      	mov	r1, r8
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f000 f985 	bl	800af4c <_Bfree>
 800ac42:	4639      	mov	r1, r7
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 f981 	bl	800af4c <_Bfree>
 800ac4a:	e6a5      	b.n	800a998 <_dtoa_r+0x6d8>
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	4637      	mov	r7, r6
 800ac50:	e7e1      	b.n	800ac16 <_dtoa_r+0x956>
 800ac52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac58:	4637      	mov	r7, r6
 800ac5a:	e599      	b.n	800a790 <_dtoa_r+0x4d0>
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 80fd 	beq.w	800ae62 <_dtoa_r+0xba2>
 800ac68:	2d00      	cmp	r5, #0
 800ac6a:	dd05      	ble.n	800ac78 <_dtoa_r+0x9b8>
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	462a      	mov	r2, r5
 800ac70:	4620      	mov	r0, r4
 800ac72:	f000 fb3d 	bl	800b2f0 <__lshift>
 800ac76:	4607      	mov	r7, r0
 800ac78:	9b06      	ldr	r3, [sp, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d05c      	beq.n	800ad38 <_dtoa_r+0xa78>
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 f923 	bl	800aecc <_Balloc>
 800ac86:	4605      	mov	r5, r0
 800ac88:	b928      	cbnz	r0, 800ac96 <_dtoa_r+0x9d6>
 800ac8a:	4b80      	ldr	r3, [pc, #512]	; (800ae8c <_dtoa_r+0xbcc>)
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac92:	f7ff bb2e 	b.w	800a2f2 <_dtoa_r+0x32>
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	3202      	adds	r2, #2
 800ac9a:	0092      	lsls	r2, r2, #2
 800ac9c:	f107 010c 	add.w	r1, r7, #12
 800aca0:	300c      	adds	r0, #12
 800aca2:	f000 f905 	bl	800aeb0 <memcpy>
 800aca6:	2201      	movs	r2, #1
 800aca8:	4629      	mov	r1, r5
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fb20 	bl	800b2f0 <__lshift>
 800acb0:	9b00      	ldr	r3, [sp, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	9b00      	ldr	r3, [sp, #0]
 800acb8:	444b      	add	r3, r9
 800acba:	9307      	str	r3, [sp, #28]
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	46b8      	mov	r8, r7
 800acc4:	9306      	str	r3, [sp, #24]
 800acc6:	4607      	mov	r7, r0
 800acc8:	9b01      	ldr	r3, [sp, #4]
 800acca:	4631      	mov	r1, r6
 800accc:	3b01      	subs	r3, #1
 800acce:	4658      	mov	r0, fp
 800acd0:	9302      	str	r3, [sp, #8]
 800acd2:	f7ff fa69 	bl	800a1a8 <quorem>
 800acd6:	4603      	mov	r3, r0
 800acd8:	3330      	adds	r3, #48	; 0x30
 800acda:	9004      	str	r0, [sp, #16]
 800acdc:	4641      	mov	r1, r8
 800acde:	4658      	mov	r0, fp
 800ace0:	9308      	str	r3, [sp, #32]
 800ace2:	f000 fb71 	bl	800b3c8 <__mcmp>
 800ace6:	463a      	mov	r2, r7
 800ace8:	4681      	mov	r9, r0
 800acea:	4631      	mov	r1, r6
 800acec:	4620      	mov	r0, r4
 800acee:	f000 fb87 	bl	800b400 <__mdiff>
 800acf2:	68c2      	ldr	r2, [r0, #12]
 800acf4:	9b08      	ldr	r3, [sp, #32]
 800acf6:	4605      	mov	r5, r0
 800acf8:	bb02      	cbnz	r2, 800ad3c <_dtoa_r+0xa7c>
 800acfa:	4601      	mov	r1, r0
 800acfc:	4658      	mov	r0, fp
 800acfe:	f000 fb63 	bl	800b3c8 <__mcmp>
 800ad02:	9b08      	ldr	r3, [sp, #32]
 800ad04:	4602      	mov	r2, r0
 800ad06:	4629      	mov	r1, r5
 800ad08:	4620      	mov	r0, r4
 800ad0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ad0e:	f000 f91d 	bl	800af4c <_Bfree>
 800ad12:	9b05      	ldr	r3, [sp, #20]
 800ad14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad16:	9d01      	ldr	r5, [sp, #4]
 800ad18:	ea43 0102 	orr.w	r1, r3, r2
 800ad1c:	9b06      	ldr	r3, [sp, #24]
 800ad1e:	430b      	orrs	r3, r1
 800ad20:	9b08      	ldr	r3, [sp, #32]
 800ad22:	d10d      	bne.n	800ad40 <_dtoa_r+0xa80>
 800ad24:	2b39      	cmp	r3, #57	; 0x39
 800ad26:	d029      	beq.n	800ad7c <_dtoa_r+0xabc>
 800ad28:	f1b9 0f00 	cmp.w	r9, #0
 800ad2c:	dd01      	ble.n	800ad32 <_dtoa_r+0xa72>
 800ad2e:	9b04      	ldr	r3, [sp, #16]
 800ad30:	3331      	adds	r3, #49	; 0x31
 800ad32:	9a02      	ldr	r2, [sp, #8]
 800ad34:	7013      	strb	r3, [r2, #0]
 800ad36:	e774      	b.n	800ac22 <_dtoa_r+0x962>
 800ad38:	4638      	mov	r0, r7
 800ad3a:	e7b9      	b.n	800acb0 <_dtoa_r+0x9f0>
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	e7e2      	b.n	800ad06 <_dtoa_r+0xa46>
 800ad40:	f1b9 0f00 	cmp.w	r9, #0
 800ad44:	db06      	blt.n	800ad54 <_dtoa_r+0xa94>
 800ad46:	9905      	ldr	r1, [sp, #20]
 800ad48:	ea41 0909 	orr.w	r9, r1, r9
 800ad4c:	9906      	ldr	r1, [sp, #24]
 800ad4e:	ea59 0101 	orrs.w	r1, r9, r1
 800ad52:	d120      	bne.n	800ad96 <_dtoa_r+0xad6>
 800ad54:	2a00      	cmp	r2, #0
 800ad56:	ddec      	ble.n	800ad32 <_dtoa_r+0xa72>
 800ad58:	4659      	mov	r1, fp
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	9301      	str	r3, [sp, #4]
 800ad60:	f000 fac6 	bl	800b2f0 <__lshift>
 800ad64:	4631      	mov	r1, r6
 800ad66:	4683      	mov	fp, r0
 800ad68:	f000 fb2e 	bl	800b3c8 <__mcmp>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	dc02      	bgt.n	800ad78 <_dtoa_r+0xab8>
 800ad72:	d1de      	bne.n	800ad32 <_dtoa_r+0xa72>
 800ad74:	07da      	lsls	r2, r3, #31
 800ad76:	d5dc      	bpl.n	800ad32 <_dtoa_r+0xa72>
 800ad78:	2b39      	cmp	r3, #57	; 0x39
 800ad7a:	d1d8      	bne.n	800ad2e <_dtoa_r+0xa6e>
 800ad7c:	9a02      	ldr	r2, [sp, #8]
 800ad7e:	2339      	movs	r3, #57	; 0x39
 800ad80:	7013      	strb	r3, [r2, #0]
 800ad82:	462b      	mov	r3, r5
 800ad84:	461d      	mov	r5, r3
 800ad86:	3b01      	subs	r3, #1
 800ad88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad8c:	2a39      	cmp	r2, #57	; 0x39
 800ad8e:	d050      	beq.n	800ae32 <_dtoa_r+0xb72>
 800ad90:	3201      	adds	r2, #1
 800ad92:	701a      	strb	r2, [r3, #0]
 800ad94:	e745      	b.n	800ac22 <_dtoa_r+0x962>
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	dd03      	ble.n	800ada2 <_dtoa_r+0xae2>
 800ad9a:	2b39      	cmp	r3, #57	; 0x39
 800ad9c:	d0ee      	beq.n	800ad7c <_dtoa_r+0xabc>
 800ad9e:	3301      	adds	r3, #1
 800ada0:	e7c7      	b.n	800ad32 <_dtoa_r+0xa72>
 800ada2:	9a01      	ldr	r2, [sp, #4]
 800ada4:	9907      	ldr	r1, [sp, #28]
 800ada6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800adaa:	428a      	cmp	r2, r1
 800adac:	d02a      	beq.n	800ae04 <_dtoa_r+0xb44>
 800adae:	4659      	mov	r1, fp
 800adb0:	2300      	movs	r3, #0
 800adb2:	220a      	movs	r2, #10
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 f8eb 	bl	800af90 <__multadd>
 800adba:	45b8      	cmp	r8, r7
 800adbc:	4683      	mov	fp, r0
 800adbe:	f04f 0300 	mov.w	r3, #0
 800adc2:	f04f 020a 	mov.w	r2, #10
 800adc6:	4641      	mov	r1, r8
 800adc8:	4620      	mov	r0, r4
 800adca:	d107      	bne.n	800addc <_dtoa_r+0xb1c>
 800adcc:	f000 f8e0 	bl	800af90 <__multadd>
 800add0:	4680      	mov	r8, r0
 800add2:	4607      	mov	r7, r0
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	3301      	adds	r3, #1
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	e775      	b.n	800acc8 <_dtoa_r+0xa08>
 800addc:	f000 f8d8 	bl	800af90 <__multadd>
 800ade0:	4639      	mov	r1, r7
 800ade2:	4680      	mov	r8, r0
 800ade4:	2300      	movs	r3, #0
 800ade6:	220a      	movs	r2, #10
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 f8d1 	bl	800af90 <__multadd>
 800adee:	4607      	mov	r7, r0
 800adf0:	e7f0      	b.n	800add4 <_dtoa_r+0xb14>
 800adf2:	f1b9 0f00 	cmp.w	r9, #0
 800adf6:	9a00      	ldr	r2, [sp, #0]
 800adf8:	bfcc      	ite	gt
 800adfa:	464d      	movgt	r5, r9
 800adfc:	2501      	movle	r5, #1
 800adfe:	4415      	add	r5, r2
 800ae00:	f04f 0800 	mov.w	r8, #0
 800ae04:	4659      	mov	r1, fp
 800ae06:	2201      	movs	r2, #1
 800ae08:	4620      	mov	r0, r4
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	f000 fa70 	bl	800b2f0 <__lshift>
 800ae10:	4631      	mov	r1, r6
 800ae12:	4683      	mov	fp, r0
 800ae14:	f000 fad8 	bl	800b3c8 <__mcmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	dcb2      	bgt.n	800ad82 <_dtoa_r+0xac2>
 800ae1c:	d102      	bne.n	800ae24 <_dtoa_r+0xb64>
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	07db      	lsls	r3, r3, #31
 800ae22:	d4ae      	bmi.n	800ad82 <_dtoa_r+0xac2>
 800ae24:	462b      	mov	r3, r5
 800ae26:	461d      	mov	r5, r3
 800ae28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae2c:	2a30      	cmp	r2, #48	; 0x30
 800ae2e:	d0fa      	beq.n	800ae26 <_dtoa_r+0xb66>
 800ae30:	e6f7      	b.n	800ac22 <_dtoa_r+0x962>
 800ae32:	9a00      	ldr	r2, [sp, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d1a5      	bne.n	800ad84 <_dtoa_r+0xac4>
 800ae38:	f10a 0a01 	add.w	sl, sl, #1
 800ae3c:	2331      	movs	r3, #49	; 0x31
 800ae3e:	e779      	b.n	800ad34 <_dtoa_r+0xa74>
 800ae40:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <_dtoa_r+0xbd0>)
 800ae42:	f7ff baaf 	b.w	800a3a4 <_dtoa_r+0xe4>
 800ae46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f47f aa86 	bne.w	800a35a <_dtoa_r+0x9a>
 800ae4e:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <_dtoa_r+0xbd4>)
 800ae50:	f7ff baa8 	b.w	800a3a4 <_dtoa_r+0xe4>
 800ae54:	f1b9 0f00 	cmp.w	r9, #0
 800ae58:	dc03      	bgt.n	800ae62 <_dtoa_r+0xba2>
 800ae5a:	9b05      	ldr	r3, [sp, #20]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	f73f aec9 	bgt.w	800abf4 <_dtoa_r+0x934>
 800ae62:	9d00      	ldr	r5, [sp, #0]
 800ae64:	4631      	mov	r1, r6
 800ae66:	4658      	mov	r0, fp
 800ae68:	f7ff f99e 	bl	800a1a8 <quorem>
 800ae6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae70:	f805 3b01 	strb.w	r3, [r5], #1
 800ae74:	9a00      	ldr	r2, [sp, #0]
 800ae76:	1aaa      	subs	r2, r5, r2
 800ae78:	4591      	cmp	r9, r2
 800ae7a:	ddba      	ble.n	800adf2 <_dtoa_r+0xb32>
 800ae7c:	4659      	mov	r1, fp
 800ae7e:	2300      	movs	r3, #0
 800ae80:	220a      	movs	r2, #10
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f884 	bl	800af90 <__multadd>
 800ae88:	4683      	mov	fp, r0
 800ae8a:	e7eb      	b.n	800ae64 <_dtoa_r+0xba4>
 800ae8c:	0800f76b 	.word	0x0800f76b
 800ae90:	0800f6c4 	.word	0x0800f6c4
 800ae94:	0800f6e8 	.word	0x0800f6e8

0800ae98 <_localeconv_r>:
 800ae98:	4800      	ldr	r0, [pc, #0]	; (800ae9c <_localeconv_r+0x4>)
 800ae9a:	4770      	bx	lr
 800ae9c:	20000170 	.word	0x20000170

0800aea0 <malloc>:
 800aea0:	4b02      	ldr	r3, [pc, #8]	; (800aeac <malloc+0xc>)
 800aea2:	4601      	mov	r1, r0
 800aea4:	6818      	ldr	r0, [r3, #0]
 800aea6:	f000 bbef 	b.w	800b688 <_malloc_r>
 800aeaa:	bf00      	nop
 800aeac:	2000001c 	.word	0x2000001c

0800aeb0 <memcpy>:
 800aeb0:	440a      	add	r2, r1
 800aeb2:	4291      	cmp	r1, r2
 800aeb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeb8:	d100      	bne.n	800aebc <memcpy+0xc>
 800aeba:	4770      	bx	lr
 800aebc:	b510      	push	{r4, lr}
 800aebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aec6:	4291      	cmp	r1, r2
 800aec8:	d1f9      	bne.n	800aebe <memcpy+0xe>
 800aeca:	bd10      	pop	{r4, pc}

0800aecc <_Balloc>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aed0:	4604      	mov	r4, r0
 800aed2:	460d      	mov	r5, r1
 800aed4:	b976      	cbnz	r6, 800aef4 <_Balloc+0x28>
 800aed6:	2010      	movs	r0, #16
 800aed8:	f7ff ffe2 	bl	800aea0 <malloc>
 800aedc:	4602      	mov	r2, r0
 800aede:	6260      	str	r0, [r4, #36]	; 0x24
 800aee0:	b920      	cbnz	r0, 800aeec <_Balloc+0x20>
 800aee2:	4b18      	ldr	r3, [pc, #96]	; (800af44 <_Balloc+0x78>)
 800aee4:	4818      	ldr	r0, [pc, #96]	; (800af48 <_Balloc+0x7c>)
 800aee6:	2166      	movs	r1, #102	; 0x66
 800aee8:	f000 fd94 	bl	800ba14 <__assert_func>
 800aeec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aef0:	6006      	str	r6, [r0, #0]
 800aef2:	60c6      	str	r6, [r0, #12]
 800aef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aef6:	68f3      	ldr	r3, [r6, #12]
 800aef8:	b183      	cbz	r3, 800af1c <_Balloc+0x50>
 800aefa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af02:	b9b8      	cbnz	r0, 800af34 <_Balloc+0x68>
 800af04:	2101      	movs	r1, #1
 800af06:	fa01 f605 	lsl.w	r6, r1, r5
 800af0a:	1d72      	adds	r2, r6, #5
 800af0c:	0092      	lsls	r2, r2, #2
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 fb5a 	bl	800b5c8 <_calloc_r>
 800af14:	b160      	cbz	r0, 800af30 <_Balloc+0x64>
 800af16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af1a:	e00e      	b.n	800af3a <_Balloc+0x6e>
 800af1c:	2221      	movs	r2, #33	; 0x21
 800af1e:	2104      	movs	r1, #4
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fb51 	bl	800b5c8 <_calloc_r>
 800af26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af28:	60f0      	str	r0, [r6, #12]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e4      	bne.n	800aefa <_Balloc+0x2e>
 800af30:	2000      	movs	r0, #0
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	6802      	ldr	r2, [r0, #0]
 800af36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af3a:	2300      	movs	r3, #0
 800af3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af40:	e7f7      	b.n	800af32 <_Balloc+0x66>
 800af42:	bf00      	nop
 800af44:	0800f6f5 	.word	0x0800f6f5
 800af48:	0800f77c 	.word	0x0800f77c

0800af4c <_Bfree>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af50:	4605      	mov	r5, r0
 800af52:	460c      	mov	r4, r1
 800af54:	b976      	cbnz	r6, 800af74 <_Bfree+0x28>
 800af56:	2010      	movs	r0, #16
 800af58:	f7ff ffa2 	bl	800aea0 <malloc>
 800af5c:	4602      	mov	r2, r0
 800af5e:	6268      	str	r0, [r5, #36]	; 0x24
 800af60:	b920      	cbnz	r0, 800af6c <_Bfree+0x20>
 800af62:	4b09      	ldr	r3, [pc, #36]	; (800af88 <_Bfree+0x3c>)
 800af64:	4809      	ldr	r0, [pc, #36]	; (800af8c <_Bfree+0x40>)
 800af66:	218a      	movs	r1, #138	; 0x8a
 800af68:	f000 fd54 	bl	800ba14 <__assert_func>
 800af6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af70:	6006      	str	r6, [r0, #0]
 800af72:	60c6      	str	r6, [r0, #12]
 800af74:	b13c      	cbz	r4, 800af86 <_Bfree+0x3a>
 800af76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af78:	6862      	ldr	r2, [r4, #4]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af80:	6021      	str	r1, [r4, #0]
 800af82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	0800f6f5 	.word	0x0800f6f5
 800af8c:	0800f77c 	.word	0x0800f77c

0800af90 <__multadd>:
 800af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af94:	690e      	ldr	r6, [r1, #16]
 800af96:	4607      	mov	r7, r0
 800af98:	4698      	mov	r8, r3
 800af9a:	460c      	mov	r4, r1
 800af9c:	f101 0014 	add.w	r0, r1, #20
 800afa0:	2300      	movs	r3, #0
 800afa2:	6805      	ldr	r5, [r0, #0]
 800afa4:	b2a9      	uxth	r1, r5
 800afa6:	fb02 8101 	mla	r1, r2, r1, r8
 800afaa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800afae:	0c2d      	lsrs	r5, r5, #16
 800afb0:	fb02 c505 	mla	r5, r2, r5, ip
 800afb4:	b289      	uxth	r1, r1
 800afb6:	3301      	adds	r3, #1
 800afb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800afbc:	429e      	cmp	r6, r3
 800afbe:	f840 1b04 	str.w	r1, [r0], #4
 800afc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800afc6:	dcec      	bgt.n	800afa2 <__multadd+0x12>
 800afc8:	f1b8 0f00 	cmp.w	r8, #0
 800afcc:	d022      	beq.n	800b014 <__multadd+0x84>
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	42b3      	cmp	r3, r6
 800afd2:	dc19      	bgt.n	800b008 <__multadd+0x78>
 800afd4:	6861      	ldr	r1, [r4, #4]
 800afd6:	4638      	mov	r0, r7
 800afd8:	3101      	adds	r1, #1
 800afda:	f7ff ff77 	bl	800aecc <_Balloc>
 800afde:	4605      	mov	r5, r0
 800afe0:	b928      	cbnz	r0, 800afee <__multadd+0x5e>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <__multadd+0x8c>)
 800afe6:	480e      	ldr	r0, [pc, #56]	; (800b020 <__multadd+0x90>)
 800afe8:	21b5      	movs	r1, #181	; 0xb5
 800afea:	f000 fd13 	bl	800ba14 <__assert_func>
 800afee:	6922      	ldr	r2, [r4, #16]
 800aff0:	3202      	adds	r2, #2
 800aff2:	f104 010c 	add.w	r1, r4, #12
 800aff6:	0092      	lsls	r2, r2, #2
 800aff8:	300c      	adds	r0, #12
 800affa:	f7ff ff59 	bl	800aeb0 <memcpy>
 800affe:	4621      	mov	r1, r4
 800b000:	4638      	mov	r0, r7
 800b002:	f7ff ffa3 	bl	800af4c <_Bfree>
 800b006:	462c      	mov	r4, r5
 800b008:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b00c:	3601      	adds	r6, #1
 800b00e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b012:	6126      	str	r6, [r4, #16]
 800b014:	4620      	mov	r0, r4
 800b016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b01a:	bf00      	nop
 800b01c:	0800f76b 	.word	0x0800f76b
 800b020:	0800f77c 	.word	0x0800f77c

0800b024 <__hi0bits>:
 800b024:	0c03      	lsrs	r3, r0, #16
 800b026:	041b      	lsls	r3, r3, #16
 800b028:	b9d3      	cbnz	r3, 800b060 <__hi0bits+0x3c>
 800b02a:	0400      	lsls	r0, r0, #16
 800b02c:	2310      	movs	r3, #16
 800b02e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b032:	bf04      	itt	eq
 800b034:	0200      	lsleq	r0, r0, #8
 800b036:	3308      	addeq	r3, #8
 800b038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b03c:	bf04      	itt	eq
 800b03e:	0100      	lsleq	r0, r0, #4
 800b040:	3304      	addeq	r3, #4
 800b042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b046:	bf04      	itt	eq
 800b048:	0080      	lsleq	r0, r0, #2
 800b04a:	3302      	addeq	r3, #2
 800b04c:	2800      	cmp	r0, #0
 800b04e:	db05      	blt.n	800b05c <__hi0bits+0x38>
 800b050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b054:	f103 0301 	add.w	r3, r3, #1
 800b058:	bf08      	it	eq
 800b05a:	2320      	moveq	r3, #32
 800b05c:	4618      	mov	r0, r3
 800b05e:	4770      	bx	lr
 800b060:	2300      	movs	r3, #0
 800b062:	e7e4      	b.n	800b02e <__hi0bits+0xa>

0800b064 <__lo0bits>:
 800b064:	6803      	ldr	r3, [r0, #0]
 800b066:	f013 0207 	ands.w	r2, r3, #7
 800b06a:	4601      	mov	r1, r0
 800b06c:	d00b      	beq.n	800b086 <__lo0bits+0x22>
 800b06e:	07da      	lsls	r2, r3, #31
 800b070:	d424      	bmi.n	800b0bc <__lo0bits+0x58>
 800b072:	0798      	lsls	r0, r3, #30
 800b074:	bf49      	itett	mi
 800b076:	085b      	lsrmi	r3, r3, #1
 800b078:	089b      	lsrpl	r3, r3, #2
 800b07a:	2001      	movmi	r0, #1
 800b07c:	600b      	strmi	r3, [r1, #0]
 800b07e:	bf5c      	itt	pl
 800b080:	600b      	strpl	r3, [r1, #0]
 800b082:	2002      	movpl	r0, #2
 800b084:	4770      	bx	lr
 800b086:	b298      	uxth	r0, r3
 800b088:	b9b0      	cbnz	r0, 800b0b8 <__lo0bits+0x54>
 800b08a:	0c1b      	lsrs	r3, r3, #16
 800b08c:	2010      	movs	r0, #16
 800b08e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b092:	bf04      	itt	eq
 800b094:	0a1b      	lsreq	r3, r3, #8
 800b096:	3008      	addeq	r0, #8
 800b098:	071a      	lsls	r2, r3, #28
 800b09a:	bf04      	itt	eq
 800b09c:	091b      	lsreq	r3, r3, #4
 800b09e:	3004      	addeq	r0, #4
 800b0a0:	079a      	lsls	r2, r3, #30
 800b0a2:	bf04      	itt	eq
 800b0a4:	089b      	lsreq	r3, r3, #2
 800b0a6:	3002      	addeq	r0, #2
 800b0a8:	07da      	lsls	r2, r3, #31
 800b0aa:	d403      	bmi.n	800b0b4 <__lo0bits+0x50>
 800b0ac:	085b      	lsrs	r3, r3, #1
 800b0ae:	f100 0001 	add.w	r0, r0, #1
 800b0b2:	d005      	beq.n	800b0c0 <__lo0bits+0x5c>
 800b0b4:	600b      	str	r3, [r1, #0]
 800b0b6:	4770      	bx	lr
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	e7e8      	b.n	800b08e <__lo0bits+0x2a>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	4770      	bx	lr
 800b0c0:	2020      	movs	r0, #32
 800b0c2:	4770      	bx	lr

0800b0c4 <__i2b>:
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	f7ff feff 	bl	800aecc <_Balloc>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	b928      	cbnz	r0, 800b0de <__i2b+0x1a>
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <__i2b+0x24>)
 800b0d4:	4805      	ldr	r0, [pc, #20]	; (800b0ec <__i2b+0x28>)
 800b0d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0da:	f000 fc9b 	bl	800ba14 <__assert_func>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	6144      	str	r4, [r0, #20]
 800b0e2:	6103      	str	r3, [r0, #16]
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0800f76b 	.word	0x0800f76b
 800b0ec:	0800f77c 	.word	0x0800f77c

0800b0f0 <__multiply>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	690a      	ldr	r2, [r1, #16]
 800b0f8:	6923      	ldr	r3, [r4, #16]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	bfb8      	it	lt
 800b0fe:	460b      	movlt	r3, r1
 800b100:	460d      	mov	r5, r1
 800b102:	bfbc      	itt	lt
 800b104:	4625      	movlt	r5, r4
 800b106:	461c      	movlt	r4, r3
 800b108:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b10c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b110:	68ab      	ldr	r3, [r5, #8]
 800b112:	6869      	ldr	r1, [r5, #4]
 800b114:	eb0a 0709 	add.w	r7, sl, r9
 800b118:	42bb      	cmp	r3, r7
 800b11a:	b085      	sub	sp, #20
 800b11c:	bfb8      	it	lt
 800b11e:	3101      	addlt	r1, #1
 800b120:	f7ff fed4 	bl	800aecc <_Balloc>
 800b124:	b930      	cbnz	r0, 800b134 <__multiply+0x44>
 800b126:	4602      	mov	r2, r0
 800b128:	4b42      	ldr	r3, [pc, #264]	; (800b234 <__multiply+0x144>)
 800b12a:	4843      	ldr	r0, [pc, #268]	; (800b238 <__multiply+0x148>)
 800b12c:	f240 115d 	movw	r1, #349	; 0x15d
 800b130:	f000 fc70 	bl	800ba14 <__assert_func>
 800b134:	f100 0614 	add.w	r6, r0, #20
 800b138:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b13c:	4633      	mov	r3, r6
 800b13e:	2200      	movs	r2, #0
 800b140:	4543      	cmp	r3, r8
 800b142:	d31e      	bcc.n	800b182 <__multiply+0x92>
 800b144:	f105 0c14 	add.w	ip, r5, #20
 800b148:	f104 0314 	add.w	r3, r4, #20
 800b14c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b150:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b154:	9202      	str	r2, [sp, #8]
 800b156:	ebac 0205 	sub.w	r2, ip, r5
 800b15a:	3a15      	subs	r2, #21
 800b15c:	f022 0203 	bic.w	r2, r2, #3
 800b160:	3204      	adds	r2, #4
 800b162:	f105 0115 	add.w	r1, r5, #21
 800b166:	458c      	cmp	ip, r1
 800b168:	bf38      	it	cc
 800b16a:	2204      	movcc	r2, #4
 800b16c:	9201      	str	r2, [sp, #4]
 800b16e:	9a02      	ldr	r2, [sp, #8]
 800b170:	9303      	str	r3, [sp, #12]
 800b172:	429a      	cmp	r2, r3
 800b174:	d808      	bhi.n	800b188 <__multiply+0x98>
 800b176:	2f00      	cmp	r7, #0
 800b178:	dc55      	bgt.n	800b226 <__multiply+0x136>
 800b17a:	6107      	str	r7, [r0, #16]
 800b17c:	b005      	add	sp, #20
 800b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b182:	f843 2b04 	str.w	r2, [r3], #4
 800b186:	e7db      	b.n	800b140 <__multiply+0x50>
 800b188:	f8b3 a000 	ldrh.w	sl, [r3]
 800b18c:	f1ba 0f00 	cmp.w	sl, #0
 800b190:	d020      	beq.n	800b1d4 <__multiply+0xe4>
 800b192:	f105 0e14 	add.w	lr, r5, #20
 800b196:	46b1      	mov	r9, r6
 800b198:	2200      	movs	r2, #0
 800b19a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b19e:	f8d9 b000 	ldr.w	fp, [r9]
 800b1a2:	b2a1      	uxth	r1, r4
 800b1a4:	fa1f fb8b 	uxth.w	fp, fp
 800b1a8:	fb0a b101 	mla	r1, sl, r1, fp
 800b1ac:	4411      	add	r1, r2
 800b1ae:	f8d9 2000 	ldr.w	r2, [r9]
 800b1b2:	0c24      	lsrs	r4, r4, #16
 800b1b4:	0c12      	lsrs	r2, r2, #16
 800b1b6:	fb0a 2404 	mla	r4, sl, r4, r2
 800b1ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b1be:	b289      	uxth	r1, r1
 800b1c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1c4:	45f4      	cmp	ip, lr
 800b1c6:	f849 1b04 	str.w	r1, [r9], #4
 800b1ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b1ce:	d8e4      	bhi.n	800b19a <__multiply+0xaa>
 800b1d0:	9901      	ldr	r1, [sp, #4]
 800b1d2:	5072      	str	r2, [r6, r1]
 800b1d4:	9a03      	ldr	r2, [sp, #12]
 800b1d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	f1b9 0f00 	cmp.w	r9, #0
 800b1e0:	d01f      	beq.n	800b222 <__multiply+0x132>
 800b1e2:	6834      	ldr	r4, [r6, #0]
 800b1e4:	f105 0114 	add.w	r1, r5, #20
 800b1e8:	46b6      	mov	lr, r6
 800b1ea:	f04f 0a00 	mov.w	sl, #0
 800b1ee:	880a      	ldrh	r2, [r1, #0]
 800b1f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b1f4:	fb09 b202 	mla	r2, r9, r2, fp
 800b1f8:	4492      	add	sl, r2
 800b1fa:	b2a4      	uxth	r4, r4
 800b1fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b200:	f84e 4b04 	str.w	r4, [lr], #4
 800b204:	f851 4b04 	ldr.w	r4, [r1], #4
 800b208:	f8be 2000 	ldrh.w	r2, [lr]
 800b20c:	0c24      	lsrs	r4, r4, #16
 800b20e:	fb09 2404 	mla	r4, r9, r4, r2
 800b212:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b216:	458c      	cmp	ip, r1
 800b218:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b21c:	d8e7      	bhi.n	800b1ee <__multiply+0xfe>
 800b21e:	9a01      	ldr	r2, [sp, #4]
 800b220:	50b4      	str	r4, [r6, r2]
 800b222:	3604      	adds	r6, #4
 800b224:	e7a3      	b.n	800b16e <__multiply+0x7e>
 800b226:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1a5      	bne.n	800b17a <__multiply+0x8a>
 800b22e:	3f01      	subs	r7, #1
 800b230:	e7a1      	b.n	800b176 <__multiply+0x86>
 800b232:	bf00      	nop
 800b234:	0800f76b 	.word	0x0800f76b
 800b238:	0800f77c 	.word	0x0800f77c

0800b23c <__pow5mult>:
 800b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	4615      	mov	r5, r2
 800b242:	f012 0203 	ands.w	r2, r2, #3
 800b246:	4606      	mov	r6, r0
 800b248:	460f      	mov	r7, r1
 800b24a:	d007      	beq.n	800b25c <__pow5mult+0x20>
 800b24c:	4c25      	ldr	r4, [pc, #148]	; (800b2e4 <__pow5mult+0xa8>)
 800b24e:	3a01      	subs	r2, #1
 800b250:	2300      	movs	r3, #0
 800b252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b256:	f7ff fe9b 	bl	800af90 <__multadd>
 800b25a:	4607      	mov	r7, r0
 800b25c:	10ad      	asrs	r5, r5, #2
 800b25e:	d03d      	beq.n	800b2dc <__pow5mult+0xa0>
 800b260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b262:	b97c      	cbnz	r4, 800b284 <__pow5mult+0x48>
 800b264:	2010      	movs	r0, #16
 800b266:	f7ff fe1b 	bl	800aea0 <malloc>
 800b26a:	4602      	mov	r2, r0
 800b26c:	6270      	str	r0, [r6, #36]	; 0x24
 800b26e:	b928      	cbnz	r0, 800b27c <__pow5mult+0x40>
 800b270:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <__pow5mult+0xac>)
 800b272:	481e      	ldr	r0, [pc, #120]	; (800b2ec <__pow5mult+0xb0>)
 800b274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b278:	f000 fbcc 	bl	800ba14 <__assert_func>
 800b27c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b280:	6004      	str	r4, [r0, #0]
 800b282:	60c4      	str	r4, [r0, #12]
 800b284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b28c:	b94c      	cbnz	r4, 800b2a2 <__pow5mult+0x66>
 800b28e:	f240 2171 	movw	r1, #625	; 0x271
 800b292:	4630      	mov	r0, r6
 800b294:	f7ff ff16 	bl	800b0c4 <__i2b>
 800b298:	2300      	movs	r3, #0
 800b29a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b29e:	4604      	mov	r4, r0
 800b2a0:	6003      	str	r3, [r0, #0]
 800b2a2:	f04f 0900 	mov.w	r9, #0
 800b2a6:	07eb      	lsls	r3, r5, #31
 800b2a8:	d50a      	bpl.n	800b2c0 <__pow5mult+0x84>
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7ff ff1e 	bl	800b0f0 <__multiply>
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f7ff fe47 	bl	800af4c <_Bfree>
 800b2be:	4647      	mov	r7, r8
 800b2c0:	106d      	asrs	r5, r5, #1
 800b2c2:	d00b      	beq.n	800b2dc <__pow5mult+0xa0>
 800b2c4:	6820      	ldr	r0, [r4, #0]
 800b2c6:	b938      	cbnz	r0, 800b2d8 <__pow5mult+0x9c>
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f7ff ff0f 	bl	800b0f0 <__multiply>
 800b2d2:	6020      	str	r0, [r4, #0]
 800b2d4:	f8c0 9000 	str.w	r9, [r0]
 800b2d8:	4604      	mov	r4, r0
 800b2da:	e7e4      	b.n	800b2a6 <__pow5mult+0x6a>
 800b2dc:	4638      	mov	r0, r7
 800b2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e2:	bf00      	nop
 800b2e4:	0800f8d0 	.word	0x0800f8d0
 800b2e8:	0800f6f5 	.word	0x0800f6f5
 800b2ec:	0800f77c 	.word	0x0800f77c

0800b2f0 <__lshift>:
 800b2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	6849      	ldr	r1, [r1, #4]
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2fe:	68a3      	ldr	r3, [r4, #8]
 800b300:	4607      	mov	r7, r0
 800b302:	4691      	mov	r9, r2
 800b304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b308:	f108 0601 	add.w	r6, r8, #1
 800b30c:	42b3      	cmp	r3, r6
 800b30e:	db0b      	blt.n	800b328 <__lshift+0x38>
 800b310:	4638      	mov	r0, r7
 800b312:	f7ff fddb 	bl	800aecc <_Balloc>
 800b316:	4605      	mov	r5, r0
 800b318:	b948      	cbnz	r0, 800b32e <__lshift+0x3e>
 800b31a:	4602      	mov	r2, r0
 800b31c:	4b28      	ldr	r3, [pc, #160]	; (800b3c0 <__lshift+0xd0>)
 800b31e:	4829      	ldr	r0, [pc, #164]	; (800b3c4 <__lshift+0xd4>)
 800b320:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b324:	f000 fb76 	bl	800ba14 <__assert_func>
 800b328:	3101      	adds	r1, #1
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	e7ee      	b.n	800b30c <__lshift+0x1c>
 800b32e:	2300      	movs	r3, #0
 800b330:	f100 0114 	add.w	r1, r0, #20
 800b334:	f100 0210 	add.w	r2, r0, #16
 800b338:	4618      	mov	r0, r3
 800b33a:	4553      	cmp	r3, sl
 800b33c:	db33      	blt.n	800b3a6 <__lshift+0xb6>
 800b33e:	6920      	ldr	r0, [r4, #16]
 800b340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b344:	f104 0314 	add.w	r3, r4, #20
 800b348:	f019 091f 	ands.w	r9, r9, #31
 800b34c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b354:	d02b      	beq.n	800b3ae <__lshift+0xbe>
 800b356:	f1c9 0e20 	rsb	lr, r9, #32
 800b35a:	468a      	mov	sl, r1
 800b35c:	2200      	movs	r2, #0
 800b35e:	6818      	ldr	r0, [r3, #0]
 800b360:	fa00 f009 	lsl.w	r0, r0, r9
 800b364:	4302      	orrs	r2, r0
 800b366:	f84a 2b04 	str.w	r2, [sl], #4
 800b36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36e:	459c      	cmp	ip, r3
 800b370:	fa22 f20e 	lsr.w	r2, r2, lr
 800b374:	d8f3      	bhi.n	800b35e <__lshift+0x6e>
 800b376:	ebac 0304 	sub.w	r3, ip, r4
 800b37a:	3b15      	subs	r3, #21
 800b37c:	f023 0303 	bic.w	r3, r3, #3
 800b380:	3304      	adds	r3, #4
 800b382:	f104 0015 	add.w	r0, r4, #21
 800b386:	4584      	cmp	ip, r0
 800b388:	bf38      	it	cc
 800b38a:	2304      	movcc	r3, #4
 800b38c:	50ca      	str	r2, [r1, r3]
 800b38e:	b10a      	cbz	r2, 800b394 <__lshift+0xa4>
 800b390:	f108 0602 	add.w	r6, r8, #2
 800b394:	3e01      	subs	r6, #1
 800b396:	4638      	mov	r0, r7
 800b398:	612e      	str	r6, [r5, #16]
 800b39a:	4621      	mov	r1, r4
 800b39c:	f7ff fdd6 	bl	800af4c <_Bfree>
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	e7c5      	b.n	800b33a <__lshift+0x4a>
 800b3ae:	3904      	subs	r1, #4
 800b3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3b8:	459c      	cmp	ip, r3
 800b3ba:	d8f9      	bhi.n	800b3b0 <__lshift+0xc0>
 800b3bc:	e7ea      	b.n	800b394 <__lshift+0xa4>
 800b3be:	bf00      	nop
 800b3c0:	0800f76b 	.word	0x0800f76b
 800b3c4:	0800f77c 	.word	0x0800f77c

0800b3c8 <__mcmp>:
 800b3c8:	b530      	push	{r4, r5, lr}
 800b3ca:	6902      	ldr	r2, [r0, #16]
 800b3cc:	690c      	ldr	r4, [r1, #16]
 800b3ce:	1b12      	subs	r2, r2, r4
 800b3d0:	d10e      	bne.n	800b3f0 <__mcmp+0x28>
 800b3d2:	f100 0314 	add.w	r3, r0, #20
 800b3d6:	3114      	adds	r1, #20
 800b3d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3e8:	42a5      	cmp	r5, r4
 800b3ea:	d003      	beq.n	800b3f4 <__mcmp+0x2c>
 800b3ec:	d305      	bcc.n	800b3fa <__mcmp+0x32>
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	bd30      	pop	{r4, r5, pc}
 800b3f4:	4283      	cmp	r3, r0
 800b3f6:	d3f3      	bcc.n	800b3e0 <__mcmp+0x18>
 800b3f8:	e7fa      	b.n	800b3f0 <__mcmp+0x28>
 800b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fe:	e7f7      	b.n	800b3f0 <__mcmp+0x28>

0800b400 <__mdiff>:
 800b400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	4606      	mov	r6, r0
 800b408:	4611      	mov	r1, r2
 800b40a:	4620      	mov	r0, r4
 800b40c:	4617      	mov	r7, r2
 800b40e:	f7ff ffdb 	bl	800b3c8 <__mcmp>
 800b412:	1e05      	subs	r5, r0, #0
 800b414:	d110      	bne.n	800b438 <__mdiff+0x38>
 800b416:	4629      	mov	r1, r5
 800b418:	4630      	mov	r0, r6
 800b41a:	f7ff fd57 	bl	800aecc <_Balloc>
 800b41e:	b930      	cbnz	r0, 800b42e <__mdiff+0x2e>
 800b420:	4b39      	ldr	r3, [pc, #228]	; (800b508 <__mdiff+0x108>)
 800b422:	4602      	mov	r2, r0
 800b424:	f240 2132 	movw	r1, #562	; 0x232
 800b428:	4838      	ldr	r0, [pc, #224]	; (800b50c <__mdiff+0x10c>)
 800b42a:	f000 faf3 	bl	800ba14 <__assert_func>
 800b42e:	2301      	movs	r3, #1
 800b430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	bfa4      	itt	ge
 800b43a:	463b      	movge	r3, r7
 800b43c:	4627      	movge	r7, r4
 800b43e:	4630      	mov	r0, r6
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	bfa6      	itte	ge
 800b444:	461c      	movge	r4, r3
 800b446:	2500      	movge	r5, #0
 800b448:	2501      	movlt	r5, #1
 800b44a:	f7ff fd3f 	bl	800aecc <_Balloc>
 800b44e:	b920      	cbnz	r0, 800b45a <__mdiff+0x5a>
 800b450:	4b2d      	ldr	r3, [pc, #180]	; (800b508 <__mdiff+0x108>)
 800b452:	4602      	mov	r2, r0
 800b454:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b458:	e7e6      	b.n	800b428 <__mdiff+0x28>
 800b45a:	693e      	ldr	r6, [r7, #16]
 800b45c:	60c5      	str	r5, [r0, #12]
 800b45e:	6925      	ldr	r5, [r4, #16]
 800b460:	f107 0114 	add.w	r1, r7, #20
 800b464:	f104 0914 	add.w	r9, r4, #20
 800b468:	f100 0e14 	add.w	lr, r0, #20
 800b46c:	f107 0210 	add.w	r2, r7, #16
 800b470:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b474:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b478:	46f2      	mov	sl, lr
 800b47a:	2700      	movs	r7, #0
 800b47c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b484:	fa1f f883 	uxth.w	r8, r3
 800b488:	fa17 f78b 	uxtah	r7, r7, fp
 800b48c:	0c1b      	lsrs	r3, r3, #16
 800b48e:	eba7 0808 	sub.w	r8, r7, r8
 800b492:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b496:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b49a:	fa1f f888 	uxth.w	r8, r8
 800b49e:	141f      	asrs	r7, r3, #16
 800b4a0:	454d      	cmp	r5, r9
 800b4a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4a6:	f84a 3b04 	str.w	r3, [sl], #4
 800b4aa:	d8e7      	bhi.n	800b47c <__mdiff+0x7c>
 800b4ac:	1b2b      	subs	r3, r5, r4
 800b4ae:	3b15      	subs	r3, #21
 800b4b0:	f023 0303 	bic.w	r3, r3, #3
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	3415      	adds	r4, #21
 800b4b8:	42a5      	cmp	r5, r4
 800b4ba:	bf38      	it	cc
 800b4bc:	2304      	movcc	r3, #4
 800b4be:	4419      	add	r1, r3
 800b4c0:	4473      	add	r3, lr
 800b4c2:	469e      	mov	lr, r3
 800b4c4:	460d      	mov	r5, r1
 800b4c6:	4565      	cmp	r5, ip
 800b4c8:	d30e      	bcc.n	800b4e8 <__mdiff+0xe8>
 800b4ca:	f10c 0203 	add.w	r2, ip, #3
 800b4ce:	1a52      	subs	r2, r2, r1
 800b4d0:	f022 0203 	bic.w	r2, r2, #3
 800b4d4:	3903      	subs	r1, #3
 800b4d6:	458c      	cmp	ip, r1
 800b4d8:	bf38      	it	cc
 800b4da:	2200      	movcc	r2, #0
 800b4dc:	441a      	add	r2, r3
 800b4de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4e2:	b17b      	cbz	r3, 800b504 <__mdiff+0x104>
 800b4e4:	6106      	str	r6, [r0, #16]
 800b4e6:	e7a5      	b.n	800b434 <__mdiff+0x34>
 800b4e8:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4ec:	fa17 f488 	uxtah	r4, r7, r8
 800b4f0:	1422      	asrs	r2, r4, #16
 800b4f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b4f6:	b2a4      	uxth	r4, r4
 800b4f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b4fc:	f84e 4b04 	str.w	r4, [lr], #4
 800b500:	1417      	asrs	r7, r2, #16
 800b502:	e7e0      	b.n	800b4c6 <__mdiff+0xc6>
 800b504:	3e01      	subs	r6, #1
 800b506:	e7ea      	b.n	800b4de <__mdiff+0xde>
 800b508:	0800f76b 	.word	0x0800f76b
 800b50c:	0800f77c 	.word	0x0800f77c

0800b510 <__d2b>:
 800b510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b514:	4689      	mov	r9, r1
 800b516:	2101      	movs	r1, #1
 800b518:	ec57 6b10 	vmov	r6, r7, d0
 800b51c:	4690      	mov	r8, r2
 800b51e:	f7ff fcd5 	bl	800aecc <_Balloc>
 800b522:	4604      	mov	r4, r0
 800b524:	b930      	cbnz	r0, 800b534 <__d2b+0x24>
 800b526:	4602      	mov	r2, r0
 800b528:	4b25      	ldr	r3, [pc, #148]	; (800b5c0 <__d2b+0xb0>)
 800b52a:	4826      	ldr	r0, [pc, #152]	; (800b5c4 <__d2b+0xb4>)
 800b52c:	f240 310a 	movw	r1, #778	; 0x30a
 800b530:	f000 fa70 	bl	800ba14 <__assert_func>
 800b534:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b53c:	bb35      	cbnz	r5, 800b58c <__d2b+0x7c>
 800b53e:	2e00      	cmp	r6, #0
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	d028      	beq.n	800b596 <__d2b+0x86>
 800b544:	4668      	mov	r0, sp
 800b546:	9600      	str	r6, [sp, #0]
 800b548:	f7ff fd8c 	bl	800b064 <__lo0bits>
 800b54c:	9900      	ldr	r1, [sp, #0]
 800b54e:	b300      	cbz	r0, 800b592 <__d2b+0x82>
 800b550:	9a01      	ldr	r2, [sp, #4]
 800b552:	f1c0 0320 	rsb	r3, r0, #32
 800b556:	fa02 f303 	lsl.w	r3, r2, r3
 800b55a:	430b      	orrs	r3, r1
 800b55c:	40c2      	lsrs	r2, r0
 800b55e:	6163      	str	r3, [r4, #20]
 800b560:	9201      	str	r2, [sp, #4]
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	61a3      	str	r3, [r4, #24]
 800b566:	2b00      	cmp	r3, #0
 800b568:	bf14      	ite	ne
 800b56a:	2202      	movne	r2, #2
 800b56c:	2201      	moveq	r2, #1
 800b56e:	6122      	str	r2, [r4, #16]
 800b570:	b1d5      	cbz	r5, 800b5a8 <__d2b+0x98>
 800b572:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b576:	4405      	add	r5, r0
 800b578:	f8c9 5000 	str.w	r5, [r9]
 800b57c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b580:	f8c8 0000 	str.w	r0, [r8]
 800b584:	4620      	mov	r0, r4
 800b586:	b003      	add	sp, #12
 800b588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b58c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b590:	e7d5      	b.n	800b53e <__d2b+0x2e>
 800b592:	6161      	str	r1, [r4, #20]
 800b594:	e7e5      	b.n	800b562 <__d2b+0x52>
 800b596:	a801      	add	r0, sp, #4
 800b598:	f7ff fd64 	bl	800b064 <__lo0bits>
 800b59c:	9b01      	ldr	r3, [sp, #4]
 800b59e:	6163      	str	r3, [r4, #20]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	6122      	str	r2, [r4, #16]
 800b5a4:	3020      	adds	r0, #32
 800b5a6:	e7e3      	b.n	800b570 <__d2b+0x60>
 800b5a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5b0:	f8c9 0000 	str.w	r0, [r9]
 800b5b4:	6918      	ldr	r0, [r3, #16]
 800b5b6:	f7ff fd35 	bl	800b024 <__hi0bits>
 800b5ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5be:	e7df      	b.n	800b580 <__d2b+0x70>
 800b5c0:	0800f76b 	.word	0x0800f76b
 800b5c4:	0800f77c 	.word	0x0800f77c

0800b5c8 <_calloc_r>:
 800b5c8:	b513      	push	{r0, r1, r4, lr}
 800b5ca:	434a      	muls	r2, r1
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	9201      	str	r2, [sp, #4]
 800b5d0:	f000 f85a 	bl	800b688 <_malloc_r>
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	b118      	cbz	r0, 800b5e0 <_calloc_r+0x18>
 800b5d8:	9a01      	ldr	r2, [sp, #4]
 800b5da:	2100      	movs	r1, #0
 800b5dc:	f7fe f952 	bl	8009884 <memset>
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	b002      	add	sp, #8
 800b5e4:	bd10      	pop	{r4, pc}
	...

0800b5e8 <_free_r>:
 800b5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ea:	2900      	cmp	r1, #0
 800b5ec:	d048      	beq.n	800b680 <_free_r+0x98>
 800b5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f2:	9001      	str	r0, [sp, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b5fa:	bfb8      	it	lt
 800b5fc:	18e4      	addlt	r4, r4, r3
 800b5fe:	f000 fa65 	bl	800bacc <__malloc_lock>
 800b602:	4a20      	ldr	r2, [pc, #128]	; (800b684 <_free_r+0x9c>)
 800b604:	9801      	ldr	r0, [sp, #4]
 800b606:	6813      	ldr	r3, [r2, #0]
 800b608:	4615      	mov	r5, r2
 800b60a:	b933      	cbnz	r3, 800b61a <_free_r+0x32>
 800b60c:	6063      	str	r3, [r4, #4]
 800b60e:	6014      	str	r4, [r2, #0]
 800b610:	b003      	add	sp, #12
 800b612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b616:	f000 ba5f 	b.w	800bad8 <__malloc_unlock>
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	d90b      	bls.n	800b636 <_free_r+0x4e>
 800b61e:	6821      	ldr	r1, [r4, #0]
 800b620:	1862      	adds	r2, r4, r1
 800b622:	4293      	cmp	r3, r2
 800b624:	bf04      	itt	eq
 800b626:	681a      	ldreq	r2, [r3, #0]
 800b628:	685b      	ldreq	r3, [r3, #4]
 800b62a:	6063      	str	r3, [r4, #4]
 800b62c:	bf04      	itt	eq
 800b62e:	1852      	addeq	r2, r2, r1
 800b630:	6022      	streq	r2, [r4, #0]
 800b632:	602c      	str	r4, [r5, #0]
 800b634:	e7ec      	b.n	800b610 <_free_r+0x28>
 800b636:	461a      	mov	r2, r3
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	b10b      	cbz	r3, 800b640 <_free_r+0x58>
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	d9fa      	bls.n	800b636 <_free_r+0x4e>
 800b640:	6811      	ldr	r1, [r2, #0]
 800b642:	1855      	adds	r5, r2, r1
 800b644:	42a5      	cmp	r5, r4
 800b646:	d10b      	bne.n	800b660 <_free_r+0x78>
 800b648:	6824      	ldr	r4, [r4, #0]
 800b64a:	4421      	add	r1, r4
 800b64c:	1854      	adds	r4, r2, r1
 800b64e:	42a3      	cmp	r3, r4
 800b650:	6011      	str	r1, [r2, #0]
 800b652:	d1dd      	bne.n	800b610 <_free_r+0x28>
 800b654:	681c      	ldr	r4, [r3, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	6053      	str	r3, [r2, #4]
 800b65a:	4421      	add	r1, r4
 800b65c:	6011      	str	r1, [r2, #0]
 800b65e:	e7d7      	b.n	800b610 <_free_r+0x28>
 800b660:	d902      	bls.n	800b668 <_free_r+0x80>
 800b662:	230c      	movs	r3, #12
 800b664:	6003      	str	r3, [r0, #0]
 800b666:	e7d3      	b.n	800b610 <_free_r+0x28>
 800b668:	6825      	ldr	r5, [r4, #0]
 800b66a:	1961      	adds	r1, r4, r5
 800b66c:	428b      	cmp	r3, r1
 800b66e:	bf04      	itt	eq
 800b670:	6819      	ldreq	r1, [r3, #0]
 800b672:	685b      	ldreq	r3, [r3, #4]
 800b674:	6063      	str	r3, [r4, #4]
 800b676:	bf04      	itt	eq
 800b678:	1949      	addeq	r1, r1, r5
 800b67a:	6021      	streq	r1, [r4, #0]
 800b67c:	6054      	str	r4, [r2, #4]
 800b67e:	e7c7      	b.n	800b610 <_free_r+0x28>
 800b680:	b003      	add	sp, #12
 800b682:	bd30      	pop	{r4, r5, pc}
 800b684:	2000022c 	.word	0x2000022c

0800b688 <_malloc_r>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	1ccd      	adds	r5, r1, #3
 800b68c:	f025 0503 	bic.w	r5, r5, #3
 800b690:	3508      	adds	r5, #8
 800b692:	2d0c      	cmp	r5, #12
 800b694:	bf38      	it	cc
 800b696:	250c      	movcc	r5, #12
 800b698:	2d00      	cmp	r5, #0
 800b69a:	4606      	mov	r6, r0
 800b69c:	db01      	blt.n	800b6a2 <_malloc_r+0x1a>
 800b69e:	42a9      	cmp	r1, r5
 800b6a0:	d903      	bls.n	800b6aa <_malloc_r+0x22>
 800b6a2:	230c      	movs	r3, #12
 800b6a4:	6033      	str	r3, [r6, #0]
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6aa:	f000 fa0f 	bl	800bacc <__malloc_lock>
 800b6ae:	4921      	ldr	r1, [pc, #132]	; (800b734 <_malloc_r+0xac>)
 800b6b0:	680a      	ldr	r2, [r1, #0]
 800b6b2:	4614      	mov	r4, r2
 800b6b4:	b99c      	cbnz	r4, 800b6de <_malloc_r+0x56>
 800b6b6:	4f20      	ldr	r7, [pc, #128]	; (800b738 <_malloc_r+0xb0>)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	b923      	cbnz	r3, 800b6c6 <_malloc_r+0x3e>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f000 f998 	bl	800b9f4 <_sbrk_r>
 800b6c4:	6038      	str	r0, [r7, #0]
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f000 f993 	bl	800b9f4 <_sbrk_r>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d123      	bne.n	800b71a <_malloc_r+0x92>
 800b6d2:	230c      	movs	r3, #12
 800b6d4:	6033      	str	r3, [r6, #0]
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f000 f9fe 	bl	800bad8 <__malloc_unlock>
 800b6dc:	e7e3      	b.n	800b6a6 <_malloc_r+0x1e>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	1b5b      	subs	r3, r3, r5
 800b6e2:	d417      	bmi.n	800b714 <_malloc_r+0x8c>
 800b6e4:	2b0b      	cmp	r3, #11
 800b6e6:	d903      	bls.n	800b6f0 <_malloc_r+0x68>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	441c      	add	r4, r3
 800b6ec:	6025      	str	r5, [r4, #0]
 800b6ee:	e004      	b.n	800b6fa <_malloc_r+0x72>
 800b6f0:	6863      	ldr	r3, [r4, #4]
 800b6f2:	42a2      	cmp	r2, r4
 800b6f4:	bf0c      	ite	eq
 800b6f6:	600b      	streq	r3, [r1, #0]
 800b6f8:	6053      	strne	r3, [r2, #4]
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f000 f9ec 	bl	800bad8 <__malloc_unlock>
 800b700:	f104 000b 	add.w	r0, r4, #11
 800b704:	1d23      	adds	r3, r4, #4
 800b706:	f020 0007 	bic.w	r0, r0, #7
 800b70a:	1ac2      	subs	r2, r0, r3
 800b70c:	d0cc      	beq.n	800b6a8 <_malloc_r+0x20>
 800b70e:	1a1b      	subs	r3, r3, r0
 800b710:	50a3      	str	r3, [r4, r2]
 800b712:	e7c9      	b.n	800b6a8 <_malloc_r+0x20>
 800b714:	4622      	mov	r2, r4
 800b716:	6864      	ldr	r4, [r4, #4]
 800b718:	e7cc      	b.n	800b6b4 <_malloc_r+0x2c>
 800b71a:	1cc4      	adds	r4, r0, #3
 800b71c:	f024 0403 	bic.w	r4, r4, #3
 800b720:	42a0      	cmp	r0, r4
 800b722:	d0e3      	beq.n	800b6ec <_malloc_r+0x64>
 800b724:	1a21      	subs	r1, r4, r0
 800b726:	4630      	mov	r0, r6
 800b728:	f000 f964 	bl	800b9f4 <_sbrk_r>
 800b72c:	3001      	adds	r0, #1
 800b72e:	d1dd      	bne.n	800b6ec <_malloc_r+0x64>
 800b730:	e7cf      	b.n	800b6d2 <_malloc_r+0x4a>
 800b732:	bf00      	nop
 800b734:	2000022c 	.word	0x2000022c
 800b738:	20000230 	.word	0x20000230

0800b73c <__ssputs_r>:
 800b73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b740:	688e      	ldr	r6, [r1, #8]
 800b742:	429e      	cmp	r6, r3
 800b744:	4682      	mov	sl, r0
 800b746:	460c      	mov	r4, r1
 800b748:	4690      	mov	r8, r2
 800b74a:	461f      	mov	r7, r3
 800b74c:	d838      	bhi.n	800b7c0 <__ssputs_r+0x84>
 800b74e:	898a      	ldrh	r2, [r1, #12]
 800b750:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b754:	d032      	beq.n	800b7bc <__ssputs_r+0x80>
 800b756:	6825      	ldr	r5, [r4, #0]
 800b758:	6909      	ldr	r1, [r1, #16]
 800b75a:	eba5 0901 	sub.w	r9, r5, r1
 800b75e:	6965      	ldr	r5, [r4, #20]
 800b760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b768:	3301      	adds	r3, #1
 800b76a:	444b      	add	r3, r9
 800b76c:	106d      	asrs	r5, r5, #1
 800b76e:	429d      	cmp	r5, r3
 800b770:	bf38      	it	cc
 800b772:	461d      	movcc	r5, r3
 800b774:	0553      	lsls	r3, r2, #21
 800b776:	d531      	bpl.n	800b7dc <__ssputs_r+0xa0>
 800b778:	4629      	mov	r1, r5
 800b77a:	f7ff ff85 	bl	800b688 <_malloc_r>
 800b77e:	4606      	mov	r6, r0
 800b780:	b950      	cbnz	r0, 800b798 <__ssputs_r+0x5c>
 800b782:	230c      	movs	r3, #12
 800b784:	f8ca 3000 	str.w	r3, [sl]
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	f04f 30ff 	mov.w	r0, #4294967295
 800b794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b798:	6921      	ldr	r1, [r4, #16]
 800b79a:	464a      	mov	r2, r9
 800b79c:	f7ff fb88 	bl	800aeb0 <memcpy>
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7aa:	81a3      	strh	r3, [r4, #12]
 800b7ac:	6126      	str	r6, [r4, #16]
 800b7ae:	6165      	str	r5, [r4, #20]
 800b7b0:	444e      	add	r6, r9
 800b7b2:	eba5 0509 	sub.w	r5, r5, r9
 800b7b6:	6026      	str	r6, [r4, #0]
 800b7b8:	60a5      	str	r5, [r4, #8]
 800b7ba:	463e      	mov	r6, r7
 800b7bc:	42be      	cmp	r6, r7
 800b7be:	d900      	bls.n	800b7c2 <__ssputs_r+0x86>
 800b7c0:	463e      	mov	r6, r7
 800b7c2:	4632      	mov	r2, r6
 800b7c4:	6820      	ldr	r0, [r4, #0]
 800b7c6:	4641      	mov	r1, r8
 800b7c8:	f000 f966 	bl	800ba98 <memmove>
 800b7cc:	68a3      	ldr	r3, [r4, #8]
 800b7ce:	6822      	ldr	r2, [r4, #0]
 800b7d0:	1b9b      	subs	r3, r3, r6
 800b7d2:	4432      	add	r2, r6
 800b7d4:	60a3      	str	r3, [r4, #8]
 800b7d6:	6022      	str	r2, [r4, #0]
 800b7d8:	2000      	movs	r0, #0
 800b7da:	e7db      	b.n	800b794 <__ssputs_r+0x58>
 800b7dc:	462a      	mov	r2, r5
 800b7de:	f000 f981 	bl	800bae4 <_realloc_r>
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d1e1      	bne.n	800b7ac <__ssputs_r+0x70>
 800b7e8:	6921      	ldr	r1, [r4, #16]
 800b7ea:	4650      	mov	r0, sl
 800b7ec:	f7ff fefc 	bl	800b5e8 <_free_r>
 800b7f0:	e7c7      	b.n	800b782 <__ssputs_r+0x46>
	...

0800b7f4 <_svfiprintf_r>:
 800b7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f8:	4698      	mov	r8, r3
 800b7fa:	898b      	ldrh	r3, [r1, #12]
 800b7fc:	061b      	lsls	r3, r3, #24
 800b7fe:	b09d      	sub	sp, #116	; 0x74
 800b800:	4607      	mov	r7, r0
 800b802:	460d      	mov	r5, r1
 800b804:	4614      	mov	r4, r2
 800b806:	d50e      	bpl.n	800b826 <_svfiprintf_r+0x32>
 800b808:	690b      	ldr	r3, [r1, #16]
 800b80a:	b963      	cbnz	r3, 800b826 <_svfiprintf_r+0x32>
 800b80c:	2140      	movs	r1, #64	; 0x40
 800b80e:	f7ff ff3b 	bl	800b688 <_malloc_r>
 800b812:	6028      	str	r0, [r5, #0]
 800b814:	6128      	str	r0, [r5, #16]
 800b816:	b920      	cbnz	r0, 800b822 <_svfiprintf_r+0x2e>
 800b818:	230c      	movs	r3, #12
 800b81a:	603b      	str	r3, [r7, #0]
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295
 800b820:	e0d1      	b.n	800b9c6 <_svfiprintf_r+0x1d2>
 800b822:	2340      	movs	r3, #64	; 0x40
 800b824:	616b      	str	r3, [r5, #20]
 800b826:	2300      	movs	r3, #0
 800b828:	9309      	str	r3, [sp, #36]	; 0x24
 800b82a:	2320      	movs	r3, #32
 800b82c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b830:	f8cd 800c 	str.w	r8, [sp, #12]
 800b834:	2330      	movs	r3, #48	; 0x30
 800b836:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9e0 <_svfiprintf_r+0x1ec>
 800b83a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b83e:	f04f 0901 	mov.w	r9, #1
 800b842:	4623      	mov	r3, r4
 800b844:	469a      	mov	sl, r3
 800b846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b84a:	b10a      	cbz	r2, 800b850 <_svfiprintf_r+0x5c>
 800b84c:	2a25      	cmp	r2, #37	; 0x25
 800b84e:	d1f9      	bne.n	800b844 <_svfiprintf_r+0x50>
 800b850:	ebba 0b04 	subs.w	fp, sl, r4
 800b854:	d00b      	beq.n	800b86e <_svfiprintf_r+0x7a>
 800b856:	465b      	mov	r3, fp
 800b858:	4622      	mov	r2, r4
 800b85a:	4629      	mov	r1, r5
 800b85c:	4638      	mov	r0, r7
 800b85e:	f7ff ff6d 	bl	800b73c <__ssputs_r>
 800b862:	3001      	adds	r0, #1
 800b864:	f000 80aa 	beq.w	800b9bc <_svfiprintf_r+0x1c8>
 800b868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b86a:	445a      	add	r2, fp
 800b86c:	9209      	str	r2, [sp, #36]	; 0x24
 800b86e:	f89a 3000 	ldrb.w	r3, [sl]
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 80a2 	beq.w	800b9bc <_svfiprintf_r+0x1c8>
 800b878:	2300      	movs	r3, #0
 800b87a:	f04f 32ff 	mov.w	r2, #4294967295
 800b87e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b882:	f10a 0a01 	add.w	sl, sl, #1
 800b886:	9304      	str	r3, [sp, #16]
 800b888:	9307      	str	r3, [sp, #28]
 800b88a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b88e:	931a      	str	r3, [sp, #104]	; 0x68
 800b890:	4654      	mov	r4, sl
 800b892:	2205      	movs	r2, #5
 800b894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b898:	4851      	ldr	r0, [pc, #324]	; (800b9e0 <_svfiprintf_r+0x1ec>)
 800b89a:	f7f4 fca1 	bl	80001e0 <memchr>
 800b89e:	9a04      	ldr	r2, [sp, #16]
 800b8a0:	b9d8      	cbnz	r0, 800b8da <_svfiprintf_r+0xe6>
 800b8a2:	06d0      	lsls	r0, r2, #27
 800b8a4:	bf44      	itt	mi
 800b8a6:	2320      	movmi	r3, #32
 800b8a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ac:	0711      	lsls	r1, r2, #28
 800b8ae:	bf44      	itt	mi
 800b8b0:	232b      	movmi	r3, #43	; 0x2b
 800b8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b8bc:	d015      	beq.n	800b8ea <_svfiprintf_r+0xf6>
 800b8be:	9a07      	ldr	r2, [sp, #28]
 800b8c0:	4654      	mov	r4, sl
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f04f 0c0a 	mov.w	ip, #10
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ce:	3b30      	subs	r3, #48	; 0x30
 800b8d0:	2b09      	cmp	r3, #9
 800b8d2:	d94e      	bls.n	800b972 <_svfiprintf_r+0x17e>
 800b8d4:	b1b0      	cbz	r0, 800b904 <_svfiprintf_r+0x110>
 800b8d6:	9207      	str	r2, [sp, #28]
 800b8d8:	e014      	b.n	800b904 <_svfiprintf_r+0x110>
 800b8da:	eba0 0308 	sub.w	r3, r0, r8
 800b8de:	fa09 f303 	lsl.w	r3, r9, r3
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	9304      	str	r3, [sp, #16]
 800b8e6:	46a2      	mov	sl, r4
 800b8e8:	e7d2      	b.n	800b890 <_svfiprintf_r+0x9c>
 800b8ea:	9b03      	ldr	r3, [sp, #12]
 800b8ec:	1d19      	adds	r1, r3, #4
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	9103      	str	r1, [sp, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bfbb      	ittet	lt
 800b8f6:	425b      	neglt	r3, r3
 800b8f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b8fc:	9307      	strge	r3, [sp, #28]
 800b8fe:	9307      	strlt	r3, [sp, #28]
 800b900:	bfb8      	it	lt
 800b902:	9204      	strlt	r2, [sp, #16]
 800b904:	7823      	ldrb	r3, [r4, #0]
 800b906:	2b2e      	cmp	r3, #46	; 0x2e
 800b908:	d10c      	bne.n	800b924 <_svfiprintf_r+0x130>
 800b90a:	7863      	ldrb	r3, [r4, #1]
 800b90c:	2b2a      	cmp	r3, #42	; 0x2a
 800b90e:	d135      	bne.n	800b97c <_svfiprintf_r+0x188>
 800b910:	9b03      	ldr	r3, [sp, #12]
 800b912:	1d1a      	adds	r2, r3, #4
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	9203      	str	r2, [sp, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	bfb8      	it	lt
 800b91c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b920:	3402      	adds	r4, #2
 800b922:	9305      	str	r3, [sp, #20]
 800b924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9f0 <_svfiprintf_r+0x1fc>
 800b928:	7821      	ldrb	r1, [r4, #0]
 800b92a:	2203      	movs	r2, #3
 800b92c:	4650      	mov	r0, sl
 800b92e:	f7f4 fc57 	bl	80001e0 <memchr>
 800b932:	b140      	cbz	r0, 800b946 <_svfiprintf_r+0x152>
 800b934:	2340      	movs	r3, #64	; 0x40
 800b936:	eba0 000a 	sub.w	r0, r0, sl
 800b93a:	fa03 f000 	lsl.w	r0, r3, r0
 800b93e:	9b04      	ldr	r3, [sp, #16]
 800b940:	4303      	orrs	r3, r0
 800b942:	3401      	adds	r4, #1
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b94a:	4826      	ldr	r0, [pc, #152]	; (800b9e4 <_svfiprintf_r+0x1f0>)
 800b94c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b950:	2206      	movs	r2, #6
 800b952:	f7f4 fc45 	bl	80001e0 <memchr>
 800b956:	2800      	cmp	r0, #0
 800b958:	d038      	beq.n	800b9cc <_svfiprintf_r+0x1d8>
 800b95a:	4b23      	ldr	r3, [pc, #140]	; (800b9e8 <_svfiprintf_r+0x1f4>)
 800b95c:	bb1b      	cbnz	r3, 800b9a6 <_svfiprintf_r+0x1b2>
 800b95e:	9b03      	ldr	r3, [sp, #12]
 800b960:	3307      	adds	r3, #7
 800b962:	f023 0307 	bic.w	r3, r3, #7
 800b966:	3308      	adds	r3, #8
 800b968:	9303      	str	r3, [sp, #12]
 800b96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b96c:	4433      	add	r3, r6
 800b96e:	9309      	str	r3, [sp, #36]	; 0x24
 800b970:	e767      	b.n	800b842 <_svfiprintf_r+0x4e>
 800b972:	fb0c 3202 	mla	r2, ip, r2, r3
 800b976:	460c      	mov	r4, r1
 800b978:	2001      	movs	r0, #1
 800b97a:	e7a5      	b.n	800b8c8 <_svfiprintf_r+0xd4>
 800b97c:	2300      	movs	r3, #0
 800b97e:	3401      	adds	r4, #1
 800b980:	9305      	str	r3, [sp, #20]
 800b982:	4619      	mov	r1, r3
 800b984:	f04f 0c0a 	mov.w	ip, #10
 800b988:	4620      	mov	r0, r4
 800b98a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b98e:	3a30      	subs	r2, #48	; 0x30
 800b990:	2a09      	cmp	r2, #9
 800b992:	d903      	bls.n	800b99c <_svfiprintf_r+0x1a8>
 800b994:	2b00      	cmp	r3, #0
 800b996:	d0c5      	beq.n	800b924 <_svfiprintf_r+0x130>
 800b998:	9105      	str	r1, [sp, #20]
 800b99a:	e7c3      	b.n	800b924 <_svfiprintf_r+0x130>
 800b99c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e7f0      	b.n	800b988 <_svfiprintf_r+0x194>
 800b9a6:	ab03      	add	r3, sp, #12
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	462a      	mov	r2, r5
 800b9ac:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <_svfiprintf_r+0x1f8>)
 800b9ae:	a904      	add	r1, sp, #16
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f7fe f80f 	bl	80099d4 <_printf_float>
 800b9b6:	1c42      	adds	r2, r0, #1
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	d1d6      	bne.n	800b96a <_svfiprintf_r+0x176>
 800b9bc:	89ab      	ldrh	r3, [r5, #12]
 800b9be:	065b      	lsls	r3, r3, #25
 800b9c0:	f53f af2c 	bmi.w	800b81c <_svfiprintf_r+0x28>
 800b9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9c6:	b01d      	add	sp, #116	; 0x74
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	ab03      	add	r3, sp, #12
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	462a      	mov	r2, r5
 800b9d2:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <_svfiprintf_r+0x1f8>)
 800b9d4:	a904      	add	r1, sp, #16
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	f7fe faa0 	bl	8009f1c <_printf_i>
 800b9dc:	e7eb      	b.n	800b9b6 <_svfiprintf_r+0x1c2>
 800b9de:	bf00      	nop
 800b9e0:	0800f8dc 	.word	0x0800f8dc
 800b9e4:	0800f8e6 	.word	0x0800f8e6
 800b9e8:	080099d5 	.word	0x080099d5
 800b9ec:	0800b73d 	.word	0x0800b73d
 800b9f0:	0800f8e2 	.word	0x0800f8e2

0800b9f4 <_sbrk_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d06      	ldr	r5, [pc, #24]	; (800ba10 <_sbrk_r+0x1c>)
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	602b      	str	r3, [r5, #0]
 800ba00:	f7f7 fdf0 	bl	80035e4 <_sbrk>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_sbrk_r+0x1a>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_sbrk_r+0x1a>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	20000658 	.word	0x20000658

0800ba14 <__assert_func>:
 800ba14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba16:	4614      	mov	r4, r2
 800ba18:	461a      	mov	r2, r3
 800ba1a:	4b09      	ldr	r3, [pc, #36]	; (800ba40 <__assert_func+0x2c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4605      	mov	r5, r0
 800ba20:	68d8      	ldr	r0, [r3, #12]
 800ba22:	b14c      	cbz	r4, 800ba38 <__assert_func+0x24>
 800ba24:	4b07      	ldr	r3, [pc, #28]	; (800ba44 <__assert_func+0x30>)
 800ba26:	9100      	str	r1, [sp, #0]
 800ba28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba2c:	4906      	ldr	r1, [pc, #24]	; (800ba48 <__assert_func+0x34>)
 800ba2e:	462b      	mov	r3, r5
 800ba30:	f000 f80e 	bl	800ba50 <fiprintf>
 800ba34:	f000 faa4 	bl	800bf80 <abort>
 800ba38:	4b04      	ldr	r3, [pc, #16]	; (800ba4c <__assert_func+0x38>)
 800ba3a:	461c      	mov	r4, r3
 800ba3c:	e7f3      	b.n	800ba26 <__assert_func+0x12>
 800ba3e:	bf00      	nop
 800ba40:	2000001c 	.word	0x2000001c
 800ba44:	0800f8ed 	.word	0x0800f8ed
 800ba48:	0800f8fa 	.word	0x0800f8fa
 800ba4c:	0800f928 	.word	0x0800f928

0800ba50 <fiprintf>:
 800ba50:	b40e      	push	{r1, r2, r3}
 800ba52:	b503      	push	{r0, r1, lr}
 800ba54:	4601      	mov	r1, r0
 800ba56:	ab03      	add	r3, sp, #12
 800ba58:	4805      	ldr	r0, [pc, #20]	; (800ba70 <fiprintf+0x20>)
 800ba5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba5e:	6800      	ldr	r0, [r0, #0]
 800ba60:	9301      	str	r3, [sp, #4]
 800ba62:	f000 f88f 	bl	800bb84 <_vfiprintf_r>
 800ba66:	b002      	add	sp, #8
 800ba68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba6c:	b003      	add	sp, #12
 800ba6e:	4770      	bx	lr
 800ba70:	2000001c 	.word	0x2000001c

0800ba74 <__ascii_mbtowc>:
 800ba74:	b082      	sub	sp, #8
 800ba76:	b901      	cbnz	r1, 800ba7a <__ascii_mbtowc+0x6>
 800ba78:	a901      	add	r1, sp, #4
 800ba7a:	b142      	cbz	r2, 800ba8e <__ascii_mbtowc+0x1a>
 800ba7c:	b14b      	cbz	r3, 800ba92 <__ascii_mbtowc+0x1e>
 800ba7e:	7813      	ldrb	r3, [r2, #0]
 800ba80:	600b      	str	r3, [r1, #0]
 800ba82:	7812      	ldrb	r2, [r2, #0]
 800ba84:	1e10      	subs	r0, r2, #0
 800ba86:	bf18      	it	ne
 800ba88:	2001      	movne	r0, #1
 800ba8a:	b002      	add	sp, #8
 800ba8c:	4770      	bx	lr
 800ba8e:	4610      	mov	r0, r2
 800ba90:	e7fb      	b.n	800ba8a <__ascii_mbtowc+0x16>
 800ba92:	f06f 0001 	mvn.w	r0, #1
 800ba96:	e7f8      	b.n	800ba8a <__ascii_mbtowc+0x16>

0800ba98 <memmove>:
 800ba98:	4288      	cmp	r0, r1
 800ba9a:	b510      	push	{r4, lr}
 800ba9c:	eb01 0402 	add.w	r4, r1, r2
 800baa0:	d902      	bls.n	800baa8 <memmove+0x10>
 800baa2:	4284      	cmp	r4, r0
 800baa4:	4623      	mov	r3, r4
 800baa6:	d807      	bhi.n	800bab8 <memmove+0x20>
 800baa8:	1e43      	subs	r3, r0, #1
 800baaa:	42a1      	cmp	r1, r4
 800baac:	d008      	beq.n	800bac0 <memmove+0x28>
 800baae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bab6:	e7f8      	b.n	800baaa <memmove+0x12>
 800bab8:	4402      	add	r2, r0
 800baba:	4601      	mov	r1, r0
 800babc:	428a      	cmp	r2, r1
 800babe:	d100      	bne.n	800bac2 <memmove+0x2a>
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baca:	e7f7      	b.n	800babc <memmove+0x24>

0800bacc <__malloc_lock>:
 800bacc:	4801      	ldr	r0, [pc, #4]	; (800bad4 <__malloc_lock+0x8>)
 800bace:	f000 bc17 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800bad2:	bf00      	nop
 800bad4:	20000660 	.word	0x20000660

0800bad8 <__malloc_unlock>:
 800bad8:	4801      	ldr	r0, [pc, #4]	; (800bae0 <__malloc_unlock+0x8>)
 800bada:	f000 bc12 	b.w	800c302 <__retarget_lock_release_recursive>
 800bade:	bf00      	nop
 800bae0:	20000660 	.word	0x20000660

0800bae4 <_realloc_r>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	4607      	mov	r7, r0
 800bae8:	4614      	mov	r4, r2
 800baea:	460e      	mov	r6, r1
 800baec:	b921      	cbnz	r1, 800baf8 <_realloc_r+0x14>
 800baee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800baf2:	4611      	mov	r1, r2
 800baf4:	f7ff bdc8 	b.w	800b688 <_malloc_r>
 800baf8:	b922      	cbnz	r2, 800bb04 <_realloc_r+0x20>
 800bafa:	f7ff fd75 	bl	800b5e8 <_free_r>
 800bafe:	4625      	mov	r5, r4
 800bb00:	4628      	mov	r0, r5
 800bb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb04:	f000 fc62 	bl	800c3cc <_malloc_usable_size_r>
 800bb08:	42a0      	cmp	r0, r4
 800bb0a:	d20f      	bcs.n	800bb2c <_realloc_r+0x48>
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4638      	mov	r0, r7
 800bb10:	f7ff fdba 	bl	800b688 <_malloc_r>
 800bb14:	4605      	mov	r5, r0
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d0f2      	beq.n	800bb00 <_realloc_r+0x1c>
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	4622      	mov	r2, r4
 800bb1e:	f7ff f9c7 	bl	800aeb0 <memcpy>
 800bb22:	4631      	mov	r1, r6
 800bb24:	4638      	mov	r0, r7
 800bb26:	f7ff fd5f 	bl	800b5e8 <_free_r>
 800bb2a:	e7e9      	b.n	800bb00 <_realloc_r+0x1c>
 800bb2c:	4635      	mov	r5, r6
 800bb2e:	e7e7      	b.n	800bb00 <_realloc_r+0x1c>

0800bb30 <__sfputc_r>:
 800bb30:	6893      	ldr	r3, [r2, #8]
 800bb32:	3b01      	subs	r3, #1
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	b410      	push	{r4}
 800bb38:	6093      	str	r3, [r2, #8]
 800bb3a:	da08      	bge.n	800bb4e <__sfputc_r+0x1e>
 800bb3c:	6994      	ldr	r4, [r2, #24]
 800bb3e:	42a3      	cmp	r3, r4
 800bb40:	db01      	blt.n	800bb46 <__sfputc_r+0x16>
 800bb42:	290a      	cmp	r1, #10
 800bb44:	d103      	bne.n	800bb4e <__sfputc_r+0x1e>
 800bb46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb4a:	f000 b94b 	b.w	800bde4 <__swbuf_r>
 800bb4e:	6813      	ldr	r3, [r2, #0]
 800bb50:	1c58      	adds	r0, r3, #1
 800bb52:	6010      	str	r0, [r2, #0]
 800bb54:	7019      	strb	r1, [r3, #0]
 800bb56:	4608      	mov	r0, r1
 800bb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <__sfputs_r>:
 800bb5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	4614      	mov	r4, r2
 800bb66:	18d5      	adds	r5, r2, r3
 800bb68:	42ac      	cmp	r4, r5
 800bb6a:	d101      	bne.n	800bb70 <__sfputs_r+0x12>
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e007      	b.n	800bb80 <__sfputs_r+0x22>
 800bb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb74:	463a      	mov	r2, r7
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7ff ffda 	bl	800bb30 <__sfputc_r>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d1f3      	bne.n	800bb68 <__sfputs_r+0xa>
 800bb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb84 <_vfiprintf_r>:
 800bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	460d      	mov	r5, r1
 800bb8a:	b09d      	sub	sp, #116	; 0x74
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	4698      	mov	r8, r3
 800bb90:	4606      	mov	r6, r0
 800bb92:	b118      	cbz	r0, 800bb9c <_vfiprintf_r+0x18>
 800bb94:	6983      	ldr	r3, [r0, #24]
 800bb96:	b90b      	cbnz	r3, 800bb9c <_vfiprintf_r+0x18>
 800bb98:	f000 fb14 	bl	800c1c4 <__sinit>
 800bb9c:	4b89      	ldr	r3, [pc, #548]	; (800bdc4 <_vfiprintf_r+0x240>)
 800bb9e:	429d      	cmp	r5, r3
 800bba0:	d11b      	bne.n	800bbda <_vfiprintf_r+0x56>
 800bba2:	6875      	ldr	r5, [r6, #4]
 800bba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	d405      	bmi.n	800bbb6 <_vfiprintf_r+0x32>
 800bbaa:	89ab      	ldrh	r3, [r5, #12]
 800bbac:	059a      	lsls	r2, r3, #22
 800bbae:	d402      	bmi.n	800bbb6 <_vfiprintf_r+0x32>
 800bbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbb2:	f000 fba5 	bl	800c300 <__retarget_lock_acquire_recursive>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	071b      	lsls	r3, r3, #28
 800bbba:	d501      	bpl.n	800bbc0 <_vfiprintf_r+0x3c>
 800bbbc:	692b      	ldr	r3, [r5, #16]
 800bbbe:	b9eb      	cbnz	r3, 800bbfc <_vfiprintf_r+0x78>
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f000 f96e 	bl	800bea4 <__swsetup_r>
 800bbc8:	b1c0      	cbz	r0, 800bbfc <_vfiprintf_r+0x78>
 800bbca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbcc:	07dc      	lsls	r4, r3, #31
 800bbce:	d50e      	bpl.n	800bbee <_vfiprintf_r+0x6a>
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd4:	b01d      	add	sp, #116	; 0x74
 800bbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbda:	4b7b      	ldr	r3, [pc, #492]	; (800bdc8 <_vfiprintf_r+0x244>)
 800bbdc:	429d      	cmp	r5, r3
 800bbde:	d101      	bne.n	800bbe4 <_vfiprintf_r+0x60>
 800bbe0:	68b5      	ldr	r5, [r6, #8]
 800bbe2:	e7df      	b.n	800bba4 <_vfiprintf_r+0x20>
 800bbe4:	4b79      	ldr	r3, [pc, #484]	; (800bdcc <_vfiprintf_r+0x248>)
 800bbe6:	429d      	cmp	r5, r3
 800bbe8:	bf08      	it	eq
 800bbea:	68f5      	ldreq	r5, [r6, #12]
 800bbec:	e7da      	b.n	800bba4 <_vfiprintf_r+0x20>
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	0598      	lsls	r0, r3, #22
 800bbf2:	d4ed      	bmi.n	800bbd0 <_vfiprintf_r+0x4c>
 800bbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf6:	f000 fb84 	bl	800c302 <__retarget_lock_release_recursive>
 800bbfa:	e7e9      	b.n	800bbd0 <_vfiprintf_r+0x4c>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bc00:	2320      	movs	r3, #32
 800bc02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc0a:	2330      	movs	r3, #48	; 0x30
 800bc0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdd0 <_vfiprintf_r+0x24c>
 800bc10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc14:	f04f 0901 	mov.w	r9, #1
 800bc18:	4623      	mov	r3, r4
 800bc1a:	469a      	mov	sl, r3
 800bc1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc20:	b10a      	cbz	r2, 800bc26 <_vfiprintf_r+0xa2>
 800bc22:	2a25      	cmp	r2, #37	; 0x25
 800bc24:	d1f9      	bne.n	800bc1a <_vfiprintf_r+0x96>
 800bc26:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2a:	d00b      	beq.n	800bc44 <_vfiprintf_r+0xc0>
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff ff93 	bl	800bb5e <__sfputs_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f000 80aa 	beq.w	800bd92 <_vfiprintf_r+0x20e>
 800bc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc40:	445a      	add	r2, fp
 800bc42:	9209      	str	r2, [sp, #36]	; 0x24
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 80a2 	beq.w	800bd92 <_vfiprintf_r+0x20e>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f04f 32ff 	mov.w	r2, #4294967295
 800bc54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc58:	f10a 0a01 	add.w	sl, sl, #1
 800bc5c:	9304      	str	r3, [sp, #16]
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc64:	931a      	str	r3, [sp, #104]	; 0x68
 800bc66:	4654      	mov	r4, sl
 800bc68:	2205      	movs	r2, #5
 800bc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6e:	4858      	ldr	r0, [pc, #352]	; (800bdd0 <_vfiprintf_r+0x24c>)
 800bc70:	f7f4 fab6 	bl	80001e0 <memchr>
 800bc74:	9a04      	ldr	r2, [sp, #16]
 800bc76:	b9d8      	cbnz	r0, 800bcb0 <_vfiprintf_r+0x12c>
 800bc78:	06d1      	lsls	r1, r2, #27
 800bc7a:	bf44      	itt	mi
 800bc7c:	2320      	movmi	r3, #32
 800bc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc82:	0713      	lsls	r3, r2, #28
 800bc84:	bf44      	itt	mi
 800bc86:	232b      	movmi	r3, #43	; 0x2b
 800bc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc90:	2b2a      	cmp	r3, #42	; 0x2a
 800bc92:	d015      	beq.n	800bcc0 <_vfiprintf_r+0x13c>
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	4654      	mov	r4, sl
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f04f 0c0a 	mov.w	ip, #10
 800bc9e:	4621      	mov	r1, r4
 800bca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca4:	3b30      	subs	r3, #48	; 0x30
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d94e      	bls.n	800bd48 <_vfiprintf_r+0x1c4>
 800bcaa:	b1b0      	cbz	r0, 800bcda <_vfiprintf_r+0x156>
 800bcac:	9207      	str	r2, [sp, #28]
 800bcae:	e014      	b.n	800bcda <_vfiprintf_r+0x156>
 800bcb0:	eba0 0308 	sub.w	r3, r0, r8
 800bcb4:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	46a2      	mov	sl, r4
 800bcbe:	e7d2      	b.n	800bc66 <_vfiprintf_r+0xe2>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	1d19      	adds	r1, r3, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	9103      	str	r1, [sp, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	bfbb      	ittet	lt
 800bccc:	425b      	neglt	r3, r3
 800bcce:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd2:	9307      	strge	r3, [sp, #28]
 800bcd4:	9307      	strlt	r3, [sp, #28]
 800bcd6:	bfb8      	it	lt
 800bcd8:	9204      	strlt	r2, [sp, #16]
 800bcda:	7823      	ldrb	r3, [r4, #0]
 800bcdc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcde:	d10c      	bne.n	800bcfa <_vfiprintf_r+0x176>
 800bce0:	7863      	ldrb	r3, [r4, #1]
 800bce2:	2b2a      	cmp	r3, #42	; 0x2a
 800bce4:	d135      	bne.n	800bd52 <_vfiprintf_r+0x1ce>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	1d1a      	adds	r2, r3, #4
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	9203      	str	r2, [sp, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfb8      	it	lt
 800bcf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcf6:	3402      	adds	r4, #2
 800bcf8:	9305      	str	r3, [sp, #20]
 800bcfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bde0 <_vfiprintf_r+0x25c>
 800bcfe:	7821      	ldrb	r1, [r4, #0]
 800bd00:	2203      	movs	r2, #3
 800bd02:	4650      	mov	r0, sl
 800bd04:	f7f4 fa6c 	bl	80001e0 <memchr>
 800bd08:	b140      	cbz	r0, 800bd1c <_vfiprintf_r+0x198>
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	eba0 000a 	sub.w	r0, r0, sl
 800bd10:	fa03 f000 	lsl.w	r0, r3, r0
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	4303      	orrs	r3, r0
 800bd18:	3401      	adds	r4, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd20:	482c      	ldr	r0, [pc, #176]	; (800bdd4 <_vfiprintf_r+0x250>)
 800bd22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd26:	2206      	movs	r2, #6
 800bd28:	f7f4 fa5a 	bl	80001e0 <memchr>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d03f      	beq.n	800bdb0 <_vfiprintf_r+0x22c>
 800bd30:	4b29      	ldr	r3, [pc, #164]	; (800bdd8 <_vfiprintf_r+0x254>)
 800bd32:	bb1b      	cbnz	r3, 800bd7c <_vfiprintf_r+0x1f8>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	3307      	adds	r3, #7
 800bd38:	f023 0307 	bic.w	r3, r3, #7
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd42:	443b      	add	r3, r7
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	e767      	b.n	800bc18 <_vfiprintf_r+0x94>
 800bd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	2001      	movs	r0, #1
 800bd50:	e7a5      	b.n	800bc9e <_vfiprintf_r+0x11a>
 800bd52:	2300      	movs	r3, #0
 800bd54:	3401      	adds	r4, #1
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	f04f 0c0a 	mov.w	ip, #10
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd64:	3a30      	subs	r2, #48	; 0x30
 800bd66:	2a09      	cmp	r2, #9
 800bd68:	d903      	bls.n	800bd72 <_vfiprintf_r+0x1ee>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0c5      	beq.n	800bcfa <_vfiprintf_r+0x176>
 800bd6e:	9105      	str	r1, [sp, #20]
 800bd70:	e7c3      	b.n	800bcfa <_vfiprintf_r+0x176>
 800bd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd76:	4604      	mov	r4, r0
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e7f0      	b.n	800bd5e <_vfiprintf_r+0x1da>
 800bd7c:	ab03      	add	r3, sp, #12
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	462a      	mov	r2, r5
 800bd82:	4b16      	ldr	r3, [pc, #88]	; (800bddc <_vfiprintf_r+0x258>)
 800bd84:	a904      	add	r1, sp, #16
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7fd fe24 	bl	80099d4 <_printf_float>
 800bd8c:	4607      	mov	r7, r0
 800bd8e:	1c78      	adds	r0, r7, #1
 800bd90:	d1d6      	bne.n	800bd40 <_vfiprintf_r+0x1bc>
 800bd92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd94:	07d9      	lsls	r1, r3, #31
 800bd96:	d405      	bmi.n	800bda4 <_vfiprintf_r+0x220>
 800bd98:	89ab      	ldrh	r3, [r5, #12]
 800bd9a:	059a      	lsls	r2, r3, #22
 800bd9c:	d402      	bmi.n	800bda4 <_vfiprintf_r+0x220>
 800bd9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda0:	f000 faaf 	bl	800c302 <__retarget_lock_release_recursive>
 800bda4:	89ab      	ldrh	r3, [r5, #12]
 800bda6:	065b      	lsls	r3, r3, #25
 800bda8:	f53f af12 	bmi.w	800bbd0 <_vfiprintf_r+0x4c>
 800bdac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdae:	e711      	b.n	800bbd4 <_vfiprintf_r+0x50>
 800bdb0:	ab03      	add	r3, sp, #12
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	4b09      	ldr	r3, [pc, #36]	; (800bddc <_vfiprintf_r+0x258>)
 800bdb8:	a904      	add	r1, sp, #16
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7fe f8ae 	bl	8009f1c <_printf_i>
 800bdc0:	e7e4      	b.n	800bd8c <_vfiprintf_r+0x208>
 800bdc2:	bf00      	nop
 800bdc4:	0800fa54 	.word	0x0800fa54
 800bdc8:	0800fa74 	.word	0x0800fa74
 800bdcc:	0800fa34 	.word	0x0800fa34
 800bdd0:	0800f8dc 	.word	0x0800f8dc
 800bdd4:	0800f8e6 	.word	0x0800f8e6
 800bdd8:	080099d5 	.word	0x080099d5
 800bddc:	0800bb5f 	.word	0x0800bb5f
 800bde0:	0800f8e2 	.word	0x0800f8e2

0800bde4 <__swbuf_r>:
 800bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde6:	460e      	mov	r6, r1
 800bde8:	4614      	mov	r4, r2
 800bdea:	4605      	mov	r5, r0
 800bdec:	b118      	cbz	r0, 800bdf6 <__swbuf_r+0x12>
 800bdee:	6983      	ldr	r3, [r0, #24]
 800bdf0:	b90b      	cbnz	r3, 800bdf6 <__swbuf_r+0x12>
 800bdf2:	f000 f9e7 	bl	800c1c4 <__sinit>
 800bdf6:	4b21      	ldr	r3, [pc, #132]	; (800be7c <__swbuf_r+0x98>)
 800bdf8:	429c      	cmp	r4, r3
 800bdfa:	d12b      	bne.n	800be54 <__swbuf_r+0x70>
 800bdfc:	686c      	ldr	r4, [r5, #4]
 800bdfe:	69a3      	ldr	r3, [r4, #24]
 800be00:	60a3      	str	r3, [r4, #8]
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	071a      	lsls	r2, r3, #28
 800be06:	d52f      	bpl.n	800be68 <__swbuf_r+0x84>
 800be08:	6923      	ldr	r3, [r4, #16]
 800be0a:	b36b      	cbz	r3, 800be68 <__swbuf_r+0x84>
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	6820      	ldr	r0, [r4, #0]
 800be10:	1ac0      	subs	r0, r0, r3
 800be12:	6963      	ldr	r3, [r4, #20]
 800be14:	b2f6      	uxtb	r6, r6
 800be16:	4283      	cmp	r3, r0
 800be18:	4637      	mov	r7, r6
 800be1a:	dc04      	bgt.n	800be26 <__swbuf_r+0x42>
 800be1c:	4621      	mov	r1, r4
 800be1e:	4628      	mov	r0, r5
 800be20:	f000 f93c 	bl	800c09c <_fflush_r>
 800be24:	bb30      	cbnz	r0, 800be74 <__swbuf_r+0x90>
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	3b01      	subs	r3, #1
 800be2a:	60a3      	str	r3, [r4, #8]
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	6022      	str	r2, [r4, #0]
 800be32:	701e      	strb	r6, [r3, #0]
 800be34:	6963      	ldr	r3, [r4, #20]
 800be36:	3001      	adds	r0, #1
 800be38:	4283      	cmp	r3, r0
 800be3a:	d004      	beq.n	800be46 <__swbuf_r+0x62>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	07db      	lsls	r3, r3, #31
 800be40:	d506      	bpl.n	800be50 <__swbuf_r+0x6c>
 800be42:	2e0a      	cmp	r6, #10
 800be44:	d104      	bne.n	800be50 <__swbuf_r+0x6c>
 800be46:	4621      	mov	r1, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	f000 f927 	bl	800c09c <_fflush_r>
 800be4e:	b988      	cbnz	r0, 800be74 <__swbuf_r+0x90>
 800be50:	4638      	mov	r0, r7
 800be52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be54:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <__swbuf_r+0x9c>)
 800be56:	429c      	cmp	r4, r3
 800be58:	d101      	bne.n	800be5e <__swbuf_r+0x7a>
 800be5a:	68ac      	ldr	r4, [r5, #8]
 800be5c:	e7cf      	b.n	800bdfe <__swbuf_r+0x1a>
 800be5e:	4b09      	ldr	r3, [pc, #36]	; (800be84 <__swbuf_r+0xa0>)
 800be60:	429c      	cmp	r4, r3
 800be62:	bf08      	it	eq
 800be64:	68ec      	ldreq	r4, [r5, #12]
 800be66:	e7ca      	b.n	800bdfe <__swbuf_r+0x1a>
 800be68:	4621      	mov	r1, r4
 800be6a:	4628      	mov	r0, r5
 800be6c:	f000 f81a 	bl	800bea4 <__swsetup_r>
 800be70:	2800      	cmp	r0, #0
 800be72:	d0cb      	beq.n	800be0c <__swbuf_r+0x28>
 800be74:	f04f 37ff 	mov.w	r7, #4294967295
 800be78:	e7ea      	b.n	800be50 <__swbuf_r+0x6c>
 800be7a:	bf00      	nop
 800be7c:	0800fa54 	.word	0x0800fa54
 800be80:	0800fa74 	.word	0x0800fa74
 800be84:	0800fa34 	.word	0x0800fa34

0800be88 <__ascii_wctomb>:
 800be88:	b149      	cbz	r1, 800be9e <__ascii_wctomb+0x16>
 800be8a:	2aff      	cmp	r2, #255	; 0xff
 800be8c:	bf85      	ittet	hi
 800be8e:	238a      	movhi	r3, #138	; 0x8a
 800be90:	6003      	strhi	r3, [r0, #0]
 800be92:	700a      	strbls	r2, [r1, #0]
 800be94:	f04f 30ff 	movhi.w	r0, #4294967295
 800be98:	bf98      	it	ls
 800be9a:	2001      	movls	r0, #1
 800be9c:	4770      	bx	lr
 800be9e:	4608      	mov	r0, r1
 800bea0:	4770      	bx	lr
	...

0800bea4 <__swsetup_r>:
 800bea4:	4b32      	ldr	r3, [pc, #200]	; (800bf70 <__swsetup_r+0xcc>)
 800bea6:	b570      	push	{r4, r5, r6, lr}
 800bea8:	681d      	ldr	r5, [r3, #0]
 800beaa:	4606      	mov	r6, r0
 800beac:	460c      	mov	r4, r1
 800beae:	b125      	cbz	r5, 800beba <__swsetup_r+0x16>
 800beb0:	69ab      	ldr	r3, [r5, #24]
 800beb2:	b913      	cbnz	r3, 800beba <__swsetup_r+0x16>
 800beb4:	4628      	mov	r0, r5
 800beb6:	f000 f985 	bl	800c1c4 <__sinit>
 800beba:	4b2e      	ldr	r3, [pc, #184]	; (800bf74 <__swsetup_r+0xd0>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	d10f      	bne.n	800bee0 <__swsetup_r+0x3c>
 800bec0:	686c      	ldr	r4, [r5, #4]
 800bec2:	89a3      	ldrh	r3, [r4, #12]
 800bec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bec8:	0719      	lsls	r1, r3, #28
 800beca:	d42c      	bmi.n	800bf26 <__swsetup_r+0x82>
 800becc:	06dd      	lsls	r5, r3, #27
 800bece:	d411      	bmi.n	800bef4 <__swsetup_r+0x50>
 800bed0:	2309      	movs	r3, #9
 800bed2:	6033      	str	r3, [r6, #0]
 800bed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	f04f 30ff 	mov.w	r0, #4294967295
 800bede:	e03e      	b.n	800bf5e <__swsetup_r+0xba>
 800bee0:	4b25      	ldr	r3, [pc, #148]	; (800bf78 <__swsetup_r+0xd4>)
 800bee2:	429c      	cmp	r4, r3
 800bee4:	d101      	bne.n	800beea <__swsetup_r+0x46>
 800bee6:	68ac      	ldr	r4, [r5, #8]
 800bee8:	e7eb      	b.n	800bec2 <__swsetup_r+0x1e>
 800beea:	4b24      	ldr	r3, [pc, #144]	; (800bf7c <__swsetup_r+0xd8>)
 800beec:	429c      	cmp	r4, r3
 800beee:	bf08      	it	eq
 800bef0:	68ec      	ldreq	r4, [r5, #12]
 800bef2:	e7e6      	b.n	800bec2 <__swsetup_r+0x1e>
 800bef4:	0758      	lsls	r0, r3, #29
 800bef6:	d512      	bpl.n	800bf1e <__swsetup_r+0x7a>
 800bef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800befa:	b141      	cbz	r1, 800bf0e <__swsetup_r+0x6a>
 800befc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf00:	4299      	cmp	r1, r3
 800bf02:	d002      	beq.n	800bf0a <__swsetup_r+0x66>
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7ff fb6f 	bl	800b5e8 <_free_r>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	2300      	movs	r3, #0
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	89a3      	ldrh	r3, [r4, #12]
 800bf20:	f043 0308 	orr.w	r3, r3, #8
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	b94b      	cbnz	r3, 800bf3e <__swsetup_r+0x9a>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf34:	d003      	beq.n	800bf3e <__swsetup_r+0x9a>
 800bf36:	4621      	mov	r1, r4
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f000 fa07 	bl	800c34c <__smakebuf_r>
 800bf3e:	89a0      	ldrh	r0, [r4, #12]
 800bf40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf44:	f010 0301 	ands.w	r3, r0, #1
 800bf48:	d00a      	beq.n	800bf60 <__swsetup_r+0xbc>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	6963      	ldr	r3, [r4, #20]
 800bf50:	425b      	negs	r3, r3
 800bf52:	61a3      	str	r3, [r4, #24]
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	b943      	cbnz	r3, 800bf6a <__swsetup_r+0xc6>
 800bf58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf5c:	d1ba      	bne.n	800bed4 <__swsetup_r+0x30>
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}
 800bf60:	0781      	lsls	r1, r0, #30
 800bf62:	bf58      	it	pl
 800bf64:	6963      	ldrpl	r3, [r4, #20]
 800bf66:	60a3      	str	r3, [r4, #8]
 800bf68:	e7f4      	b.n	800bf54 <__swsetup_r+0xb0>
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	e7f7      	b.n	800bf5e <__swsetup_r+0xba>
 800bf6e:	bf00      	nop
 800bf70:	2000001c 	.word	0x2000001c
 800bf74:	0800fa54 	.word	0x0800fa54
 800bf78:	0800fa74 	.word	0x0800fa74
 800bf7c:	0800fa34 	.word	0x0800fa34

0800bf80 <abort>:
 800bf80:	b508      	push	{r3, lr}
 800bf82:	2006      	movs	r0, #6
 800bf84:	f000 fa52 	bl	800c42c <raise>
 800bf88:	2001      	movs	r0, #1
 800bf8a:	f7f7 fab3 	bl	80034f4 <_exit>
	...

0800bf90 <__sflush_r>:
 800bf90:	898a      	ldrh	r2, [r1, #12]
 800bf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf96:	4605      	mov	r5, r0
 800bf98:	0710      	lsls	r0, r2, #28
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	d458      	bmi.n	800c050 <__sflush_r+0xc0>
 800bf9e:	684b      	ldr	r3, [r1, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dc05      	bgt.n	800bfb0 <__sflush_r+0x20>
 800bfa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	dc02      	bgt.n	800bfb0 <__sflush_r+0x20>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d0f9      	beq.n	800bfaa <__sflush_r+0x1a>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfbc:	682f      	ldr	r7, [r5, #0]
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	d032      	beq.n	800c028 <__sflush_r+0x98>
 800bfc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	075a      	lsls	r2, r3, #29
 800bfc8:	d505      	bpl.n	800bfd6 <__sflush_r+0x46>
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	1ac0      	subs	r0, r0, r3
 800bfce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfd0:	b10b      	cbz	r3, 800bfd6 <__sflush_r+0x46>
 800bfd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfd4:	1ac0      	subs	r0, r0, r3
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4602      	mov	r2, r0
 800bfda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfdc:	6a21      	ldr	r1, [r4, #32]
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b0      	blx	r6
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	d106      	bne.n	800bff6 <__sflush_r+0x66>
 800bfe8:	6829      	ldr	r1, [r5, #0]
 800bfea:	291d      	cmp	r1, #29
 800bfec:	d82c      	bhi.n	800c048 <__sflush_r+0xb8>
 800bfee:	4a2a      	ldr	r2, [pc, #168]	; (800c098 <__sflush_r+0x108>)
 800bff0:	40ca      	lsrs	r2, r1
 800bff2:	07d6      	lsls	r6, r2, #31
 800bff4:	d528      	bpl.n	800c048 <__sflush_r+0xb8>
 800bff6:	2200      	movs	r2, #0
 800bff8:	6062      	str	r2, [r4, #4]
 800bffa:	04d9      	lsls	r1, r3, #19
 800bffc:	6922      	ldr	r2, [r4, #16]
 800bffe:	6022      	str	r2, [r4, #0]
 800c000:	d504      	bpl.n	800c00c <__sflush_r+0x7c>
 800c002:	1c42      	adds	r2, r0, #1
 800c004:	d101      	bne.n	800c00a <__sflush_r+0x7a>
 800c006:	682b      	ldr	r3, [r5, #0]
 800c008:	b903      	cbnz	r3, 800c00c <__sflush_r+0x7c>
 800c00a:	6560      	str	r0, [r4, #84]	; 0x54
 800c00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c00e:	602f      	str	r7, [r5, #0]
 800c010:	2900      	cmp	r1, #0
 800c012:	d0ca      	beq.n	800bfaa <__sflush_r+0x1a>
 800c014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c018:	4299      	cmp	r1, r3
 800c01a:	d002      	beq.n	800c022 <__sflush_r+0x92>
 800c01c:	4628      	mov	r0, r5
 800c01e:	f7ff fae3 	bl	800b5e8 <_free_r>
 800c022:	2000      	movs	r0, #0
 800c024:	6360      	str	r0, [r4, #52]	; 0x34
 800c026:	e7c1      	b.n	800bfac <__sflush_r+0x1c>
 800c028:	6a21      	ldr	r1, [r4, #32]
 800c02a:	2301      	movs	r3, #1
 800c02c:	4628      	mov	r0, r5
 800c02e:	47b0      	blx	r6
 800c030:	1c41      	adds	r1, r0, #1
 800c032:	d1c7      	bne.n	800bfc4 <__sflush_r+0x34>
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0c4      	beq.n	800bfc4 <__sflush_r+0x34>
 800c03a:	2b1d      	cmp	r3, #29
 800c03c:	d001      	beq.n	800c042 <__sflush_r+0xb2>
 800c03e:	2b16      	cmp	r3, #22
 800c040:	d101      	bne.n	800c046 <__sflush_r+0xb6>
 800c042:	602f      	str	r7, [r5, #0]
 800c044:	e7b1      	b.n	800bfaa <__sflush_r+0x1a>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	e7ad      	b.n	800bfac <__sflush_r+0x1c>
 800c050:	690f      	ldr	r7, [r1, #16]
 800c052:	2f00      	cmp	r7, #0
 800c054:	d0a9      	beq.n	800bfaa <__sflush_r+0x1a>
 800c056:	0793      	lsls	r3, r2, #30
 800c058:	680e      	ldr	r6, [r1, #0]
 800c05a:	bf08      	it	eq
 800c05c:	694b      	ldreq	r3, [r1, #20]
 800c05e:	600f      	str	r7, [r1, #0]
 800c060:	bf18      	it	ne
 800c062:	2300      	movne	r3, #0
 800c064:	eba6 0807 	sub.w	r8, r6, r7
 800c068:	608b      	str	r3, [r1, #8]
 800c06a:	f1b8 0f00 	cmp.w	r8, #0
 800c06e:	dd9c      	ble.n	800bfaa <__sflush_r+0x1a>
 800c070:	6a21      	ldr	r1, [r4, #32]
 800c072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c074:	4643      	mov	r3, r8
 800c076:	463a      	mov	r2, r7
 800c078:	4628      	mov	r0, r5
 800c07a:	47b0      	blx	r6
 800c07c:	2800      	cmp	r0, #0
 800c07e:	dc06      	bgt.n	800c08e <__sflush_r+0xfe>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	f04f 30ff 	mov.w	r0, #4294967295
 800c08c:	e78e      	b.n	800bfac <__sflush_r+0x1c>
 800c08e:	4407      	add	r7, r0
 800c090:	eba8 0800 	sub.w	r8, r8, r0
 800c094:	e7e9      	b.n	800c06a <__sflush_r+0xda>
 800c096:	bf00      	nop
 800c098:	20400001 	.word	0x20400001

0800c09c <_fflush_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	690b      	ldr	r3, [r1, #16]
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	b913      	cbnz	r3, 800c0ac <_fflush_r+0x10>
 800c0a6:	2500      	movs	r5, #0
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	b118      	cbz	r0, 800c0b6 <_fflush_r+0x1a>
 800c0ae:	6983      	ldr	r3, [r0, #24]
 800c0b0:	b90b      	cbnz	r3, 800c0b6 <_fflush_r+0x1a>
 800c0b2:	f000 f887 	bl	800c1c4 <__sinit>
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <_fflush_r+0x6c>)
 800c0b8:	429c      	cmp	r4, r3
 800c0ba:	d11b      	bne.n	800c0f4 <_fflush_r+0x58>
 800c0bc:	686c      	ldr	r4, [r5, #4]
 800c0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0ef      	beq.n	800c0a6 <_fflush_r+0xa>
 800c0c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0c8:	07d0      	lsls	r0, r2, #31
 800c0ca:	d404      	bmi.n	800c0d6 <_fflush_r+0x3a>
 800c0cc:	0599      	lsls	r1, r3, #22
 800c0ce:	d402      	bmi.n	800c0d6 <_fflush_r+0x3a>
 800c0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0d2:	f000 f915 	bl	800c300 <__retarget_lock_acquire_recursive>
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	4621      	mov	r1, r4
 800c0da:	f7ff ff59 	bl	800bf90 <__sflush_r>
 800c0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0e0:	07da      	lsls	r2, r3, #31
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	d4e0      	bmi.n	800c0a8 <_fflush_r+0xc>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	059b      	lsls	r3, r3, #22
 800c0ea:	d4dd      	bmi.n	800c0a8 <_fflush_r+0xc>
 800c0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ee:	f000 f908 	bl	800c302 <__retarget_lock_release_recursive>
 800c0f2:	e7d9      	b.n	800c0a8 <_fflush_r+0xc>
 800c0f4:	4b05      	ldr	r3, [pc, #20]	; (800c10c <_fflush_r+0x70>)
 800c0f6:	429c      	cmp	r4, r3
 800c0f8:	d101      	bne.n	800c0fe <_fflush_r+0x62>
 800c0fa:	68ac      	ldr	r4, [r5, #8]
 800c0fc:	e7df      	b.n	800c0be <_fflush_r+0x22>
 800c0fe:	4b04      	ldr	r3, [pc, #16]	; (800c110 <_fflush_r+0x74>)
 800c100:	429c      	cmp	r4, r3
 800c102:	bf08      	it	eq
 800c104:	68ec      	ldreq	r4, [r5, #12]
 800c106:	e7da      	b.n	800c0be <_fflush_r+0x22>
 800c108:	0800fa54 	.word	0x0800fa54
 800c10c:	0800fa74 	.word	0x0800fa74
 800c110:	0800fa34 	.word	0x0800fa34

0800c114 <std>:
 800c114:	2300      	movs	r3, #0
 800c116:	b510      	push	{r4, lr}
 800c118:	4604      	mov	r4, r0
 800c11a:	e9c0 3300 	strd	r3, r3, [r0]
 800c11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c122:	6083      	str	r3, [r0, #8]
 800c124:	8181      	strh	r1, [r0, #12]
 800c126:	6643      	str	r3, [r0, #100]	; 0x64
 800c128:	81c2      	strh	r2, [r0, #14]
 800c12a:	6183      	str	r3, [r0, #24]
 800c12c:	4619      	mov	r1, r3
 800c12e:	2208      	movs	r2, #8
 800c130:	305c      	adds	r0, #92	; 0x5c
 800c132:	f7fd fba7 	bl	8009884 <memset>
 800c136:	4b05      	ldr	r3, [pc, #20]	; (800c14c <std+0x38>)
 800c138:	6263      	str	r3, [r4, #36]	; 0x24
 800c13a:	4b05      	ldr	r3, [pc, #20]	; (800c150 <std+0x3c>)
 800c13c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c13e:	4b05      	ldr	r3, [pc, #20]	; (800c154 <std+0x40>)
 800c140:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c142:	4b05      	ldr	r3, [pc, #20]	; (800c158 <std+0x44>)
 800c144:	6224      	str	r4, [r4, #32]
 800c146:	6323      	str	r3, [r4, #48]	; 0x30
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	bf00      	nop
 800c14c:	0800c465 	.word	0x0800c465
 800c150:	0800c487 	.word	0x0800c487
 800c154:	0800c4bf 	.word	0x0800c4bf
 800c158:	0800c4e3 	.word	0x0800c4e3

0800c15c <_cleanup_r>:
 800c15c:	4901      	ldr	r1, [pc, #4]	; (800c164 <_cleanup_r+0x8>)
 800c15e:	f000 b8af 	b.w	800c2c0 <_fwalk_reent>
 800c162:	bf00      	nop
 800c164:	0800c09d 	.word	0x0800c09d

0800c168 <__sfmoreglue>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	1e4a      	subs	r2, r1, #1
 800c16c:	2568      	movs	r5, #104	; 0x68
 800c16e:	4355      	muls	r5, r2
 800c170:	460e      	mov	r6, r1
 800c172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c176:	f7ff fa87 	bl	800b688 <_malloc_r>
 800c17a:	4604      	mov	r4, r0
 800c17c:	b140      	cbz	r0, 800c190 <__sfmoreglue+0x28>
 800c17e:	2100      	movs	r1, #0
 800c180:	e9c0 1600 	strd	r1, r6, [r0]
 800c184:	300c      	adds	r0, #12
 800c186:	60a0      	str	r0, [r4, #8]
 800c188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c18c:	f7fd fb7a 	bl	8009884 <memset>
 800c190:	4620      	mov	r0, r4
 800c192:	bd70      	pop	{r4, r5, r6, pc}

0800c194 <__sfp_lock_acquire>:
 800c194:	4801      	ldr	r0, [pc, #4]	; (800c19c <__sfp_lock_acquire+0x8>)
 800c196:	f000 b8b3 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800c19a:	bf00      	nop
 800c19c:	20000664 	.word	0x20000664

0800c1a0 <__sfp_lock_release>:
 800c1a0:	4801      	ldr	r0, [pc, #4]	; (800c1a8 <__sfp_lock_release+0x8>)
 800c1a2:	f000 b8ae 	b.w	800c302 <__retarget_lock_release_recursive>
 800c1a6:	bf00      	nop
 800c1a8:	20000664 	.word	0x20000664

0800c1ac <__sinit_lock_acquire>:
 800c1ac:	4801      	ldr	r0, [pc, #4]	; (800c1b4 <__sinit_lock_acquire+0x8>)
 800c1ae:	f000 b8a7 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800c1b2:	bf00      	nop
 800c1b4:	2000065f 	.word	0x2000065f

0800c1b8 <__sinit_lock_release>:
 800c1b8:	4801      	ldr	r0, [pc, #4]	; (800c1c0 <__sinit_lock_release+0x8>)
 800c1ba:	f000 b8a2 	b.w	800c302 <__retarget_lock_release_recursive>
 800c1be:	bf00      	nop
 800c1c0:	2000065f 	.word	0x2000065f

0800c1c4 <__sinit>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	f7ff fff0 	bl	800c1ac <__sinit_lock_acquire>
 800c1cc:	69a3      	ldr	r3, [r4, #24]
 800c1ce:	b11b      	cbz	r3, 800c1d8 <__sinit+0x14>
 800c1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d4:	f7ff bff0 	b.w	800c1b8 <__sinit_lock_release>
 800c1d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1dc:	6523      	str	r3, [r4, #80]	; 0x50
 800c1de:	4b13      	ldr	r3, [pc, #76]	; (800c22c <__sinit+0x68>)
 800c1e0:	4a13      	ldr	r2, [pc, #76]	; (800c230 <__sinit+0x6c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1e6:	42a3      	cmp	r3, r4
 800c1e8:	bf04      	itt	eq
 800c1ea:	2301      	moveq	r3, #1
 800c1ec:	61a3      	streq	r3, [r4, #24]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 f820 	bl	800c234 <__sfp>
 800c1f4:	6060      	str	r0, [r4, #4]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f000 f81c 	bl	800c234 <__sfp>
 800c1fc:	60a0      	str	r0, [r4, #8]
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 f818 	bl	800c234 <__sfp>
 800c204:	2200      	movs	r2, #0
 800c206:	60e0      	str	r0, [r4, #12]
 800c208:	2104      	movs	r1, #4
 800c20a:	6860      	ldr	r0, [r4, #4]
 800c20c:	f7ff ff82 	bl	800c114 <std>
 800c210:	68a0      	ldr	r0, [r4, #8]
 800c212:	2201      	movs	r2, #1
 800c214:	2109      	movs	r1, #9
 800c216:	f7ff ff7d 	bl	800c114 <std>
 800c21a:	68e0      	ldr	r0, [r4, #12]
 800c21c:	2202      	movs	r2, #2
 800c21e:	2112      	movs	r1, #18
 800c220:	f7ff ff78 	bl	800c114 <std>
 800c224:	2301      	movs	r3, #1
 800c226:	61a3      	str	r3, [r4, #24]
 800c228:	e7d2      	b.n	800c1d0 <__sinit+0xc>
 800c22a:	bf00      	nop
 800c22c:	0800f6b0 	.word	0x0800f6b0
 800c230:	0800c15d 	.word	0x0800c15d

0800c234 <__sfp>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	4607      	mov	r7, r0
 800c238:	f7ff ffac 	bl	800c194 <__sfp_lock_acquire>
 800c23c:	4b1e      	ldr	r3, [pc, #120]	; (800c2b8 <__sfp+0x84>)
 800c23e:	681e      	ldr	r6, [r3, #0]
 800c240:	69b3      	ldr	r3, [r6, #24]
 800c242:	b913      	cbnz	r3, 800c24a <__sfp+0x16>
 800c244:	4630      	mov	r0, r6
 800c246:	f7ff ffbd 	bl	800c1c4 <__sinit>
 800c24a:	3648      	adds	r6, #72	; 0x48
 800c24c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c250:	3b01      	subs	r3, #1
 800c252:	d503      	bpl.n	800c25c <__sfp+0x28>
 800c254:	6833      	ldr	r3, [r6, #0]
 800c256:	b30b      	cbz	r3, 800c29c <__sfp+0x68>
 800c258:	6836      	ldr	r6, [r6, #0]
 800c25a:	e7f7      	b.n	800c24c <__sfp+0x18>
 800c25c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c260:	b9d5      	cbnz	r5, 800c298 <__sfp+0x64>
 800c262:	4b16      	ldr	r3, [pc, #88]	; (800c2bc <__sfp+0x88>)
 800c264:	60e3      	str	r3, [r4, #12]
 800c266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c26a:	6665      	str	r5, [r4, #100]	; 0x64
 800c26c:	f000 f847 	bl	800c2fe <__retarget_lock_init_recursive>
 800c270:	f7ff ff96 	bl	800c1a0 <__sfp_lock_release>
 800c274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c27c:	6025      	str	r5, [r4, #0]
 800c27e:	61a5      	str	r5, [r4, #24]
 800c280:	2208      	movs	r2, #8
 800c282:	4629      	mov	r1, r5
 800c284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c288:	f7fd fafc 	bl	8009884 <memset>
 800c28c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c294:	4620      	mov	r0, r4
 800c296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c298:	3468      	adds	r4, #104	; 0x68
 800c29a:	e7d9      	b.n	800c250 <__sfp+0x1c>
 800c29c:	2104      	movs	r1, #4
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff ff62 	bl	800c168 <__sfmoreglue>
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	6030      	str	r0, [r6, #0]
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d1d5      	bne.n	800c258 <__sfp+0x24>
 800c2ac:	f7ff ff78 	bl	800c1a0 <__sfp_lock_release>
 800c2b0:	230c      	movs	r3, #12
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	e7ee      	b.n	800c294 <__sfp+0x60>
 800c2b6:	bf00      	nop
 800c2b8:	0800f6b0 	.word	0x0800f6b0
 800c2bc:	ffff0001 	.word	0xffff0001

0800c2c0 <_fwalk_reent>:
 800c2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	4688      	mov	r8, r1
 800c2c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2cc:	2700      	movs	r7, #0
 800c2ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2d2:	f1b9 0901 	subs.w	r9, r9, #1
 800c2d6:	d505      	bpl.n	800c2e4 <_fwalk_reent+0x24>
 800c2d8:	6824      	ldr	r4, [r4, #0]
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d1f7      	bne.n	800c2ce <_fwalk_reent+0xe>
 800c2de:	4638      	mov	r0, r7
 800c2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2e4:	89ab      	ldrh	r3, [r5, #12]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d907      	bls.n	800c2fa <_fwalk_reent+0x3a>
 800c2ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	d003      	beq.n	800c2fa <_fwalk_reent+0x3a>
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	47c0      	blx	r8
 800c2f8:	4307      	orrs	r7, r0
 800c2fa:	3568      	adds	r5, #104	; 0x68
 800c2fc:	e7e9      	b.n	800c2d2 <_fwalk_reent+0x12>

0800c2fe <__retarget_lock_init_recursive>:
 800c2fe:	4770      	bx	lr

0800c300 <__retarget_lock_acquire_recursive>:
 800c300:	4770      	bx	lr

0800c302 <__retarget_lock_release_recursive>:
 800c302:	4770      	bx	lr

0800c304 <__swhatbuf_r>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	460e      	mov	r6, r1
 800c308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30c:	2900      	cmp	r1, #0
 800c30e:	b096      	sub	sp, #88	; 0x58
 800c310:	4614      	mov	r4, r2
 800c312:	461d      	mov	r5, r3
 800c314:	da07      	bge.n	800c326 <__swhatbuf_r+0x22>
 800c316:	2300      	movs	r3, #0
 800c318:	602b      	str	r3, [r5, #0]
 800c31a:	89b3      	ldrh	r3, [r6, #12]
 800c31c:	061a      	lsls	r2, r3, #24
 800c31e:	d410      	bmi.n	800c342 <__swhatbuf_r+0x3e>
 800c320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c324:	e00e      	b.n	800c344 <__swhatbuf_r+0x40>
 800c326:	466a      	mov	r2, sp
 800c328:	f000 f902 	bl	800c530 <_fstat_r>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	dbf2      	blt.n	800c316 <__swhatbuf_r+0x12>
 800c330:	9a01      	ldr	r2, [sp, #4]
 800c332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c33a:	425a      	negs	r2, r3
 800c33c:	415a      	adcs	r2, r3
 800c33e:	602a      	str	r2, [r5, #0]
 800c340:	e7ee      	b.n	800c320 <__swhatbuf_r+0x1c>
 800c342:	2340      	movs	r3, #64	; 0x40
 800c344:	2000      	movs	r0, #0
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	b016      	add	sp, #88	; 0x58
 800c34a:	bd70      	pop	{r4, r5, r6, pc}

0800c34c <__smakebuf_r>:
 800c34c:	898b      	ldrh	r3, [r1, #12]
 800c34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c350:	079d      	lsls	r5, r3, #30
 800c352:	4606      	mov	r6, r0
 800c354:	460c      	mov	r4, r1
 800c356:	d507      	bpl.n	800c368 <__smakebuf_r+0x1c>
 800c358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	6123      	str	r3, [r4, #16]
 800c360:	2301      	movs	r3, #1
 800c362:	6163      	str	r3, [r4, #20]
 800c364:	b002      	add	sp, #8
 800c366:	bd70      	pop	{r4, r5, r6, pc}
 800c368:	ab01      	add	r3, sp, #4
 800c36a:	466a      	mov	r2, sp
 800c36c:	f7ff ffca 	bl	800c304 <__swhatbuf_r>
 800c370:	9900      	ldr	r1, [sp, #0]
 800c372:	4605      	mov	r5, r0
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff f987 	bl	800b688 <_malloc_r>
 800c37a:	b948      	cbnz	r0, 800c390 <__smakebuf_r+0x44>
 800c37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c380:	059a      	lsls	r2, r3, #22
 800c382:	d4ef      	bmi.n	800c364 <__smakebuf_r+0x18>
 800c384:	f023 0303 	bic.w	r3, r3, #3
 800c388:	f043 0302 	orr.w	r3, r3, #2
 800c38c:	81a3      	strh	r3, [r4, #12]
 800c38e:	e7e3      	b.n	800c358 <__smakebuf_r+0xc>
 800c390:	4b0d      	ldr	r3, [pc, #52]	; (800c3c8 <__smakebuf_r+0x7c>)
 800c392:	62b3      	str	r3, [r6, #40]	; 0x28
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	6020      	str	r0, [r4, #0]
 800c398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39c:	81a3      	strh	r3, [r4, #12]
 800c39e:	9b00      	ldr	r3, [sp, #0]
 800c3a0:	6163      	str	r3, [r4, #20]
 800c3a2:	9b01      	ldr	r3, [sp, #4]
 800c3a4:	6120      	str	r0, [r4, #16]
 800c3a6:	b15b      	cbz	r3, 800c3c0 <__smakebuf_r+0x74>
 800c3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f000 f8d1 	bl	800c554 <_isatty_r>
 800c3b2:	b128      	cbz	r0, 800c3c0 <__smakebuf_r+0x74>
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	f043 0301 	orr.w	r3, r3, #1
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	89a0      	ldrh	r0, [r4, #12]
 800c3c2:	4305      	orrs	r5, r0
 800c3c4:	81a5      	strh	r5, [r4, #12]
 800c3c6:	e7cd      	b.n	800c364 <__smakebuf_r+0x18>
 800c3c8:	0800c15d 	.word	0x0800c15d

0800c3cc <_malloc_usable_size_r>:
 800c3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d0:	1f18      	subs	r0, r3, #4
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	bfbc      	itt	lt
 800c3d6:	580b      	ldrlt	r3, [r1, r0]
 800c3d8:	18c0      	addlt	r0, r0, r3
 800c3da:	4770      	bx	lr

0800c3dc <_raise_r>:
 800c3dc:	291f      	cmp	r1, #31
 800c3de:	b538      	push	{r3, r4, r5, lr}
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	460d      	mov	r5, r1
 800c3e4:	d904      	bls.n	800c3f0 <_raise_r+0x14>
 800c3e6:	2316      	movs	r3, #22
 800c3e8:	6003      	str	r3, [r0, #0]
 800c3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3f2:	b112      	cbz	r2, 800c3fa <_raise_r+0x1e>
 800c3f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3f8:	b94b      	cbnz	r3, 800c40e <_raise_r+0x32>
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 f830 	bl	800c460 <_getpid_r>
 800c400:	462a      	mov	r2, r5
 800c402:	4601      	mov	r1, r0
 800c404:	4620      	mov	r0, r4
 800c406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c40a:	f000 b817 	b.w	800c43c <_kill_r>
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d00a      	beq.n	800c428 <_raise_r+0x4c>
 800c412:	1c59      	adds	r1, r3, #1
 800c414:	d103      	bne.n	800c41e <_raise_r+0x42>
 800c416:	2316      	movs	r3, #22
 800c418:	6003      	str	r3, [r0, #0]
 800c41a:	2001      	movs	r0, #1
 800c41c:	e7e7      	b.n	800c3ee <_raise_r+0x12>
 800c41e:	2400      	movs	r4, #0
 800c420:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c424:	4628      	mov	r0, r5
 800c426:	4798      	blx	r3
 800c428:	2000      	movs	r0, #0
 800c42a:	e7e0      	b.n	800c3ee <_raise_r+0x12>

0800c42c <raise>:
 800c42c:	4b02      	ldr	r3, [pc, #8]	; (800c438 <raise+0xc>)
 800c42e:	4601      	mov	r1, r0
 800c430:	6818      	ldr	r0, [r3, #0]
 800c432:	f7ff bfd3 	b.w	800c3dc <_raise_r>
 800c436:	bf00      	nop
 800c438:	2000001c 	.word	0x2000001c

0800c43c <_kill_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d07      	ldr	r5, [pc, #28]	; (800c45c <_kill_r+0x20>)
 800c440:	2300      	movs	r3, #0
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	4611      	mov	r1, r2
 800c448:	602b      	str	r3, [r5, #0]
 800c44a:	f7f7 f843 	bl	80034d4 <_kill>
 800c44e:	1c43      	adds	r3, r0, #1
 800c450:	d102      	bne.n	800c458 <_kill_r+0x1c>
 800c452:	682b      	ldr	r3, [r5, #0]
 800c454:	b103      	cbz	r3, 800c458 <_kill_r+0x1c>
 800c456:	6023      	str	r3, [r4, #0]
 800c458:	bd38      	pop	{r3, r4, r5, pc}
 800c45a:	bf00      	nop
 800c45c:	20000658 	.word	0x20000658

0800c460 <_getpid_r>:
 800c460:	f7f7 b830 	b.w	80034c4 <_getpid>

0800c464 <__sread>:
 800c464:	b510      	push	{r4, lr}
 800c466:	460c      	mov	r4, r1
 800c468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c46c:	f000 f894 	bl	800c598 <_read_r>
 800c470:	2800      	cmp	r0, #0
 800c472:	bfab      	itete	ge
 800c474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c476:	89a3      	ldrhlt	r3, [r4, #12]
 800c478:	181b      	addge	r3, r3, r0
 800c47a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c47e:	bfac      	ite	ge
 800c480:	6563      	strge	r3, [r4, #84]	; 0x54
 800c482:	81a3      	strhlt	r3, [r4, #12]
 800c484:	bd10      	pop	{r4, pc}

0800c486 <__swrite>:
 800c486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48a:	461f      	mov	r7, r3
 800c48c:	898b      	ldrh	r3, [r1, #12]
 800c48e:	05db      	lsls	r3, r3, #23
 800c490:	4605      	mov	r5, r0
 800c492:	460c      	mov	r4, r1
 800c494:	4616      	mov	r6, r2
 800c496:	d505      	bpl.n	800c4a4 <__swrite+0x1e>
 800c498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c49c:	2302      	movs	r3, #2
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f000 f868 	bl	800c574 <_lseek_r>
 800c4a4:	89a3      	ldrh	r3, [r4, #12]
 800c4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4ae:	81a3      	strh	r3, [r4, #12]
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	463b      	mov	r3, r7
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ba:	f000 b817 	b.w	800c4ec <_write_r>

0800c4be <__sseek>:
 800c4be:	b510      	push	{r4, lr}
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c6:	f000 f855 	bl	800c574 <_lseek_r>
 800c4ca:	1c43      	adds	r3, r0, #1
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	bf15      	itete	ne
 800c4d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4da:	81a3      	strheq	r3, [r4, #12]
 800c4dc:	bf18      	it	ne
 800c4de:	81a3      	strhne	r3, [r4, #12]
 800c4e0:	bd10      	pop	{r4, pc}

0800c4e2 <__sclose>:
 800c4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e6:	f000 b813 	b.w	800c510 <_close_r>
	...

0800c4ec <_write_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4d07      	ldr	r5, [pc, #28]	; (800c50c <_write_r+0x20>)
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	4608      	mov	r0, r1
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	602a      	str	r2, [r5, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f7f7 f821 	bl	8003542 <_write>
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d102      	bne.n	800c50a <_write_r+0x1e>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	b103      	cbz	r3, 800c50a <_write_r+0x1e>
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	20000658 	.word	0x20000658

0800c510 <_close_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	; (800c52c <_close_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f7 f82d 	bl	800357a <_close>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_close_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_close_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	20000658 	.word	0x20000658

0800c530 <_fstat_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d07      	ldr	r5, [pc, #28]	; (800c550 <_fstat_r+0x20>)
 800c534:	2300      	movs	r3, #0
 800c536:	4604      	mov	r4, r0
 800c538:	4608      	mov	r0, r1
 800c53a:	4611      	mov	r1, r2
 800c53c:	602b      	str	r3, [r5, #0]
 800c53e:	f7f7 f828 	bl	8003592 <_fstat>
 800c542:	1c43      	adds	r3, r0, #1
 800c544:	d102      	bne.n	800c54c <_fstat_r+0x1c>
 800c546:	682b      	ldr	r3, [r5, #0]
 800c548:	b103      	cbz	r3, 800c54c <_fstat_r+0x1c>
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	bd38      	pop	{r3, r4, r5, pc}
 800c54e:	bf00      	nop
 800c550:	20000658 	.word	0x20000658

0800c554 <_isatty_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4d06      	ldr	r5, [pc, #24]	; (800c570 <_isatty_r+0x1c>)
 800c558:	2300      	movs	r3, #0
 800c55a:	4604      	mov	r4, r0
 800c55c:	4608      	mov	r0, r1
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	f7f7 f827 	bl	80035b2 <_isatty>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d102      	bne.n	800c56e <_isatty_r+0x1a>
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	b103      	cbz	r3, 800c56e <_isatty_r+0x1a>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	20000658 	.word	0x20000658

0800c574 <_lseek_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4d07      	ldr	r5, [pc, #28]	; (800c594 <_lseek_r+0x20>)
 800c578:	4604      	mov	r4, r0
 800c57a:	4608      	mov	r0, r1
 800c57c:	4611      	mov	r1, r2
 800c57e:	2200      	movs	r2, #0
 800c580:	602a      	str	r2, [r5, #0]
 800c582:	461a      	mov	r2, r3
 800c584:	f7f7 f820 	bl	80035c8 <_lseek>
 800c588:	1c43      	adds	r3, r0, #1
 800c58a:	d102      	bne.n	800c592 <_lseek_r+0x1e>
 800c58c:	682b      	ldr	r3, [r5, #0]
 800c58e:	b103      	cbz	r3, 800c592 <_lseek_r+0x1e>
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	bd38      	pop	{r3, r4, r5, pc}
 800c594:	20000658 	.word	0x20000658

0800c598 <_read_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d07      	ldr	r5, [pc, #28]	; (800c5b8 <_read_r+0x20>)
 800c59c:	4604      	mov	r4, r0
 800c59e:	4608      	mov	r0, r1
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	602a      	str	r2, [r5, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f7f6 ffae 	bl	8003508 <_read>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d102      	bne.n	800c5b6 <_read_r+0x1e>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	b103      	cbz	r3, 800c5b6 <_read_r+0x1e>
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	20000658 	.word	0x20000658

0800c5bc <_init>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	bf00      	nop
 800c5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c2:	bc08      	pop	{r3}
 800c5c4:	469e      	mov	lr, r3
 800c5c6:	4770      	bx	lr

0800c5c8 <_fini>:
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	bf00      	nop
 800c5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ce:	bc08      	pop	{r3}
 800c5d0:	469e      	mov	lr, r3
 800c5d2:	4770      	bx	lr
